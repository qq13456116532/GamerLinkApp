./AppShell.xaml:
【﻿<?xml version="1.0" encoding="UTF-8" ?>
<Shell
    x:Class="GamerLinkApp.AppShell"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:views="clr-namespace:GamerLinkApp.Views"
    Shell.FlyoutBehavior="Disabled"
    Title="GamerLinkApp"
    Shell.NavBarIsVisible="False">

    <!-- 定义底部标签栏 -->
    <TabBar>
        <!-- 第一个标签页: 商铺. 我们直接使用你已有的 ServiceListPage -->
        <ShellContent
            Title="商铺"
            ContentTemplate="{DataTemplate views:ServiceListPage}"
            Icon="tab_shop.png"
             />

        <!-- 第二个标签页: 专区. 我们将创建新的 ZonePage -->
        <ShellContent
            Title="专区"
            ContentTemplate="{DataTemplate views:ZonePage}"
            Icon="tab_zone.png"
            />

        <!-- 第三个标签页: 个人. 我们将创建新的 ProfilePage -->
        <ShellContent
            Title="个人"
            ContentTemplate="{DataTemplate views:ProfilePage}"
            Icon="tab_mine.png"
             />
    </TabBar>

</Shell>
】

./AppShell.xaml.cs:
【﻿using GamerLinkApp.Views;

namespace GamerLinkApp
{
    public partial class AppShell : Shell
    {
        public AppShell()
        {
            InitializeComponent();
            // 为服务详情页注册路由, 以便导航服务可以找到
            Routing.RegisterRoute(nameof(ServiceDetailPage), typeof(ServiceDetailPage));
        }
    }
}
】

./MainPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="GamerLinkApp.MainPage">

    <ScrollView>
        <VerticalStackLayout
            Padding="30,0"
            Spacing="25">
            <Image
                Source="dotnet_bot.png"
                HeightRequest="185"
                Aspect="AspectFit"
                SemanticProperties.Description="dot net bot in a hovercraft number nine" />

            <Label
                Text="Hello, World!"
                Style="{StaticResource Headline}"
                SemanticProperties.HeadingLevel="Level1" />

            <Label
                Text="Welcome to &#10;.NET Multi-platform App UI"
                Style="{StaticResource SubHeadline}"
                SemanticProperties.HeadingLevel="Level2"
                SemanticProperties.Description="Welcome to dot net Multi platform App U I" />

            <Button
                x:Name="CounterBtn"
                Text="Click me" 
                SemanticProperties.Hint="Counts the number of times you click"
                Clicked="OnCounterClicked"
                HorizontalOptions="Fill" />
        </VerticalStackLayout>
    </ScrollView>

</ContentPage>
】

./MainPage.xaml.cs:
【﻿namespace GamerLinkApp
{
    public partial class MainPage : ContentPage
    {
        int count = 0;

        public MainPage()
        {
            InitializeComponent();
        }

        private void OnCounterClicked(object? sender, EventArgs e)
        {
            count++;

            if (count == 1)
                CounterBtn.Text = $"Clicked {count} time";
            else
                CounterBtn.Text = $"Clicked {count} times";

            SemanticScreenReader.Announce(CounterBtn.Text);
        }
    }
}
】

./MauiProgram.cs:
【﻿using System.IO;
using GamerLinkApp.Data;
using GamerLinkApp.Helpers;
using GamerLinkApp.Services;
using GamerLinkApp.ViewModels;
using GamerLinkApp.Views;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Maui.Storage;

namespace GamerLinkApp
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });

#if DEBUG
            builder.Logging.AddDebug();
#endif

            var databasePath = Path.Combine(FileSystem.AppDataDirectory, "gamerlink.db");

#if DEBUG
            if (File.Exists(databasePath))
            {
                File.Delete(databasePath);
                Console.WriteLine($"数据库已删除: {databasePath}");
            }
            else
            {
                Console.WriteLine("数据库不存在。");
            }
#endif

            builder.Services.AddDbContextFactory<ServiceDbContext>(options =>
                options.UseSqlite($"Data Source={databasePath}"));
            builder.Services.AddSingleton<IDataService, SqliteDataService>();

            builder.Services.AddSingleton<ServiceListPage>();
            builder.Services.AddSingleton<ServiceListViewModel>();

            builder.Services.AddSingleton<ZonePage>();
            builder.Services.AddSingleton<ZoneViewModel>();
            builder.Services.AddSingleton<ProfilePage>();
            builder.Services.AddSingleton<ProfileViewModel>();

            builder.Services.AddTransient<ServiceDetailPage>();
            builder.Services.AddTransient<ServiceDetailViewModel>();

            var app = builder.Build();
            ServiceHelper.Initialize(app.Services);

            return app;
        }
    }
}
】

Data/ServiceDbContext.cs:
【﻿using System;
using System.Collections.Generic;
using System.Text.Json;
using GamerLinkApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GamerLinkApp.Data
{
    public class ServiceDbContext : DbContext
    {
        private static readonly JsonSerializerOptions JsonOptions = new(JsonSerializerDefaults.Web)
        {
            WriteIndented = false
        };

        private static readonly ValueConverter<List<string>, string> ListConverter = new(
            list => JsonSerializer.Serialize(list ?? new List<string>(), JsonOptions),
            json => string.IsNullOrWhiteSpace(json)
                ? new List<string>()
                : JsonSerializer.Deserialize<List<string>>(json, JsonOptions) ?? new List<string>()
        );

        private static readonly ValueComparer<List<string>> ListComparer = new(
            (left, right) => AreListsEqual(left, right),
            list => GetListHashCode(list),
            list => CloneList(list)
        );

        public ServiceDbContext(DbContextOptions<ServiceDbContext> options)
            : base(options)
        {
        }

        public DbSet<Service> Services => Set<Service>();
        public DbSet<User> Users => Set<User>();
        public DbSet<Order> Orders => Set<Order>();
        public DbSet<Review> Reviews => Set<Review>();
        public DbSet<Banner> Banners => Set<Banner>();
        public DbSet<Category> Categories => Set<Category>();
        public DbSet<Favorite> Favorites => Set<Favorite>();

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            ConfigureService(modelBuilder);
        }

        private static void ConfigureService(ModelBuilder modelBuilder)
        {
            var entity = modelBuilder.Entity<Service>();

            entity.HasKey(s => s.Id);
            entity.Property(s => s.Title).IsRequired();
            entity.Property(s => s.Description).IsRequired(false);
            entity.Property(s => s.GameName).IsRequired(false);
            entity.Property(s => s.ServiceType).IsRequired(false);
            entity.Property(s => s.Category).IsRequired(false);
            entity.Property(s => s.ThumbnailUrl).IsRequired(false);

            entity.Property(s => s.ImageUrls)
                .HasConversion(ListConverter)
                .Metadata.SetValueComparer(ListComparer);

            entity.Property(s => s.Tags)
                .HasConversion(ListConverter)
                .Metadata.SetValueComparer(ListComparer);
        }

        private static bool AreListsEqual(List<string>? left, List<string>? right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (left is null || right is null)
            {
                return left is null && right is null;
            }

            if (left.Count != right.Count)
            {
                return false;
            }

            for (var i = 0; i < left.Count; i++)
            {
                if (!string.Equals(left[i], right[i], StringComparison.Ordinal))
                {
                    return false;
                }
            }

            return true;
        }

        private static int GetListHashCode(List<string>? list)
        {
            if (list is null || list.Count == 0)
            {
                return 0;
            }

            var hash = new HashCode();
            for (var i = 0; i < list.Count; i++)
            {
                hash.Add(list[i], StringComparer.Ordinal);
            }

            return hash.ToHashCode();
        }

        private static List<string> CloneList(List<string>? list)
        {
            return list is null ? new List<string>() : new List<string>(list);
        }
    }
}
】

Helpers/ServiceHelper.cs:
【﻿using System;
using Microsoft.Extensions.DependencyInjection;

namespace GamerLinkApp.Helpers;

public static class ServiceHelper
{
    private static IServiceProvider? _serviceProvider;

    public static void Initialize(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }

    public static T GetRequiredService<T>() where T : notnull
    {
        if (_serviceProvider is null)
        {
            throw new InvalidOperationException("Service provider is not initialized.");
        }

        return _serviceProvider.GetRequiredService<T>();
    }
}
】

Models/Banner.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Banner
    {
        public int Id { get; set; }
        public string ImageUrl { get; set; } // Banner图片地址
        public string TargetUrl { get; set; } // 点击Banner后跳转的地址 (例如某个服务的详情页)
    }
}
】

Models/Category.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } // 分类名称，如 "MOBA", "FPS", "RPG"
        public string IconUrl { get; set; } // 分类的图标URL (可选)
    }
}】

Models/Favorite.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Favorite
    {
        public int Id { get; set; }
        public int UserId { get; set; }     // 哪个用户收藏的
        public int ServiceId { get; set; }  // 收藏了哪个服务
    }
}】

Models/Order.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class Order
    {
        public int Id { get; set; }
        public int ServiceId { get; set; }
        public int BuyerId { get; set; }
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } // 例如: "进行中", "已完成"

        // 订单流程管理
        public DateTime? PaymentDate { get; set; } // 支付时间
        public DateTime? CompletionDate { get; set; } // 订单完成时间
        public DateTime? RefundRequestDate { get; set; } // 退款申请时间
        public decimal TotalPrice { get; set; } // 订单总价

        // 评论系统关联
        public int? ReviewId { get; set; } // 关联的评论ID，可以为空
    }

    // 建议为订单状态定义一个枚举
    public enum OrderStatus
    {
        PendingPayment, // 待支付
        Ongoing,        // 进行中
        PendingReview,  // 待评论
        Completed,      // 已完成
        RefundRequested,// 退款中
        Cancelled       // 已取消
    }
}
】

Models/Review.cs:
【﻿using System;

namespace GamerLinkApp.Models
{
    public class Review
    {
        public int Id { get; set; }
        public int ServiceId { get; set; } // 关联哪个服务
        public int OrderId { get; set; }   // 关联哪个订单
        public int UserId { get; set; }    // 哪个用户发表的
        public int Rating { get; set; }    // 评分 (例如 1-5 星)
        public string Comment { get; set; } // 评论内容
        public DateTime ReviewDate { get; set; } // 评论时间
    }
}】

Models/Service.cs:
【﻿using System.Collections.Generic;

namespace GamerLinkApp.Models
{
    public class Service
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string GameName { get; set; }
        public string ServiceType { get; set; } // 例如: "代练", "陪玩"
        public int SellerId { get; set; }

        public string ThumbnailUrl { get; set; } // 列表和推荐位缩略图
        public List<string> ImageUrls { get; set; } // 轮播图/详情图集合
        public string Category { get; set; } // 服务所属分类, 如 "MOBA", "FPS"
        public bool IsFeatured { get; set; } // 是否精选推荐
        public double AverageRating { get; set; } // 平均评分
        public int ReviewCount { get; set; } // 评价数量
        public int PurchaseCount { get; set; } // 累计购买人数
        public int CompletedCount { get; set; } // 已完成订单数

        public List<string> Tags { get; set; } // 服务标签, 如 "上分", "陪练"
    }
}
】

Models/User.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }

        // 微信认证相关，暂时不用
        //public string WeChatOpenId { get; set; } // 用户的唯一标识
        //public string WeChatUnionId { get; set; } // 如果应用涉及多个公众号或小程序，会用到

        // 个人资料管理
        public string Nickname { get; set; } // 用户昵称
        public string AvatarUrl { get; set; } // 用户头像图片的URL

    }
}
】

Platforms/Android/AndroidManifest.xml:
【﻿<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
	<application android:allowBackup="true" android:icon="@mipmap/appicon" android:roundIcon="@mipmap/appicon_round" android:supportsRtl="true" android:theme="@style/Maui.MainTheme"></application>
	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
	<uses-permission android:name="android.permission.INTERNET" />
</manifest>】

Platforms/Android/MainActivity.cs:
【﻿using Android.App;
using Android.Content.PM;
using Android.OS;

namespace GamerLinkApp
{
    [Activity(Theme = "@style/Maui.SplashTheme", MainLauncher = true, LaunchMode = LaunchMode.SingleTop, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]
    public class MainActivity : MauiAppCompatActivity
    {
    }
}
】

Platforms/Android/MainApplication.cs:
【﻿using Android.App;
using Android.Runtime;

namespace GamerLinkApp
{
    [Application]
    public class MainApplication : MauiApplication
    {
        public MainApplication(IntPtr handle, JniHandleOwnership ownership)
            : base(handle, ownership)
        {
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
】

Platforms/Android/Resources/values/colors.xml:
【<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#512BD4</color>
    <color name="colorPrimaryDark">#2B0B98</color>
    <color name="colorAccent">#2B0B98</color>
</resources>】

Platforms/Android/Resources/values/styles.xml:
【<?xml version="1.0" encoding="utf-8" ?>
<resources>
	<!-- 定义基础主题，确保其父主题是 MaterialComponents 的子主题 -->
	<style name="MainTheme.Base" parent="Theme.MaterialComponents.DayNight.NoActionBar">
		<!-- 应用的主要颜色 -->
		<item name="colorPrimary">@color/colorPrimary</item>
		<item name="colorPrimaryDark">@color/colorPrimaryDark</item>
		<item name="colorAccent">@color/colorAccent</item>

		<!-- 确保窗口没有标题栏，因为 MAUI 会自己处理 -->
		<item name="android:windowNoTitle">true</item>
		<!-- 对于某些版本，可能还需要这个来移除窗口边框 -->
		<item name="windowActionBar">false</item>

		<!-- 如果需要，还可以添加其他窗口相关的设置 -->
		<item name="android:windowBackground">@android:color/white</item>
	</style>

	<!-- 定义应用实际使用的主题，它继承自我们定义的基础主题 -->
	<style name="Maui.MainTheme" parent="MainTheme.Base" />

</resources>】

Platforms/iOS/Program.cs:
【﻿using ObjCRuntime;
using UIKit;

namespace GamerLinkApp
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
】

Platforms/MacCatalyst/Program.cs:
【﻿using ObjCRuntime;
using UIKit;

namespace GamerLinkApp
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
】

Resources/Raw/seed_data.json:
【{
  "Services": [
    {
      "Id": 1,
      "Title": "王者荣耀-巅峰陪练团",
      "Description": "顶尖荣耀教练，全赛季陪练指点操作与意识，助你稳步上分。",
      "GameName": "王者荣耀",
      "Price": 58,
      "ServiceType": "陪练",
      "Category": "MOBA",
      "SellerId": 1,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": true,
      "AverageRating": 4.9,
      "ReviewCount": 1280,
      "PurchaseCount": 1547,
      "CompletedCount": 120,
      "Tags": ["打野上分", "意识训练", "赛后复盘"]
    },
    {
      "Id": 2,
      "Title": "英雄联盟-大师晋级导师",
      "Description": "前职业选手一对一定制上分方案，单双排/灵活全段位安全托管。",
      "GameName": "英雄联盟",
      "Price": 318,
      "ServiceType": "代练",
      "Category": "MOBA",
      "SellerId": 2,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": true,
      "AverageRating": 4.8,
      "ReviewCount": 980,
      "PurchaseCount": 2300,
      "CompletedCount": 45,
      "Tags": ["国服钻石", "全位置", "职业教练"]
    },
    {
      "Id": 3,
      "Title": "绝地求生-战术指挥官",
      "Description": "提供战术拆解、枪法训练与团队指挥复盘，让你每局都能精准吃鸡。",
      "GameName": "绝地求生",
      "Price": 126,
      "ServiceType": "教学",
      "Category": "射击",
      "SellerId": 3,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": false,
      "AverageRating": 4.7,
      "ReviewCount": 560,
      "PurchaseCount": 860,
      "CompletedCount": 72,
      "Tags": ["战术分析", "枪法提升", "团队配合"]
    },
    {
      "Id": 4,
      "Title": "CS:GO 高手陪练",
      "Description": "职业枪法指导，带你练习压枪与道具运用。",
      "GameName": "CS:GO",
      "Price": 99,
      "ServiceType": "陪练",
      "Category": "射击",
      "SellerId": 4,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": ["banner1.png"],
      "IsFeatured": true,
      "AverageRating": 4.6,
      "ReviewCount": 340,
      "PurchaseCount": 620,
      "CompletedCount": 500,
      "Tags": ["压枪训练", "团队战术"]
    }
  ],
  "Users": [
    {
      "Id": 1,
      "Username": "iharty",
      "Email": "iharty@example.com",
      "Nickname": "Irving",
      "AvatarUrl": "banner1.png"
    },
    {
      "Id": 2,
      "Username": "proplayer",
      "Email": "pro@example.com",
      "Nickname": "职业选手",
      "AvatarUrl": "banner2.png"
    }
  ],
  "Orders": [
    {
      "Id": 1,
      "ServiceId": 1,
      "BuyerId": 1,
      "OrderDate": "2023-10-01T10:00:00Z",
      "PaymentDate": "2023-10-01T11:00:00Z",
      "CompletionDate": "2023-10-02T10:00:00Z",
      "TotalPrice": 58,
      "Status": "Completed"
    },
    {
      "Id": 2,
      "ServiceId": 2,
      "BuyerId": 1,
      "OrderDate": "2023-11-01T10:00:00Z",
      "PaymentDate": "2023-11-01T12:00:00Z",
      "TotalPrice": 318,
      "Status": "PendingReview"
    },
    {
      "Id": 3,
      "ServiceId": 3,
      "BuyerId": 1,
      "OrderDate": "2023-12-01T10:00:00Z",
      "PaymentDate": "2023-12-01T11:00:00Z",
      "TotalPrice": 126,
      "Status": "Ongoing"
    },
    {
      "Id": 4,
      "ServiceId": 4,
      "BuyerId": 2,
      "OrderDate": "2024-01-01T10:00:00Z",
      "TotalPrice": 99,
      "Status": "PendingPayment"
    }
  ],
  "Categories": [
    { "Id": 1, "Name": "MOBA", "IconUrl": "banner1.png" },
    { "Id": 2, "Name": "射击", "IconUrl": "banner2.png" },
    { "Id": 3, "Name": "RPG", "IconUrl": "banner3.png" }
  ],
  "Banners": [
    { "Id": 1, "ImageUrl": "banner1.png", "TargetUrl": "/ServiceDetail/1" },
    { "Id": 2, "ImageUrl": "banner2.png", "TargetUrl": "/ServiceDetail/2" },
    { "Id": 3, "ImageUrl": "banner3.png", "TargetUrl": "/ServiceDetail/3" }
  ]
}
】

Services/IDataService.cs:
【﻿using GamerLinkApp.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace GamerLinkApp.Services
{
    public interface IDataService
    {
        Task<List<Service>> GetServicesAsync();
        Task<Service?> GetServiceByIdAsync(int id);
        Task<List<Category>> GetCategoriesAsync();
        Task<List<Service>> GetServicesByCategoryAsync(Category category);
        Task<User?> GetUserAsync(int id);
        Task<List<Order>> GetOrdersByUserAsync(int userId);
    }
}
】

Services/SqliteDataService.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using GamerLinkApp.Data;
using GamerLinkApp.Models;
using Microsoft.EntityFrameworkCore;

namespace GamerLinkApp.Services
{
    public class SqliteDataService : IDataService
    {
        private readonly IDbContextFactory<ServiceDbContext> _contextFactory;
        private readonly SemaphoreSlim _initializationLock = new(1, 1);
        private bool _initialized;

        public SqliteDataService(IDbContextFactory<ServiceDbContext> contextFactory)
        {
            _contextFactory = contextFactory;
        }

        public async Task<List<Service>> GetServicesAsync()
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var services = await context.Services.AsNoTracking().ToListAsync();

            foreach (var service in services)
            {
                service.ImageUrls ??= new List<string>();
                service.Tags ??= new List<string>();
            }

            return services;
        }

        public async Task<Service?> GetServiceByIdAsync(int id)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var service = await context.Services.AsNoTracking().FirstOrDefaultAsync(s => s.Id == id);
            if (service is not null)
            {
                service.ImageUrls ??= new List<string>();
                service.Tags ??= new List<string>();
            }

            return service;
        }

        public async Task<List<Category>> GetCategoriesAsync()
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Categories
                .AsNoTracking()
                .Distinct()
                .OrderBy(Name => Name)
                .ToListAsync();
        }


        public async Task<User?> GetUserAsync(int id)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == id);
        }

        public async Task<List<Order>> GetOrdersByUserAsync(int userId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Orders
                .AsNoTracking()
                .Where(o => o.BuyerId == userId)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();
        }

        private async Task EnsureInitializedAsync()
        {
            if (_initialized)
            {
                return;
            }

            await _initializationLock.WaitAsync();
            try
            {
                if (_initialized)
                {
                    return;
                }

                await using var context = await _contextFactory.CreateDbContextAsync();
                await context.Database.EnsureCreatedAsync();
                await SeedDataAsync(context);
                _initialized = true;
            }
            finally
            {
                _initializationLock.Release();
            }
        }

        private static async Task SeedDataAsync(ServiceDbContext context)
        {
            // 如果已经有数据，就不再初始化
            if (await context.Services.AnyAsync() ||
                await context.Users.AnyAsync() ||
                await context.Orders.AnyAsync() ||
                await context.Categories.AnyAsync() ||
                await context.Banners.AnyAsync())
            {
                return;
            }

            try
            {
                // 读取 JSON 文件
                using var stream = await FileSystem.OpenAppPackageFileAsync("seed_data.json");
                using var reader = new StreamReader(stream);
                var json = await reader.ReadToEndAsync();

                // 反序列化
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
                var seedData = JsonSerializer.Deserialize<SeedData>(json, options);

                if (seedData != null)
                {
                    if (seedData.Services?.Any() == true)
                        await context.Services.AddRangeAsync(seedData.Services);

                    if (seedData.Users?.Any() == true)
                        await context.Users.AddRangeAsync(seedData.Users);

                    if (seedData.Orders?.Any() == true)
                        await context.Orders.AddRangeAsync(seedData.Orders);

                    if (seedData.Categories?.Any() == true)
                        await context.Categories.AddRangeAsync(seedData.Categories);

                    if (seedData.Banners?.Any() == true)
                        await context.Banners.AddRangeAsync(seedData.Banners);

                    await context.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"SeedData 初始化失败: {ex.Message}");
            }
        }

        public async Task<List<Service>> GetServicesByCategoryAsync(Category category)
        {
            await EnsureInitializedAsync();
            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Services.AsNoTracking().Where(s => s.Category == category.Name).ToListAsync();

        }

        public class SeedData
        {
            public List<Service> Services { get; set; } = new();
            public List<User> Users { get; set; } = new();
            public List<Order> Orders { get; set; } = new();
            public List<Category> Categories { get; set; } = new();
            public List<Banner> Banners { get; set; } = new();
        }

    }
}
】

ViewModels/BaseViewModel.cs:
【using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace GamerLinkApp.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}】

ViewModels/ProfileViewModel.cs:
【﻿using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ProfileViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        private User? _currentUser;
        public User? CurrentUser
        {
            get => _currentUser;
            private set
            {
                if (_currentUser == value)
                {
                    return;
                }

                _currentUser = value;
                OnPropertyChanged();
            }
        }

        private decimal _totalPaid;
        public decimal TotalPaid
        {
            get => _totalPaid;
            private set
            {
                if (_totalPaid == value)
                {
                    return;
                }

                _totalPaid = value;
                OnPropertyChanged();
            }
        }

        private int _completedOrders;
        public int CompletedOrders
        {
            get => _completedOrders;
            private set
            {
                if (_completedOrders == value)
                {
                    return;
                }

                _completedOrders = value;
                OnPropertyChanged();
            }
        }

        public ObservableCollection<OrderStatusItem> OrderStatuses { get; } = new();

        public ProfileViewModel(IDataService dataService)
        {
            _dataService = dataService;
            _ = LoadAsync();
        }

        private async Task LoadAsync()
        {
            try
            {
                var user = await _dataService.GetUserAsync(1);
                CurrentUser = user;

                if (user is null)
                {
                    return;
                }

                var orders = await _dataService.GetOrdersByUserAsync(user.Id);
                TotalPaid = orders.Where(o => o.PaymentDate.HasValue).Sum(o => o.TotalPrice);
                CompletedOrders = orders.Count(o => string.Equals(o.Status, nameof(OrderStatus.Completed), StringComparison.Ordinal));

                var summaries = new[]
                {
                    new OrderStatusItem(nameof(OrderStatus.PendingPayment), "\u5f85\u652f\u4ed8", "\u00a5"),
                    new OrderStatusItem(nameof(OrderStatus.Ongoing), "\u8fdb\u884c\u4e2d", "\u231b"),
                    new OrderStatusItem(nameof(OrderStatus.PendingReview), "\u5f85\u8bc4\u4ef7", "\u270d"),
                    new OrderStatusItem(nameof(OrderStatus.Completed), "\u5168\u90e8\u8ba2\u5355", "\U0001F5C2")
                };

                foreach (var summary in summaries)
                {
                    summary.Count = orders.Count(o => string.Equals(o.Status, summary.StatusKey, StringComparison.Ordinal));
                }

                OrderStatuses.Clear();
                foreach (var summary in summaries)
                {
                    OrderStatuses.Add(summary);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to load profile: {ex.Message}");
            }
        }

        public class OrderStatusItem
        {
            public OrderStatusItem(string statusKey, string displayName, string symbol)
            {
                StatusKey = statusKey;
                DisplayName = displayName;
                Symbol = symbol;
            }

            public string StatusKey { get; }
            public string DisplayName { get; }
            public string Symbol { get; }
            public int Count { get; set; }
        }
    }
}
】

ViewModels/ServiceDetailViewModel.cs:
【﻿using GamerLinkApp.Models;
using GamerLinkApp.Services;
using System;
using System.Threading.Tasks;

namespace GamerLinkApp.ViewModels
{
    public class ServiceDetailViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        private Service? _selectedService;
        public Service? SelectedService
        {
            get => _selectedService;
            set
            {
                if (_selectedService == value)
                    return;

                _selectedService = value;
                OnPropertyChanged();
            }
        }

        private int _serviceId;
        public int ServiceId
        {
            get => _serviceId;
            set
            {
                if (_serviceId == value)
                    return;

                _serviceId = value;
                OnPropertyChanged();
                _ = LoadServiceAsync(value);
            }
        }

        public ServiceDetailViewModel(IDataService dataService)
        {
            _dataService = dataService;
        }

        private async Task LoadServiceAsync(int id)
        {
            if (id <= 0)
            {
                SelectedService = null;
                return;
            }

            try
            {
                SelectedService = await _dataService.GetServiceByIdAsync(id);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load service detail: {ex.Message}");
            }
        }
    }
}


】

ViewModels/ServiceListViewModel.cs:
【﻿using GamerLinkApp.Models;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ServiceListViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        public ObservableCollection<Service> Services { get; } = new();

        public ServiceListViewModel(IDataService dataService)
        {
            _dataService = dataService;
            _ = LoadServicesAsync(); // 异步加载，不阻塞UI
        }

        private async Task LoadServicesAsync()
        {
            try
            {
                var services = await _dataService.GetServicesAsync();
                Services.Clear();
                foreach (var service in services)
                {
                    Services.Add(service);
                }
            }
            catch (Exception ex)
            {
                // TODO: 可以加日志或者 UI 提示
                System.Diagnostics.Debug.WriteLine($"加载服务失败: {ex.Message}");
            }
        }
    }
}
】

ViewModels/ZoneViewModel.cs:
【﻿using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ZoneViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        public ObservableCollection<Category> Categories { get; } = new();
        public ObservableCollection<Service> Services { get; } = new();

        private Category? _selectedCategory;
        public Category? SelectedCategory
        {
            get => _selectedCategory;
            set
            {
                if (_selectedCategory == value)
                {
                    return;
                }

                _selectedCategory = value;
                OnPropertyChanged();
                _ = LoadServicesForCategoryAsync(value);
            }
        }

        private Service? _highlightedService;
        public Service? HighlightedService
        {
            get => _highlightedService;
            private set
            {
                if (_highlightedService == value)
                {
                    return;
                }

                _highlightedService = value;
                OnPropertyChanged();
            }
        }

        public ZoneViewModel(IDataService dataService)
        {
            _dataService = dataService;
            _ = InitializeAsync();
        }

        private async Task InitializeAsync()
        {
            try
            {
                var categories = await _dataService.GetCategoriesAsync();
                Categories.Clear();
                foreach (var ca in categories)
                {
                    Categories.Add(ca);
                }

                if (Categories.Count > 0)
                {
                    SelectedCategory = Categories[0];
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to load zone games: {ex.Message}");
            }
        }

        private async Task LoadServicesForCategoryAsync(Category? cate)
        {
            if (cate==null)
            {
                Services.Clear();
                HighlightedService = null;
                return;
            }

            try
            {
                var services = await _dataService.GetServicesByCategoryAsync(cate);
                Services.Clear();
                foreach (var service in services)
                {
                    Services.Add(service);
                }

                if (services.Any())
                {
                    HighlightedService = services.FirstOrDefault();
                }
                else
                {
                    HighlightedService = null;
                }

            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to load services for {cate.Name}: {ex.Message}");
            }
        }
    }
}
】

Views/ProfilePage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.ProfilePage"
             x:DataType="vm:ProfileViewModel"
             Title="个人"
             BackgroundColor="#F4F5F7">
    <Grid RowDefinitions="Auto,*">
        <ScrollView Grid.Row="1"
                    Padding="0,12,0,24">
            <VerticalStackLayout Spacing="18"
                                  Padding="20,0,20,0">
                <Border Padding="24,32"
                        StrokeThickness="0"
                        BackgroundColor="Transparent">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                            <GradientStop Color="#E9F0FF" Offset="0" />
                            <GradientStop Color="#FFE9F3" Offset="1" />
                        </LinearGradientBrush>
                    </Border.Background>
                    <VerticalStackLayout Spacing="14"
                                          HorizontalOptions="Center"
                                          VerticalOptions="Center">
                        <Border WidthRequest="96"
                                HeightRequest="96"
                                StrokeThickness="0"
                                BackgroundColor="#1A1A1A"
                                HorizontalOptions="Center"
                                VerticalOptions="Center">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="48" />
                            </Border.StrokeShape>
                            <Image Source="{Binding CurrentUser.AvatarUrl}"
                                   Aspect="AspectFill" />
                        </Border>
                        <Label Text="{Binding CurrentUser.Nickname}"
                               FontSize="19"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A"
                               HorizontalOptions="Center" />
                        <Label Text="{Binding CurrentUser.Username, StringFormat='ID: {0}'}"
                               FontSize="14"
                               TextColor="#666666"
                               HorizontalOptions="Center" />
                        <Label Text="{Binding TotalPaid, StringFormat='累计消费 ￥{0:F0}'}"
                               FontSize="13"
                               TextColor="#80869A"
                               HorizontalOptions="Center" />
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="20" />
                    </Border.StrokeShape>
                    <Border.Shadow>
                        <Shadow Brush="#14000000"
                                Offset="0,6"
                                Radius="12" />
                    </Border.Shadow>
                    <VerticalStackLayout Spacing="20">
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="订单"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="全部"
                                   Grid.Column="1"
                                   FontSize="14"
                                   TextColor="#00AEEF" />
                        </Grid>

                        <CollectionView ItemsSource="{Binding OrderStatuses}"
                                        SelectionMode="None">
                            <CollectionView.ItemsLayout>
                                <GridItemsLayout Orientation="Vertical"
                                                 Span="4"
                                                 HorizontalItemSpacing="18" />
                            </CollectionView.ItemsLayout>
                            <CollectionView.ItemTemplate>
                                <DataTemplate x:DataType="vm:ProfileViewModel+OrderStatusItem">
                                    <VerticalStackLayout Spacing="8"
                                                          HorizontalOptions="Center"
                                                          VerticalOptions="Center">
                                        <Border WidthRequest="52"
                                                HeightRequest="52"
                                                StrokeThickness="0"
                                                BackgroundColor="#F5F7FA">
                                            <Border.StrokeShape>
                                                <RoundRectangle CornerRadius="26" />
                                            </Border.StrokeShape>
                                            <Label Text="{Binding Symbol}"
                                                   FontSize="20"
                                                   TextColor="#1A1A1A"
                                                   HorizontalOptions="Center"
                                                   VerticalOptions="Center"
                                                   HorizontalTextAlignment="Center" />
                                        </Border>
                                        <Label Text="{Binding DisplayName}"
                                               FontSize="13"
                                               TextColor="#444444"
                                               HorizontalOptions="Center"
                                               HorizontalTextAlignment="Center" />
                                        <Label Text="{Binding Count, StringFormat='({0})'}"
                                               FontSize="12"
                                               TextColor="#80869A"
                                               HorizontalOptions="Center" />
                                    </VerticalStackLayout>
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="20" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="12">
                        <Grid ColumnDefinitions="*,Auto">
                            <Label Text="已完成服务"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text="{Binding CompletedOrders, StringFormat='{0} 个'}"
                                   Grid.Column="1"
                                   FontSize="15"
                                   FontAttributes="Bold"
                                   TextColor="#5B61FF" />
                        </Grid>
                    </VerticalStackLayout>
                </Border>

                <VerticalStackLayout Spacing="12">
                    <Border BackgroundColor="White"
                            Padding="16"
                            StrokeThickness="0">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="16" />
                        </Border.StrokeShape>
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="关于我们"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text=">"
                                   Grid.Column="1"
                                   FontSize="16"
                                   TextColor="#C0C0C0" />
                        </Grid>
                    </Border>

                    <Border BackgroundColor="White"
                            Padding="16"
                            StrokeThickness="0">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="16" />
                        </Border.StrokeShape>
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="设置"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text=">"
                                   Grid.Column="1"
                                   FontSize="16"
                                   TextColor="#C0C0C0" />
                        </Grid>
                    </Border>
                </VerticalStackLayout>
            </VerticalStackLayout>
        </ScrollView>
    </Grid>
</ContentPage>

】

Views/ProfilePage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ProfilePage : ContentPage
{
    public ProfilePage(ProfileViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
    public ProfilePage()
    {
        InitializeComponent();
    }
}】

Views/ServiceDetailPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.ServiceDetailPage"
             x:DataType="vm:ServiceDetailViewModel"
             Title="服务详情"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="Auto,*,Auto">
        <ScrollView Grid.Row="1"
                    Padding="0,12,0,0">
            <VerticalStackLayout Spacing="18"
                                  Padding="20,0,20,120">
                <Border HeightRequest="220"
                        StrokeThickness="0"
                        BackgroundColor="#D9D9D9">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="26" />
                    </Border.StrokeShape>
                    <Grid>
                        <Image Source="{Binding SelectedService.ThumbnailUrl}"
                               Aspect="AspectFill" />
                        <Grid>
                            <Grid.Background>
                                <LinearGradientBrush StartPoint="0,0.4" EndPoint="0,1">
                                    <GradientStop Color="#00000000" Offset="0" />
                                    <GradientStop Color="#A6000000" Offset="1" />
                                </LinearGradientBrush>
                            </Grid.Background>
                        </Grid>
                        <VerticalStackLayout Spacing="6"
                                              Padding="20,20,20,24"
                                              VerticalOptions="End">
                            <Label Text="{Binding SelectedService.GameName}"
                                   FontSize="14"
                                   TextColor="#F2F5FF"
                                   Opacity="0.9" />
                            <Label Text="{Binding SelectedService.Title}"
                                   FontSize="22"
                                   FontAttributes="Bold"
                                   TextColor="White"
                                   LineBreakMode="TailTruncation" />
                            <Label Text="{Binding SelectedService.ServiceType, StringFormat='服务类型: {0}'}"
                                   FontSize="13"
                                   TextColor="#F2F5FF"
                                   Opacity="0.9" />
                        </VerticalStackLayout>
                    </Grid>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="16">
                        <HorizontalStackLayout Spacing="12"
                                                VerticalOptions="Center">
                            <Label Text="服务亮点"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Border BackgroundColor="#EEF0FF"
                                    Padding="10,4"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="12" />
                                </Border.StrokeShape>
                                <Border.Triggers>
                                    <DataTrigger TargetType="Border"
                                                 Binding="{Binding SelectedService.Category}"
                                                 Value="">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                    <DataTrigger TargetType="Border"
                                                 Binding="{Binding SelectedService.Category}"
                                                 Value="{x:Null}">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                </Border.Triggers>
                                <Label Text="{Binding SelectedService.Category}"
                                       FontSize="13"
                                       TextColor="#5B61FF"
                                       FontAttributes="Bold" />
                            </Border>
                        </HorizontalStackLayout>

                        <FlexLayout BindableLayout.ItemsSource="{Binding SelectedService.Tags}"
                                   Wrap="Wrap"
                                   AlignItems="Center"
                                   AlignContent="Start"
                                   JustifyContent="Start"
                                   Margin="0,4,0,0">
                            <BindableLayout.ItemTemplate>
                                <DataTemplate x:DataType="x:String">
                                    <Border BackgroundColor="#F3F4FF"
                                            Margin="0,0,8,8"
                                            Padding="10,6"
                                            StrokeThickness="0">
                                        <Border.StrokeShape>
                                            <RoundRectangle CornerRadius="14" />
                                        </Border.StrokeShape>
                                        <Label Text="{Binding .}"
                                               FontSize="13"
                                               TextColor="#5B61FF" />
                                    </Border>
                                </DataTemplate>
                            </BindableLayout.ItemTemplate>
                        </FlexLayout>

                        <Grid ColumnDefinitions="*,*"
                              ColumnSpacing="12">
                            <Border BackgroundColor="#F9FAFC"
                                    Padding="16"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="18" />
                                </Border.StrokeShape>
                                <VerticalStackLayout Spacing="6">
                                    <Label Text="评分"
                                           FontSize="13"
                                           TextColor="#727C8C" />
                                    <Label Text="{Binding SelectedService.AverageRating, StringFormat='{0:F1}'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F" />
                                    <Label Text="{Binding SelectedService.ReviewCount, StringFormat='{0}条评价'}"
                                           FontSize="12"
                                           TextColor="#9AA0AE" />
                                </VerticalStackLayout>
                            </Border>

                            <Border Grid.Column="1"
                                    BackgroundColor="#F9FAFC"
                                    Padding="16"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="18" />
                                </Border.StrokeShape>
                                <VerticalStackLayout Spacing="6">
                                    <Label Text="成交"
                                           FontSize="13"
                                           TextColor="#727C8C" />
                                    <Label Text="{Binding SelectedService.PurchaseCount, StringFormat='{0}人购买'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F" />
                                    <Label Text="{Binding SelectedService.CompletedCount, StringFormat='已完成{0}单'}"
                                           FontSize="12"
                                           TextColor="#9AA0AE" />
                                </VerticalStackLayout>
                            </Border>
                        </Grid>
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="12">
                        <Label Text="服务介绍"
                               FontSize="16"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <Label Text="{Binding SelectedService.Description}"
                               FontSize="14"
                               TextColor="#434A59"
                               LineHeight="1.4" />
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

        <Grid Grid.Row="2"
              BackgroundColor="White"
              Padding="20,12,20,24"
              ColumnDefinitions="*,Auto">
            <VerticalStackLayout Spacing="4"
                                  VerticalOptions="Center">
                <Label Text="当前价格"
                       FontSize="12"
                       TextColor="#7B8596" />
                <Label Text="{Binding SelectedService.Price, StringFormat='￥{0:F0}'}"
                       FontSize="22"
                       FontAttributes="Bold"
                       TextColor="#FF4D4F" />
            </VerticalStackLayout>
            <Button Grid.Column="1"
                    Text="立即下单"
                    HeightRequest="48"
                    WidthRequest="160"
                    CornerRadius="24"
                    BackgroundColor="#5B61FF"
                    TextColor="White"
                    FontAttributes="Bold" />
        </Grid>
    </Grid>
</ContentPage>
】

Views/ServiceDetailPage.xaml.cs:
【﻿using GamerLinkApp.Helpers;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(ServiceId), "id")]
public partial class ServiceDetailPage : ContentPage
{
    private readonly ServiceDetailViewModel _viewModel;

    public ServiceDetailPage()
        : this(ServiceHelper.GetRequiredService<ServiceDetailViewModel>())
    {
    }

    public ServiceDetailPage(ServiceDetailViewModel vm)
    {
        InitializeComponent();
        _viewModel = vm;
        BindingContext = _viewModel;
    }

    public string? ServiceId
    {
        set
        {
            if (int.TryParse(value, out var id))
            {
                _viewModel.ServiceId = id;
            }
        }
    }
}
】

Views/ServiceListPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:models="clr-namespace:GamerLinkApp.Models"
             x:Class="GamerLinkApp.Views.ServiceListPage"
             Title="服务列表"
             BackgroundColor="#F5F6F9">
    <ContentPage.Resources>
        <Thickness x:Key="PagePadding">20,16,20,0</Thickness>
    </ContentPage.Resources>

    <CollectionView ItemsSource="{Binding Services}"
                    SelectionMode="None"
                    BackgroundColor="Transparent"
                    ItemSizingStrategy="MeasureAllItems">
        <CollectionView.ItemsLayout>
            <LinearItemsLayout Orientation="Vertical"
                               ItemSpacing="0" />
        </CollectionView.ItemsLayout>

        <CollectionView.Header>
            <VerticalStackLayout Spacing="24"
                                  Padding="{StaticResource PagePadding}">
                <Frame Padding="14,12"
                       CornerRadius="24"
                       BackgroundColor="White"
                       HasShadow="False"
                       BorderColor="#EEEEEE">
                    <HorizontalStackLayout Spacing="12"
                                            HorizontalOptions="FillAndExpand"
                                            VerticalOptions="Center">
                        <Image HeightRequest="20"
                               WidthRequest="20"
                               VerticalOptions="Center"
                               Source="https://img.icons8.com/ios-glyphs/30/9AA0B1/search--v1.png" />
                        <Entry Placeholder="搜索服务或者向导"
                               PlaceholderColor="#9AA0B1"
                               TextColor="#2A2F3C"
                               FontSize="14"
                               VerticalOptions="Center"
                               HorizontalOptions="FillAndExpand"
                               BackgroundColor="Transparent"
                               Margin="0"
                               IsTextPredictionEnabled="False"
                               ReturnType="Search" />
                    </HorizontalStackLayout>
                </Frame>

                <VerticalStackLayout Spacing="8">
                    <CarouselView HeightRequest="165"
                                  Loop="True"
                                  IsBounceEnabled="False"
                                  IndicatorView="{x:Reference BannerIndicators}">
                        <CarouselView.ItemsSource>
                            <x:Array Type="{x:Type x:String}">
                                <x:String>banner1.png</x:String>
                                <x:String>banner2.png</x:String>
                                <x:String>banner3.png</x:String>
                            </x:Array>
                        </CarouselView.ItemsSource>
                        <CarouselView.ItemTemplate>
                            <DataTemplate>
                                <Frame Padding="0"
                                       HasShadow="False"
                                       CornerRadius="18">
                                    <Image Source="{Binding .}"
                                           Aspect="AspectFill" />
                                </Frame>
                            </DataTemplate>
                        </CarouselView.ItemTemplate>
                    </CarouselView>
                    <IndicatorView x:Name="BannerIndicators"
                                   HorizontalOptions="Center"
                                   IndicatorColor="#D9D9D9"
                                   SelectedIndicatorColor="#5B61FF" />
                </VerticalStackLayout>

                <Grid ColumnDefinitions="*,*,*"
                      ColumnSpacing="14">
                    <Border BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/sword.png" />
                            <Label Text="英雄联盟"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="1"
                            BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/crown.png" />
                            <Label Text="王者荣耀"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="2"
                            BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/medal.png" />
                            <Label Text="绝地求生"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>
                </Grid>

                <Label Text="精选推荐"
                       FontSize="18"
                       FontAttributes="Bold"
                       TextColor="#2A2F3C" />
            </VerticalStackLayout>
        </CollectionView.Header>

        <CollectionView.ItemTemplate>
            <DataTemplate x:DataType="models:Service">
                <Frame Margin="20,0,20,16"
                       Padding="12"
                       BackgroundColor="White"
                       CornerRadius="18"
                       HasShadow="False"
                       BorderColor="#EEEEEE">
                    <Frame.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnServiceTapped" />
                    </Frame.GestureRecognizers>
                    <Grid ColumnDefinitions="Auto,*"
                          ColumnSpacing="14">
                        <Border Grid.Column="0"
                                WidthRequest="110"
                                HeightRequest="88"
                                StrokeShape="RoundRectangle 16"
                                VerticalOptions="Center">
                            <Image Source="{Binding ThumbnailUrl}"
                                   Aspect="AspectFill" />
                        </Border>

                        <VerticalStackLayout Grid.Column="1"
                                              Spacing="6"
                                              VerticalOptions="Center">
                            <Label Text="{Binding Title}"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#2A2F3C"
                                   LineBreakMode="TailTruncation" />
                            <Label Text="{Binding GameName}"
                                   FontSize="13"
                                   TextColor="#777D8C"
                                   LineBreakMode="TailTruncation" />
                            <HorizontalStackLayout Spacing="10">
                                <Label Text="{Binding PurchaseCount, StringFormat='{0}人购买'}"
                                       FontSize="12"
                                       TextColor="#9AA0B1" />
                                <Label Text="{Binding CompletedCount, StringFormat='完成{0}'}"
                                       FontSize="12"
                                       TextColor="#9AA0B1" />
                            </HorizontalStackLayout>
                            <Label Text="{Binding Price, StringFormat='￥{0:F0}'}"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#FF4D4F" />
                        </VerticalStackLayout>
                    </Grid>
                </Frame>
            </DataTemplate>
        </CollectionView.ItemTemplate>
    </CollectionView>
</ContentPage>
】

Views/ServiceListPage.xaml.cs:
【using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;
using System.Collections.Generic;

namespace GamerLinkApp.Views;

public partial class ServiceListPage : ContentPage
{
    public ServiceListPage(ServiceListViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm; // ͨ������ע��� ViewModel
    }

    // �޲����Ĺ��캯�����Ա������Ա�XAMLԤ������������
    public ServiceListPage()
    {
        InitializeComponent();
    }

    // ����: ����������Ŀѡ���¼�
    private async void OnServiceTapped(object sender, TappedEventArgs e)
    {
        if ((sender as Element)?.BindingContext is not Service tappedService)
            return;

        await Shell.Current.GoToAsync($"{nameof(ServiceDetailPage)}?id={tappedService.Id}");
    }
}
】

Views/ZonePage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.ZonePage"
             x:DataType="vm:ZoneViewModel"
             xmlns:model="clr-namespace:GamerLinkApp.Models"
             Title="Game Zone"
             BackgroundColor="#FFFFFF">
    <Grid ColumnDefinitions="140,*">
        <Border Grid.Column="0"
                Padding="0,24,0,0"
                BackgroundColor="#F5F6F8"
                StrokeThickness="0">
            <CollectionView ItemsSource="{Binding Categories}"
                            SelectionMode="Single"
                            SelectedItem="{Binding SelectedCategory, Mode=TwoWay}"
                            Margin="0"
                            BackgroundColor="Transparent">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical"
                                       ItemSpacing="0"/>
                </CollectionView.ItemsLayout>
                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="x:String">
                        <Grid ColumnDefinitions="6,*"
                              Padding="0,14"
                              BackgroundColor="Transparent">
                            <BoxView x:Name="SelectionIndicator"
                                     WidthRequest="6"
                                     BackgroundColor="Transparent"
                                     HorizontalOptions="Fill"
                                     VerticalOptions="Fill"/>
                            <Label x:Name="CategoryLabel"
                                   Grid.Column="1"
                                   Text="{Binding Name}"
                                   FontSize="16"
                                   TextColor="#5F6473"
                                   VerticalOptions="Center"
                                   Padding="18,0"
                                   LineBreakMode="TailTruncation"/>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="SelectionStates">
                                    <VisualState Name="Normal">
                                        <VisualState.Setters>
                                            <Setter TargetName="SelectionIndicator"
                                                    Property="BoxView.BackgroundColor"
                                                    Value="Transparent"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.TextColor"
                                                    Value="#5F6473"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.FontAttributes"
                                                    Value="None"/>
                                            <Setter Property="BackgroundColor"
                                                    Value="Transparent"/>
                                        </VisualState.Setters>
                                    </VisualState>
                                    <VisualState Name="Selected">
                                        <VisualState.Setters>
                                            <Setter TargetName="SelectionIndicator"
                                                    Property="BoxView.BackgroundColor"
                                                    Value="#3478F6"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.TextColor"
                                                    Value="#3478F6"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.FontAttributes"
                                                    Value="Bold"/>
                                            <Setter Property="BackgroundColor"
                                                    Value="#EAF1FF"/>
                                        </VisualState.Setters>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
        </Border>

        <VerticalStackLayout Grid.Column="1"
                             Padding="32,24"
                             Spacing="24"
                             BackgroundColor="#FFFFFF">
            <Label Text="{Binding SelectedGame, FallbackValue='Game Zone'}"
                   FontSize="22"
                   FontAttributes="Bold"
                   TextColor="#1F1F1F"/>

            <Label Text="No services available"
                   FontSize="14"
                   TextColor="#8E94A2"
                   HorizontalOptions="Center"
                   IsVisible="False">
                <Label.Triggers>
                    <DataTrigger TargetType="Label"
                                 Binding="{Binding HighlightedService}"
                                 Value="{x:Null}">
                        <Setter Property="IsVisible"
                                Value="True"/>
                    </DataTrigger>
                </Label.Triggers>
            </Label>
            <CollectionView ItemsSource="{Binding Services}"
                            SelectionMode="None"
                            Margin="0"
                            BackgroundColor="Transparent">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical"
                            ItemSpacing="12"/>
                </CollectionView.ItemsLayout>

                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="model:Service">
                        <Border Padding="16"
                                BackgroundColor="#FFFFFF"
                                StrokeThickness="1"
                                Stroke="#E5E7EB"
                                Margin="0,0,0,12">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="16"/>
                            </Border.StrokeShape>

                            <Grid ColumnDefinitions="Auto,*"
                                  ColumnSpacing="16">
                                <Border WidthRequest="84"
                                        HeightRequest="84"
                                        StrokeThickness="0"
                                        BackgroundColor="#F2F4F8">
                                    <Border.StrokeShape>
                                        <RoundRectangle CornerRadius="12"/>
                                    </Border.StrokeShape>
                                    <Image Source="{Binding ThumbnailUrl}"
                                            Aspect="AspectFill"/>
                                </Border>

                                <VerticalStackLayout Grid.Column="1"
                                                     Spacing="8"
                                                     VerticalOptions="Center">
                                    <Label Text="{Binding Title}"
                                           FontSize="16"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F"
                                           LineBreakMode="TailTruncation"/>
                                    <Label Text="{Binding PurchaseCount, StringFormat='Sold {0}'}"
                                           FontSize="12"
                                           TextColor="#8E94A2"/>
                                    <Label Text="{Binding Price, StringFormat='{0:C0}'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#E53935"/>
                                </VerticalStackLayout>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>


        </VerticalStackLayout>
    </Grid>
</ContentPage>
】

Views/ZonePage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ZonePage : ContentPage
{
	public ZonePage()
	{
		InitializeComponent();
	}
	// 修改构造函数以接收 ViewModel
	public ZonePage(ZoneViewModel vm)
	{
		InitializeComponent();
		BindingContext = vm; // 设置数据上下文
	}
}】

