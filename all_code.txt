App.xaml.cs:
【﻿namespace GamerLinkApp
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();
        }

        protected override Window CreateWindow(IActivationState? activationState)
        {
            return new Window(new AppShell());
        }
    }
}】

AppShell.xaml.cs:
【﻿namespace GamerLinkApp
{
    public partial class AppShell : Shell
    {
        public AppShell()
        {
            InitializeComponent();
        }
    }
}
】

GlobalXmlns.cs:
【[assembly: XmlnsDefinition("http://schemas.microsoft.com/dotnet/maui/global", "GamerLinkApp")]
[assembly: XmlnsDefinition("http://schemas.microsoft.com/dotnet/maui/global", "GamerLinkApp.Pages")]
】

MainPage.xaml.cs:
【﻿namespace GamerLinkApp
{
    public partial class MainPage : ContentPage
    {
        int count = 0;

        public MainPage()
        {
            InitializeComponent();
        }

        private void OnCounterClicked(object? sender, EventArgs e)
        {
            count++;

            if (count == 1)
                CounterBtn.Text = $"Clicked {count} time";
            else
                CounterBtn.Text = $"Clicked {count} times";

            SemanticScreenReader.Announce(CounterBtn.Text);
        }
    }
}
】

MauiProgram.cs:
【﻿using GamerLinkApp.Services;
using Microsoft.Extensions.Logging;
using GamerLinkApp.ViewModels;
using GamerLinkApp.Views;
namespace GamerLinkApp
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });

#if DEBUG
    		builder.Logging.AddDebug();
#endif
            // 注册服务
            builder.Services.AddSingleton<IDataService, MockDataService>();

            // 注册视图和视图模型
            builder.Services.AddSingleton<ServiceListPage>();
            builder.Services.AddSingleton<ServiceListViewModel>();

            // ... 注册其他页面和视图模型
            builder.Services.AddSingleton<ZonePage>();
            //builder.Services.AddSingleton<ZoneViewModel>();
            builder.Services.AddSingleton<ProfilePage>();
            builder.Services.AddSingleton<ProfileViewModel>();

            return builder.Build();
        }
    }
}
】

Models\Order.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class Order
    {
        public int Id { get; set; }
        public int ServiceId { get; set; }
        public int BuyerId { get; set; }
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } // 例如: "进行中", "已完成"
        // ... 其他订单属性
    }
}
】

Models\Service.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class Service
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string GameName { get; set; }
        public string ServiceType { get; set; } // 例如: "代练", "陪玩"
        public int SellerId { get; set; }
        // ... 其他服务属性
    }
}
】

Models\User.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        // ... 其他用户属性
    }
}
】

Services\IDataService.cs:
【﻿using GamerLinkApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Services
{
    public interface IDataService
    {
        Task<List<Service>> GetServicesAsync();
        // ... 其他数据操作方法
    }
}
】

Services\MockDataService.cs:
【﻿using GamerLinkApp.Models;
using GamerLinkApp.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace GamerLinkApp.Services
{
    public class MockDataService : IDataService
    {
        public async Task<List<Service>> GetServicesAsync()
        {
            // 模拟延迟
            await Task.Delay(1000);

            return new List<Service>
            {
                new Service { Id = 1, Title = "英雄联盟段位代练", GameName = "英雄联盟", Price = 100, ServiceType = "代练" },
                new Service { Id = 2, Title = "绝地求生大神陪玩", GameName = "绝地求生", Price = 50, ServiceType = "陪玩" },
                new Service { Id = 3, Title = "王者荣耀上分指导", GameName = "王者荣耀", Price = 80, ServiceType = "陪玩" }
            };
        }
    }
}】

ViewModels\BaseViewModel.cs:
【using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace GamerLinkApp.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}】

ViewModels\ProfileViewModel.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.ViewModels
{
    public class ProfileViewModel : BaseViewModel
    {
        public ProfileViewModel()
        {
            // ÔÚÕâÀï¿ÉÒÔ³õÊ¼»¯¸öÈËÒ³ÃæµÄÊý¾ÝºÍÃüÁî
        }
    }
}】

ViewModels\ServiceListViewModel.cs:
【﻿using GamerLinkApp.Models;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ServiceListViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        public ObservableCollection<Service> Services { get; } = new();

        public ServiceListViewModel(IDataService dataService)
        {
            _dataService = dataService;
            _ = LoadServicesAsync(); // 异步加载，不阻塞UI
        }

        private async Task LoadServicesAsync()
        {
            try
            {
                var services = await _dataService.GetServicesAsync();
                Services.Clear();
                foreach (var service in services)
                {
                    Services.Add(service);
                }
            }
            catch (Exception ex)
            {
                // TODO: 可以加日志或者 UI 提示
                System.Diagnostics.Debug.WriteLine($"加载服务失败: {ex.Message}");
            }
        }
    }
}
】

Views\ProfilePage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ProfilePage : ContentPage
{
    public ProfilePage(ProfileViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}】

Views\ServiceListPage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ServiceListPage : ContentPage
{
    public ServiceListPage(ServiceListViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm; // Í¨¹ýÒÀÀµ×¢Èë°ó¶¨ ViewModel
    }
}
】

Views\ZonePage.xaml.cs:
【namespace GamerLinkApp.Views;

public partial class ZonePage : ContentPage
{
	public ZonePage()
	{
		InitializeComponent();
	}
}】

