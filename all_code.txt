./AppShell.xaml:
【﻿<?xml version="1.0" encoding="UTF-8" ?>
<Shell
    x:Class="GamerLinkApp.AppShell"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:views="clr-namespace:GamerLinkApp.Views"
    Shell.FlyoutBehavior="Disabled"
    Title="GamerLinkApp"
    Shell.NavBarIsVisible="False">

    <!-- 定义底部标签栏 -->
    <TabBar>
        <!-- 第一个标签页: 商铺. 我们直接使用你已有的 ServiceListPage -->
        <ShellContent
            Title="商铺"
            ContentTemplate="{DataTemplate views:ServiceListPage}"
            Icon="tab_shop.png"
             />

        <!-- 第二个标签页: 专区. 我们将创建新的 ZonePage -->
        <ShellContent
            Title="专区"
            ContentTemplate="{DataTemplate views:ZonePage}"
            Icon="tab_zone.png"
            />

        <!-- 第三个标签页: 个人. 我们将创建新的 ProfilePage -->
        <ShellContent
            Title="个人"
            ContentTemplate="{DataTemplate views:ProfilePage}"
            Icon="tab_mine.png"
             />
    </TabBar>

</Shell>
】

./AppShell.xaml.cs:
【using GamerLinkApp.Views;

namespace GamerLinkApp
{
    public partial class AppShell : Shell
    {
        public AppShell()
        {
            InitializeComponent();
            Routing.RegisterRoute(nameof(ServiceDetailPage), typeof(ServiceDetailPage));
            Routing.RegisterRoute(nameof(OrderListPage), typeof(OrderListPage));
            Routing.RegisterRoute(nameof(OrderPaymentPage), typeof(OrderPaymentPage));
            Routing.RegisterRoute(nameof(OrderReviewPage), typeof(OrderReviewPage));
        }
    }
}
】

./MainPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="GamerLinkApp.MainPage">

    <ScrollView>
        <VerticalStackLayout
            Padding="30,0"
            Spacing="25">
            <Image
                Source="dotnet_bot.png"
                HeightRequest="185"
                Aspect="AspectFit"
                SemanticProperties.Description="dot net bot in a hovercraft number nine" />

            <Label
                Text="Hello, World!"
                Style="{StaticResource Headline}"
                SemanticProperties.HeadingLevel="Level1" />

            <Label
                Text="Welcome to &#10;.NET Multi-platform App UI"
                Style="{StaticResource SubHeadline}"
                SemanticProperties.HeadingLevel="Level2"
                SemanticProperties.Description="Welcome to dot net Multi platform App U I" />

            <Button
                x:Name="CounterBtn"
                Text="Click me" 
                SemanticProperties.Hint="Counts the number of times you click"
                Clicked="OnCounterClicked"
                HorizontalOptions="Fill" />
        </VerticalStackLayout>
    </ScrollView>

</ContentPage>
】

./MainPage.xaml.cs:
【﻿namespace GamerLinkApp
{
    public partial class MainPage : ContentPage
    {
        int count = 0;

        public MainPage()
        {
            InitializeComponent();
        }

        private void OnCounterClicked(object? sender, EventArgs e)
        {
            count++;

            if (count == 1)
                CounterBtn.Text = $"Clicked {count} time";
            else
                CounterBtn.Text = $"Clicked {count} times";

            SemanticScreenReader.Announce(CounterBtn.Text);
        }
    }
}
】

./MauiProgram.cs:
【using System.IO;
using GamerLinkApp.Data;
using GamerLinkApp.Helpers;
using GamerLinkApp.Services;
using GamerLinkApp.ViewModels;
using GamerLinkApp.Views;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Maui.Storage;

namespace GamerLinkApp
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });

#if DEBUG
            builder.Logging.AddDebug();
#endif

            var databasePath = Path.Combine(FileSystem.AppDataDirectory, "gamerlink.db");

#if DEBUG
            if (File.Exists(databasePath))
            {
                File.Delete(databasePath);
                Console.WriteLine($"Êý¾Ý¿âÒÑÉ¾³ý: {databasePath}");
            }
            else
            {
                Console.WriteLine("Êý¾Ý¿â²»´æÔÚ¡£");
            }
#endif

            builder.Services.AddDbContextFactory<ServiceDbContext>(options =>
                options.UseSqlite($"Data Source={databasePath}"));
            builder.Services.AddSingleton<IDataService, SqliteDataService>();

            builder.Services.AddSingleton<ServiceListPage>();
            builder.Services.AddSingleton<ServiceListViewModel>();

            builder.Services.AddSingleton<ZonePage>();
            builder.Services.AddSingleton<ZoneViewModel>();
            builder.Services.AddSingleton<ProfilePage>();
            builder.Services.AddSingleton<ProfileViewModel>();

            builder.Services.AddTransient<OrderListPage>();
            builder.Services.AddTransient<OrderListViewModel>();
            builder.Services.AddTransient<OrderPaymentPage>();
            builder.Services.AddTransient<OrderPaymentViewModel>();
            builder.Services.AddTransient<ServiceDetailPage>();
            builder.Services.AddTransient<ServiceDetailViewModel>();
            builder.Services.AddTransient<OrderReviewPage>();
            builder.Services.AddTransient<OrderReviewViewModel>();

            var app = builder.Build();
            ServiceHelper.Initialize(app.Services);

            return app;
        }
    }
}


】

Data/ServiceDbContext.cs:
【﻿using System;
using System.Collections.Generic;
using System.Text.Json;
using GamerLinkApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GamerLinkApp.Data
{
    public class ServiceDbContext : DbContext
    {
        private static readonly JsonSerializerOptions JsonOptions = new(JsonSerializerDefaults.Web)
        {
            WriteIndented = false
        };

        private static readonly ValueConverter<List<string>, string> ListConverter = new(
            list => JsonSerializer.Serialize(list ?? new List<string>(), JsonOptions),
            json => string.IsNullOrWhiteSpace(json)
                ? new List<string>()
                : JsonSerializer.Deserialize<List<string>>(json, JsonOptions) ?? new List<string>()
        );

        private static readonly ValueComparer<List<string>> ListComparer = new(
            (left, right) => AreListsEqual(left, right),
            list => GetListHashCode(list),
            list => CloneList(list)
        );

        public ServiceDbContext(DbContextOptions<ServiceDbContext> options)
            : base(options)
        {
        }

        public DbSet<Service> Services => Set<Service>();
        public DbSet<User> Users => Set<User>();
        public DbSet<Order> Orders => Set<Order>();
        public DbSet<Review> Reviews => Set<Review>();
        public DbSet<Banner> Banners => Set<Banner>();
        public DbSet<Category> Categories => Set<Category>();
        public DbSet<Favorite> Favorites => Set<Favorite>();

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            ConfigureService(modelBuilder);
        }

        private static void ConfigureService(ModelBuilder modelBuilder)
        {
            var entity = modelBuilder.Entity<Service>();

            entity.HasKey(s => s.Id);
            entity.Property(s => s.Title).IsRequired();
            entity.Property(s => s.Description).IsRequired(false);
            entity.Property(s => s.GameName).IsRequired(false);
            entity.Property(s => s.ServiceType).IsRequired(false);
            entity.Property(s => s.Category).IsRequired(false);
            entity.Property(s => s.ThumbnailUrl).IsRequired(false);

            entity.Property(s => s.ImageUrls)
                .HasConversion(ListConverter)
                .Metadata.SetValueComparer(ListComparer);

            entity.Property(s => s.Tags)
                .HasConversion(ListConverter)
                .Metadata.SetValueComparer(ListComparer);
        }

        private static bool AreListsEqual(List<string>? left, List<string>? right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (left is null || right is null)
            {
                return left is null && right is null;
            }

            if (left.Count != right.Count)
            {
                return false;
            }

            for (var i = 0; i < left.Count; i++)
            {
                if (!string.Equals(left[i], right[i], StringComparison.Ordinal))
                {
                    return false;
                }
            }

            return true;
        }

        private static int GetListHashCode(List<string>? list)
        {
            if (list is null || list.Count == 0)
            {
                return 0;
            }

            var hash = new HashCode();
            for (var i = 0; i < list.Count; i++)
            {
                hash.Add(list[i], StringComparer.Ordinal);
            }

            return hash.ToHashCode();
        }

        private static List<string> CloneList(List<string>? list)
        {
            return list is null ? new List<string>() : new List<string>(list);
        }
    }
}
】

Helpers/ServiceHelper.cs:
【﻿using System;
using Microsoft.Extensions.DependencyInjection;

namespace GamerLinkApp.Helpers;

public static class ServiceHelper
{
    private static IServiceProvider? _serviceProvider;

    public static void Initialize(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }

    public static T GetRequiredService<T>() where T : notnull
    {
        if (_serviceProvider is null)
        {
            throw new InvalidOperationException("Service provider is not initialized.");
        }

        return _serviceProvider.GetRequiredService<T>();
    }
}
】

Models/Banner.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Banner
    {
        public int Id { get; set; }
        public string ImageUrl { get; set; } // Banner图片地址
        public string TargetUrl { get; set; } // 点击Banner后跳转的地址 (例如某个服务的详情页)
    }
}
】

Models/Category.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } // 分类名称，如 "MOBA", "FPS", "RPG"
        public string IconUrl { get; set; } // 分类的图标URL (可选)
    }
}】

Models/Favorite.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Favorite
    {
        public int Id { get; set; }
        public int UserId { get; set; }     // 哪个用户收藏的
        public int ServiceId { get; set; }  // 收藏了哪个服务
    }
}】

Models/Order.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class Order
    {
        public int Id { get; set; }
        public int ServiceId { get; set; }
        public int BuyerId { get; set; }
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } // 例如: "进行中", "已完成"

        // 订单流程管理
        public DateTime? PaymentDate { get; set; } // 支付时间
        public DateTime? CompletionDate { get; set; } // 订单完成时间
        public DateTime? RefundRequestDate { get; set; } // 退款申请时间
        public decimal TotalPrice { get; set; } // 订单总价

        // 评论系统关联
        public int? ReviewId { get; set; } // 关联的评论ID，可以为空
    }

    // 建议为订单状态定义一个枚举
    public enum OrderStatus
    {
        PendingPayment, // 待支付
        Ongoing,        // 进行中
        PendingReview,  // 待评论
        Completed,      // 已完成
        RefundRequested,// 退款中
        Cancelled       // 已取消
    }
}
】

Models/Review.cs:
【﻿using System;

namespace GamerLinkApp.Models
{
    public class Review
    {
        public int Id { get; set; }
        public int ServiceId { get; set; } // 关联哪个服务
        public int OrderId { get; set; }   // 关联哪个订单
        public int UserId { get; set; }    // 哪个用户发表的
        public int Rating { get; set; }    // 评分 (例如 1-5 星)
        public string Comment { get; set; } // 评论内容
        public DateTime ReviewDate { get; set; } // 评论时间
    }
}】

Models/Service.cs:
【﻿using System.Collections.Generic;

namespace GamerLinkApp.Models
{
    public class Service
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string GameName { get; set; }
        public string ServiceType { get; set; } // 例如: "代练", "陪玩"
        public int SellerId { get; set; }

        public string ThumbnailUrl { get; set; } // 列表和推荐位缩略图
        public List<string> ImageUrls { get; set; } // 轮播图/详情图集合
        public string Category { get; set; } // 服务所属分类, 如 "MOBA", "FPS"
        public bool IsFeatured { get; set; } // 是否精选推荐
        public double AverageRating { get; set; } // 平均评分
        public int ReviewCount { get; set; } // 评价数量
        public int PurchaseCount { get; set; } // 累计购买人数
        public int CompletedCount { get; set; } // 已完成订单数

        public List<string> Tags { get; set; } // 服务标签, 如 "上分", "陪练"
    }
}
】

Models/ServiceReviewInfo.cs:
【using System;

namespace GamerLinkApp.Models
{
    /// <summary>
    /// 展示在服务详情页的评论信息（包含用户资料）
    /// </summary>
    public class ServiceReviewInfo
    {
        public int Id { get; set; }
        public int ServiceId { get; set; }
        public int OrderId { get; set; }
        public int Rating { get; set; }
        public string Comment { get; set; } = string.Empty;
        public DateTime ReviewDate { get; set; }

        public int UserId { get; set; }
        public string UserNickname { get; set; } = string.Empty;
        public string? UserAvatarUrl { get; set; }

        public string ReviewDateDisplay => ReviewDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm");

        public string UserInitial => string.IsNullOrWhiteSpace(UserNickname)
            ? "匿"
            : UserNickname.Substring(0, 1);
    }
}
】

Models/User.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }

        // 微信认证相关，暂时不用
        //public string WeChatOpenId { get; set; } // 用户的唯一标识
        //public string WeChatUnionId { get; set; } // 如果应用涉及多个公众号或小程序，会用到

        // 个人资料管理
        public string Nickname { get; set; } // 用户昵称
        public string AvatarUrl { get; set; } // 用户头像图片的URL

    }
}
】

Platforms/Android/AndroidManifest.xml:
【﻿<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
	<application android:allowBackup="true" android:icon="@mipmap/appicon" android:roundIcon="@mipmap/appicon_round" android:supportsRtl="true" android:theme="@style/Maui.MainTheme"></application>
	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
	<uses-permission android:name="android.permission.INTERNET" />
</manifest>】

Platforms/Android/MainActivity.cs:
【﻿using Android.App;
using Android.Content.PM;
using Android.OS;

namespace GamerLinkApp
{
    [Activity(Theme = "@style/Maui.SplashTheme", MainLauncher = true, LaunchMode = LaunchMode.SingleTop, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]
    public class MainActivity : MauiAppCompatActivity
    {
    }
}
】

Platforms/Android/MainApplication.cs:
【﻿using Android.App;
using Android.Runtime;

namespace GamerLinkApp
{
    [Application]
    public class MainApplication : MauiApplication
    {
        public MainApplication(IntPtr handle, JniHandleOwnership ownership)
            : base(handle, ownership)
        {
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
】

Platforms/Android/Resources/values/colors.xml:
【<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#512BD4</color>
    <color name="colorPrimaryDark">#2B0B98</color>
    <color name="colorAccent">#2B0B98</color>
</resources>】

Platforms/Android/Resources/values/styles.xml:
【<?xml version="1.0" encoding="utf-8" ?>
<resources>
	<!-- 定义基础主题，确保其父主题是 MaterialComponents 的子主题 -->
	<style name="MainTheme.Base" parent="Theme.MaterialComponents.DayNight.NoActionBar">
		<!-- 应用的主要颜色 -->
		<item name="colorPrimary">@color/colorPrimary</item>
		<item name="colorPrimaryDark">@color/colorPrimaryDark</item>
		<item name="colorAccent">@color/colorAccent</item>

		<!-- 确保窗口没有标题栏，因为 MAUI 会自己处理 -->
		<item name="android:windowNoTitle">true</item>
		<!-- 对于某些版本，可能还需要这个来移除窗口边框 -->
		<item name="windowActionBar">false</item>

		<!-- 如果需要，还可以添加其他窗口相关的设置 -->
		<item name="android:windowBackground">@android:color/white</item>
	</style>

	<!-- 定义应用实际使用的主题，它继承自我们定义的基础主题 -->
	<style name="Maui.MainTheme" parent="MainTheme.Base" />

</resources>】

Platforms/iOS/Program.cs:
【﻿using ObjCRuntime;
using UIKit;

namespace GamerLinkApp
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
】

Platforms/MacCatalyst/Program.cs:
【﻿using ObjCRuntime;
using UIKit;

namespace GamerLinkApp
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
】

Resources/Raw/seed_data.json:
【{
  "Services": [
    {
      "Id": 1,
      "Title": "王者荣耀-巅峰陪练团",
      "Description": "顶尖荣耀教练，全赛季陪练指点操作与意识，助你稳步上分。",
      "GameName": "王者荣耀",
      "Price": 58,
      "ServiceType": "陪练",
      "Category": "MOBA",
      "SellerId": 1,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": true,
      "AverageRating": 4.9,
      "ReviewCount": 1280,
      "PurchaseCount": 1547,
      "CompletedCount": 120,
      "Tags": [
        "打野上分",
        "意识训练",
        "赛后复盘"
      ]
    },
    {
      "Id": 2,
      "Title": "英雄联盟-大师晋级导师",
      "Description": "前职业选手一对一定制上分方案，单双排/灵活全段位安全托管。",
      "GameName": "英雄联盟",
      "Price": 318,
      "ServiceType": "代练",
      "Category": "MOBA",
      "SellerId": 2,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": true,
      "AverageRating": 4.8,
      "ReviewCount": 980,
      "PurchaseCount": 2300,
      "CompletedCount": 45,
      "Tags": [
        "国服钻石",
        "全位置",
        "职业教练"
      ]
    },
    {
      "Id": 3,
      "Title": "绝地求生-战术指挥官",
      "Description": "提供战术拆解、枪法训练与团队指挥复盘，让你每局都能精准吃鸡。",
      "GameName": "绝地求生",
      "Price": 126,
      "ServiceType": "教学",
      "Category": "射击",
      "SellerId": 3,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": false,
      "AverageRating": 4.7,
      "ReviewCount": 560,
      "PurchaseCount": 860,
      "CompletedCount": 72,
      "Tags": [
        "战术分析",
        "枪法提升",
        "团队配合"
      ]
    },
    {
      "Id": 4,
      "Title": "CS:GO 高手陪练",
      "Description": "职业枪法指导，带你练习压枪与道具运用。",
      "GameName": "CS:GO",
      "Price": 99,
      "ServiceType": "陪练",
      "Category": "射击",
      "SellerId": 4,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png"
      ],
      "IsFeatured": true,
      "AverageRating": 4.6,
      "ReviewCount": 340,
      "PurchaseCount": 620,
      "CompletedCount": 500,
      "Tags": [
        "压枪训练",
        "团队战术"
      ]
    }
  ],
  "Users": [
    {
      "Id": 1,
      "Username": "iharty",
      "Email": "iharty@example.com",
      "Nickname": "Irving",
      "AvatarUrl": "banner1.png"
    },
    {
      "Id": 2,
      "Username": "proplayer",
      "Email": "pro@example.com",
      "Nickname": "职业选手",
      "AvatarUrl": "banner2.png"
    }
  ],
  "Orders": [
    {
      "Id": 1,
      "ServiceId": 1,
      "BuyerId": 1,
      "OrderDate": "2023-10-01T10:00:00Z",
      "PaymentDate": "2023-10-01T11:00:00Z",
      "CompletionDate": "2023-10-02T10:00:00Z",
      "TotalPrice": 58,
      "Status": "Completed",
      "ReviewId": 1
    },
    {
      "Id": 2,
      "ServiceId": 2,
      "BuyerId": 1,
      "OrderDate": "2023-11-01T10:00:00Z",
      "PaymentDate": "2023-11-01T12:00:00Z",
      "TotalPrice": 318,
      "Status": "PendingReview"
    },
    {
      "Id": 3,
      "ServiceId": 3,
      "BuyerId": 1,
      "OrderDate": "2023-12-01T10:00:00Z",
      "PaymentDate": "2023-12-01T11:00:00Z",
      "TotalPrice": 126,
      "Status": "Ongoing"
    },
    {
      "Id": 4,
      "ServiceId": 4,
      "BuyerId": 2,
      "OrderDate": "2024-01-01T10:00:00Z",
      "TotalPrice": 99,
      "Status": "PendingPayment"
    },
    {
      "Id": 5,
      "ServiceId": 1,
      "BuyerId": 2,
      "OrderDate": "2023-10-10T09:30:00Z",
      "PaymentDate": "2023-10-10T09:45:00Z",
      "CompletionDate": "2023-10-10T11:30:00Z",
      "TotalPrice": 58,
      "Status": "Completed",
      "ReviewId": 2
    },
    {
      "Id": 6,
      "ServiceId": 2,
      "BuyerId": 1,
      "OrderDate": "2023-11-02T09:10:00Z",
      "PaymentDate": "2023-11-02T09:20:00Z",
      "CompletionDate": "2023-11-04T18:00:00Z",
      "TotalPrice": 318,
      "Status": "Completed",
      "ReviewId": 3
    }
  ],
  "Categories": [
    {
      "Id": 1,
      "Name": "MOBA",
      "IconUrl": "banner1.png"
    },
    {
      "Id": 2,
      "Name": "射击",
      "IconUrl": "banner2.png"
    },
    {
      "Id": 3,
      "Name": "RPG",
      "IconUrl": "banner3.png"
    }
  ],
  "Banners": [
    {
      "Id": 1,
      "ImageUrl": "banner1.png",
      "TargetUrl": "/ServiceDetail/1"
    },
    {
      "Id": 2,
      "ImageUrl": "banner2.png",
      "TargetUrl": "/ServiceDetail/2"
    },
    {
      "Id": 3,
      "ImageUrl": "banner3.png",
      "TargetUrl": "/ServiceDetail/3"
    }
  ],
  "Reviews": [
    {
      "Id": 1,
      "ServiceId": 1,
      "OrderId": 1,
      "UserId": 1,
      "Rating": 5,
      "Comment": "教练很专业，战术细节讲得很清楚。",
      "ReviewDate": "2023-10-02T15:30:00Z"
    },
    {
      "Id": 2,
      "ServiceId": 1,
      "OrderId": 5,
      "UserId": 2,
      "Rating": 4,
      "Comment": "陪练氛围轻松愉快，就是排位有点卡。",
      "ReviewDate": "2023-10-10T12:05:00Z"
    },
    {
      "Id": 3,
      "ServiceId": 2,
      "OrderId": 6,
      "UserId": 1,
      "Rating": 5,
      "Comment": "上分方案非常针对性，两天就晋级了！",
      "ReviewDate": "2023-11-05T08:15:00Z"
    }
  ]
}】

Services/IDataService.cs:
【using GamerLinkApp.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace GamerLinkApp.Services
{
    public interface IDataService
    {
        Task<List<Service>> GetServicesAsync();
        Task<Service?> GetServiceByIdAsync(int id);
        Task<List<Category>> GetCategoriesAsync();
        Task<List<Service>> GetServicesByCategoryAsync(Category category);
        Task<User?> GetUserAsync(int id);
        Task<Order> CreateOrderAsync(Order order);
        Task<Order?> GetOrderByIdAsync(int id);
        Task<Order?> MarkOrderAsPaidAsync(int orderId);
        Task<List<Order>> GetOrdersByUserAsync(int userId);
        Task<Review?> GetReviewByOrderIdAsync(int orderId);
        Task<List<ServiceReviewInfo>> GetServiceReviewsAsync(int serviceId);
        Task<(Order? Order, Review? Review, string? ErrorMessage)> SubmitReviewAsync(int orderId, int userId, int rating, string comment);

    }
}
】

Services/SqliteDataService.cs:
【using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using GamerLinkApp.Data;
using GamerLinkApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Maui.Storage;

namespace GamerLinkApp.Services
{
    public class SqliteDataService : IDataService
    {
        private readonly IDbContextFactory<ServiceDbContext> _contextFactory;
        private readonly SemaphoreSlim _initializationLock = new(1, 1);
        private bool _initialized;

        public SqliteDataService(IDbContextFactory<ServiceDbContext> contextFactory)
        {
            _contextFactory = contextFactory;
        }

        public async Task<List<Service>> GetServicesAsync()
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var services = await context.Services.AsNoTracking().ToListAsync();

            foreach (var service in services)
            {
                service.ImageUrls ??= new List<string>();
                service.Tags ??= new List<string>();
            }

            return services;
        }

        public async Task<Service?> GetServiceByIdAsync(int id)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var service = await context.Services.AsNoTracking().FirstOrDefaultAsync(s => s.Id == id);
            if (service is not null)
            {
                service.ImageUrls ??= new List<string>();
                service.Tags ??= new List<string>();
            }

            return service;
        }

        public async Task<List<Category>> GetCategoriesAsync()
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Categories
                .AsNoTracking()
                .Distinct()
                .OrderBy(Name => Name)
                .ToListAsync();
        }


        public async Task<User?> GetUserAsync(int id)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == id);
        }

        public async Task<Order> CreateOrderAsync(Order order)
        {
            ArgumentNullException.ThrowIfNull(order);

            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();

            if (order.OrderDate == default)
            {
                order.OrderDate = DateTime.UtcNow;
            }

            context.Orders.Add(order);
            await context.SaveChangesAsync();

            return order;
        }

        public async Task<Order?> GetOrderByIdAsync(int id)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Orders.AsNoTracking().FirstOrDefaultAsync(o => o.Id == id);
        }

        public async Task<Order?> MarkOrderAsPaidAsync(int orderId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var order = await context.Orders.FirstOrDefaultAsync(o => o.Id == orderId);
            if (order is null)
            {
                return null;
            }

            order.Status = nameof(OrderStatus.Ongoing);
            order.PaymentDate = DateTime.UtcNow;

            await context.SaveChangesAsync();

            return order;
        }

        public async Task<List<Order>> GetOrdersByUserAsync(int userId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Orders
                .AsNoTracking()
                .Where(o => o.BuyerId == userId)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();
        }

        public async Task<Review?> GetReviewByOrderIdAsync(int orderId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Reviews.AsNoTracking().FirstOrDefaultAsync(r => r.OrderId == orderId);
        }

        public async Task<List<ServiceReviewInfo>> GetServiceReviewsAsync(int serviceId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();

            var reviews = await (from review in context.Reviews.AsNoTracking()
                                 where review.ServiceId == serviceId
                                 orderby review.ReviewDate descending
                                 join user in context.Users.AsNoTracking() on review.UserId equals user.Id into userGroup
                                 from user in userGroup.DefaultIfEmpty()
                                 select new ServiceReviewInfo
                                 {
                                     Id = review.Id,
                                     ServiceId = review.ServiceId,
                                     OrderId = review.OrderId,
                                     Rating = review.Rating,
                                     Comment = review.Comment ?? string.Empty,
                                     ReviewDate = review.ReviewDate,
                                     UserId = user.Id,
                                     UserNickname = string.IsNullOrWhiteSpace(user.Nickname)
                                         ? (string.IsNullOrWhiteSpace(user.Username) ? "匿名玩家" : user!.Username!)
                                         : user!.Nickname!,
                                     UserAvatarUrl = user.AvatarUrl
                                 }).ToListAsync();

            return reviews;
        }

        public async Task<(Order? Order, Review? Review, string? ErrorMessage)> SubmitReviewAsync(int orderId, int userId, int rating, string comment)
        {
            await EnsureInitializedAsync();

            if (rating < 1 || rating > 5)
            {
                return (null, null, "锟斤拷锟街憋拷锟斤拷锟斤拷 1 锟斤拷 5 之锟斤拷");
            }

            comment = comment?.Trim() ?? string.Empty;
            if (comment.Length < 5)
            {
                return (null, null, "锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷要 5 锟斤拷锟街凤拷");
            }

            await using var context = await _contextFactory.CreateDbContextAsync();
            var order = await context.Orders.FirstOrDefaultAsync(o => o.Id == orderId);
            if (order is null || order.BuyerId != userId)
            {
                return (null, null, "未锟揭碉拷锟斤拷锟斤拷锟桔的讹拷锟斤拷");
            }

            if (order.ReviewId.HasValue)
            {
                var existingReview = await context.Reviews.AsNoTracking().FirstOrDefaultAsync(r => r.Id == order.ReviewId.Value);
                return (order, existingReview, "锟矫讹拷锟斤拷锟斤拷锟斤拷锟斤拷");
            }

            if (!string.Equals(order.Status, nameof(OrderStatus.PendingReview), StringComparison.Ordinal))
            {
                return (order, null, "锟斤拷前锟斤拷锟斤拷状态锟斤拷锟斤拷锟斤拷锟斤拷");
            }

            var review = new Review
            {
                OrderId = order.Id,
                ServiceId = order.ServiceId,
                UserId = userId,
                Rating = rating,
                Comment = comment,
                ReviewDate = DateTime.UtcNow
            };

            context.Reviews.Add(review);
            await context.SaveChangesAsync();

            order.Status = nameof(OrderStatus.Completed);
            order.ReviewId = review.Id;
            order.CompletionDate ??= DateTime.UtcNow;

            await UpdateServiceReviewStatsAsync(context, order.ServiceId);

            await context.SaveChangesAsync();

            var updatedOrder = await context.Orders.AsNoTracking().FirstOrDefaultAsync(o => o.Id == orderId);
            var createdReview = await context.Reviews.AsNoTracking().FirstOrDefaultAsync(r => r.Id == review.Id);

            return (updatedOrder, createdReview, null);
        }

        private static async Task UpdateServiceReviewStatsAsync(ServiceDbContext context, int serviceId)
        {
            var service = await context.Services.FirstOrDefaultAsync(s => s.Id == serviceId);
            if (service is null)
            {
                return;
            }

            var stats = await context.Reviews
                .Where(r => r.ServiceId == serviceId)
                .GroupBy(r => 1)
                .Select(g => new
                {
                    Count = g.Count(),
                    Average = g.Average(r => r.Rating)
                })
                .FirstOrDefaultAsync();

            if (stats is null)
            {
                service.ReviewCount = 0;
                service.AverageRating = 0;
                return;
            }

            service.ReviewCount = stats.Count;
            service.AverageRating = Math.Round(stats.Average, 1);
        }        private async Task EnsureInitializedAsync()
        {
            if (_initialized)
            {
                return;
            }

            await _initializationLock.WaitAsync();
            try
            {
                if (_initialized)
                {
                    return;
                }

                await using var context = await _contextFactory.CreateDbContextAsync();
                await context.Database.EnsureCreatedAsync();
                await SeedDataAsync(context);
                _initialized = true;
            }
            finally
            {
                _initializationLock.Release();
            }
        }

        private static async Task SeedDataAsync(ServiceDbContext context)
        {
            // 锟斤拷锟斤拷丫锟斤拷锟斤拷锟斤拷荩锟斤拷筒锟斤拷俪锟绞硷拷锟?
            if (await context.Services.AnyAsync() ||
                await context.Users.AnyAsync() ||
                await context.Orders.AnyAsync() ||
                await context.Categories.AnyAsync() ||
                await context.Banners.AnyAsync())
            {
                return;
            }

            try
            {
                // 锟斤拷取 JSON 锟侥硷拷
                using var stream = await FileSystem.OpenAppPackageFileAsync("seed_data.json");
                using var reader = new StreamReader(stream);
                var json = await reader.ReadToEndAsync();

                // 锟斤拷锟斤拷锟叫伙拷
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
                var seedData = JsonSerializer.Deserialize<SeedData>(json, options);

                if (seedData != null)
                {
                    if (seedData.Services?.Any() == true)
                        await context.Services.AddRangeAsync(seedData.Services);

                    if (seedData.Users?.Any() == true)
                        await context.Users.AddRangeAsync(seedData.Users);

                    if (seedData.Orders?.Any() == true)
                        await context.Orders.AddRangeAsync(seedData.Orders);

                    if (seedData.Reviews?.Any() == true)
                        await context.Reviews.AddRangeAsync(seedData.Reviews);

                    if (seedData.Categories?.Any() == true)
                        await context.Categories.AddRangeAsync(seedData.Categories);

                    if (seedData.Banners?.Any() == true)
                        await context.Banners.AddRangeAsync(seedData.Banners);

                    await context.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"SeedData 锟斤拷始锟斤拷失锟斤拷: {ex.Message}");
            }
        }

        public async Task<List<Service>> GetServicesByCategoryAsync(Category category)
        {
            await EnsureInitializedAsync();
            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Services.AsNoTracking().Where(s => s.Category == category.Name).ToListAsync();

        }

        public class SeedData
        {
            public List<Service> Services { get; set; } = new();
            public List<User> Users { get; set; } = new();
            public List<Order> Orders { get; set; } = new();
            public List<Review> Reviews { get; set; } = new();
            public List<Category> Categories { get; set; } = new();
            public List<Banner> Banners { get; set; } = new();
        }

    }
}


】

ViewModels/BaseViewModel.cs:
【using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace GamerLinkApp.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}】

ViewModels/OrderListViewModel.cs:
【using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class OrderListViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;
        private readonly List<OrderListItem> _allOrders = new();

        private OrderFilterOption? _selectedFilter;
        private bool _isLoading;

        public ObservableCollection<OrderFilterOption> StatusFilters { get; } = new();
        public ObservableCollection<OrderListItem> Orders { get; } = new();

        public OrderFilterOption? SelectedFilter
        {
            get => _selectedFilter;
            set
            {
                if (_selectedFilter == value)
                {
                    return;
                }

                _selectedFilter = value;
                OnPropertyChanged();
                ApplyFilter();
            }
        }

        public bool IsLoading
        {
            get => _isLoading;
            private set
            {
                if (_isLoading == value)
                {
                    return;
                }

                _isLoading = value;
                OnPropertyChanged();
            }
        }

        public bool HasOrders => Orders.Count > 0;

        public OrderListViewModel(IDataService dataService)
        {
            _dataService = dataService;
            InitializeFilters();
            _ = LoadAsync();
        }

        private void InitializeFilters()
        {
            StatusFilters.Clear();
            StatusFilters.Add(new OrderFilterOption(null, "È«²¿¶©µ¥"));
            StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.PendingPayment), "´ýÖ§¸¶"));
            StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.Ongoing), "½øÐÐÖÐ"));
            StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.PendingReview), "´ýÆÀ¼Û"));
            StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.Completed), "ÒÑÍê³É"));
            StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.RefundRequested), "ÍË¿îÉêÇë"));
            StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.Cancelled), "ÒÑÈ¡Ïû"));

            SelectedFilter = StatusFilters.FirstOrDefault();
        }
        // ¨¨¨ ÔÚÀàµÄ×îºóÌí¼ÓÕâ¸öÐÂ·½·¨ ¨¨¨
        public void SetInitialFilter(string statusKey)
        {
            if (string.IsNullOrEmpty(statusKey))
            {
                return;
            }

            var filterToSelect = StatusFilters.FirstOrDefault(f => f.StatusKey == statusKey);
            if (filterToSelect != null)
            {
                SelectedFilter = filterToSelect;
            }
        }
        // ¡ø¡ø¡ø Ìí¼Ó½áÊø ¡ø¡ø¡ø


        public Task RefreshAsync()
        {
            return LoadAsync();
        }
        private async Task LoadAsync()
        {
            if (IsLoading)
            {
                return;
            }

            IsLoading = true;

            try
            {
                var user = await _dataService.GetUserAsync(1);
                if (user is null)
                {
                    return;
                }

                var orders = await _dataService.GetOrdersByUserAsync(user.Id);
                var items = new List<OrderListItem>(orders.Count);

                foreach (var order in orders)
                {
                    Service? service = null;

                    try
                    {
                        service = await _dataService.GetServiceByIdAsync(order.ServiceId);
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine($"Failed to load service for order {order.Id}: {ex.Message}");
                    }

                    items.Add(CreateOrderItem(order, service));
                }

                _allOrders.Clear();
                _allOrders.AddRange(items);

                UpdateFilterCounts();
                ApplyFilter();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load orders: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        private void ApplyFilter()
        {
            IEnumerable<OrderListItem> filtered = _allOrders;

            var statusKey = SelectedFilter?.StatusKey;
            if (!string.IsNullOrEmpty(statusKey))
            {
                filtered = filtered.Where(item => string.Equals(item.StatusKey, statusKey, StringComparison.Ordinal));
            }

            Orders.Clear();
            foreach (var item in filtered)
            {
                Orders.Add(item);
            }

            OnPropertyChanged(nameof(HasOrders));
        }

        private void UpdateFilterCounts()
        {
            foreach (var filter in StatusFilters)
            {
                if (string.IsNullOrEmpty(filter.StatusKey))
                {
                    filter.Count = _allOrders.Count;
                }
                else
                {
                    filter.Count = _allOrders.Count(item => string.Equals(item.StatusKey, filter.StatusKey, StringComparison.Ordinal));
                }
            }
        }

        private static OrderListItem CreateOrderItem(Order order, Service? service)
        {
            var statusKey = order.Status ?? string.Empty;
            var statusDisplay = GetStatusDisplay(statusKey);
            var colors = GetStatusColors(statusKey);

            return new OrderListItem(
                order.Id,
                service?.Title ?? "·þÎñÒÑÏÂ¼Ü",
                service?.ThumbnailUrl,
                statusKey,
                statusDisplay,
                colors.badgeColor,
                colors.textColor,
                order.OrderDate,
                FormatOrderDate(order.OrderDate),
                order.TotalPrice,
                $"£¤{order.TotalPrice:F2}");
        }

        private static string FormatOrderDate(DateTime dateTime)
        {
            return dateTime.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);
        }

        private static string GetStatusDisplay(string statusKey)
        {
            return statusKey switch
            {
                nameof(OrderStatus.PendingPayment) => "´ýÖ§¸¶",
                nameof(OrderStatus.Ongoing) => "½øÐÐÖÐ",
                nameof(OrderStatus.PendingReview) => "´ýÆÀ¼Û",
                nameof(OrderStatus.Completed) => "ÒÑÍê³É",
                nameof(OrderStatus.RefundRequested) => "ÍË¿îÉêÇë",
                nameof(OrderStatus.Cancelled) => "ÒÑÈ¡Ïû",
                _ => "Î´Öª×´Ì¬"
            };
        }

        private static (string badgeColor, string textColor) GetStatusColors(string statusKey)
        {
            return statusKey switch
            {
                nameof(OrderStatus.PendingPayment) => ("#FFF3E0", "#FF8A00"),
                nameof(OrderStatus.Ongoing) => ("#E5F1FF", "#3478F6"),
                nameof(OrderStatus.PendingReview) => ("#F3E8FF", "#8E24AA"),
                nameof(OrderStatus.Completed) => ("#E6F8EE", "#2DBE60"),
                nameof(OrderStatus.RefundRequested) => ("#FFE7E7", "#FF4D4F"),
                nameof(OrderStatus.Cancelled) => ("#EEF1F5", "#6B7280"),
                _ => ("#EEF1F5", "#6B7280")
            };
        }

        public class OrderFilterOption : BaseViewModel
        {
            public OrderFilterOption(string? statusKey, string displayName)
            {
                StatusKey = statusKey;
                DisplayName = displayName;
            }

            public string? StatusKey { get; }
            public string DisplayName { get; }

            private int _count;
            public int Count
            {
                get => _count;
                set
                {
                    if (_count == value)
                    {
                        return;
                    }

                    _count = value;
                    OnPropertyChanged();
                    OnPropertyChanged(nameof(CountDisplay));
                }
            }

            public string CountDisplay => $"({Count})";
        }

        public class OrderListItem
        {
            public OrderListItem(
                int orderId,
                string serviceTitle,
                string? thumbnailUrl,
                string statusKey,
                string statusDisplay,
                string statusBadgeColor,
                string statusTextColor,
                DateTime orderDate,
                string orderDateDisplay,
                decimal totalPrice,
                string totalPriceDisplay)
            {
                OrderId = orderId;
                ServiceTitle = serviceTitle;
                ThumbnailUrl = thumbnailUrl;
                StatusKey = statusKey;
                StatusDisplay = statusDisplay;
                StatusBadgeColor = statusBadgeColor;
                StatusTextColor = statusTextColor;
                OrderDate = orderDate;
                OrderDateDisplay = orderDateDisplay;
                TotalPrice = totalPrice;
                TotalPriceDisplay = totalPriceDisplay;
            }

            public int OrderId { get; }
            public string OrderNumberDisplay => $"¶©µ¥ºÅ£º{OrderId:D6}";
            public string ServiceTitle { get; }
            public string? ThumbnailUrl { get; }
            public string StatusKey { get; }
            public string StatusDisplay { get; }
            public string StatusBadgeColor { get; }
            public string StatusTextColor { get; }
            public DateTime OrderDate { get; }
            public string OrderDateDisplay { get; }
            public decimal TotalPrice { get; }
            public string TotalPriceDisplay { get; }
            public bool IsPendingPayment => string.Equals(StatusKey, nameof(OrderStatus.PendingPayment), StringComparison.Ordinal);
            public bool CanReview => string.Equals(StatusKey, nameof(OrderStatus.PendingReview), StringComparison.Ordinal);
        }
    }
}


】

ViewModels/OrderPaymentViewModel.cs:
【﻿using System;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class OrderPaymentViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        private Order? _order;
        public Order? Order
        {
            get => _order;
            private set
            {
                if (_order == value)
                {
                    return;
                }

                _order = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(HasOrder));
                OnPropertyChanged(nameof(CanPay));
                OnPropertyChanged(nameof(PaymentAmountDisplay));
                OnPropertyChanged(nameof(OrderStatusDisplay));
                OnPropertyChanged(nameof(OrderNumberDisplay));
                OnPropertyChanged(nameof(OrderDateDisplay));
            }
        }

        private Service? _service;
        public Service? Service
        {
            get => _service;
            private set
            {
                if (_service == value)
                {
                    return;
                }

                _service = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(ServiceName));
            }
        }

        private bool _isLoading;
        public bool IsLoading
        {
            get => _isLoading;
            private set
            {
                if (_isLoading == value)
                {
                    return;
                }

                _isLoading = value;
                OnPropertyChanged();
            }
        }

        private bool _isPaying;
        public bool IsPaying
        {
            get => _isPaying;
            private set
            {
                if (_isPaying == value)
                {
                    return;
                }

                _isPaying = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(CanPay));
            }
        }

        public bool HasOrder => Order is not null;

        public bool CanPay => !IsPaying && Order?.Status == nameof(OrderStatus.PendingPayment);

        public string PaymentAmountDisplay => Order is null ? string.Empty : $"￥{Order.TotalPrice:F2}";

        public string OrderStatusDisplay
        {
            get
            {
                if (Order?.Status is null)
                {
                    return "未知状态";
                }

                return Order.Status switch
                {
                    nameof(OrderStatus.PendingPayment) => "待支付",
                    nameof(OrderStatus.Ongoing) => "服务中",
                    nameof(OrderStatus.PendingReview) => "待评价",
                    nameof(OrderStatus.Completed) => "已完成",
                    nameof(OrderStatus.RefundRequested) => "退款申请中",
                    nameof(OrderStatus.Cancelled) => "已取消",
                    _ => "未知状态"
                };
            }
        }

        public string OrderNumberDisplay => Order is null ? string.Empty : $"订单号：{Order.Id:D6}";

        public string OrderDateDisplay => Order is null ? string.Empty : Order.OrderDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm");

        public string ServiceName => Service?.Title ?? "未知服务";

        public OrderPaymentViewModel(IDataService dataService)
        {
            _dataService = dataService;
        }

        public async Task LoadAsync(int orderId)
        {
            if (orderId <= 0)
            {
                Order = null;
                Service = null;
                return;
            }

            if (IsLoading)
            {
                return;
            }

            IsLoading = true;

            try
            {
                var order = await _dataService.GetOrderByIdAsync(orderId);
                Order = order;

                if (order is not null)
                {
                    Service = await _dataService.GetServiceByIdAsync(order.ServiceId);
                }
                else
                {
                    Service = null;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load order for payment: {ex.Message}");
                Order = null;
                Service = null;
            }
            finally
            {
                IsLoading = false;
            }
        }

        public async Task<(bool Success, string? ErrorMessage)> PayAsync()
        {
            if (Order is null)
            {
                return (false, "订单不存在或已失效。");
            }

            if (Order.Status != nameof(OrderStatus.PendingPayment))
            {
                return (false, "订单已处理，无需支付。");
            }

            if (IsPaying)
            {
                return (false, null);
            }

            IsPaying = true;

            try
            {
                var updated = await _dataService.MarkOrderAsPaidAsync(Order.Id);
                if (updated is null)
                {
                    return (false, "支付失败，订单不存在。");
                }

                Order = updated;
                return (true, null);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to mark order paid: {ex.Message}");
                return (false, "支付失败，请稍后再试。");
            }
            finally
            {
                IsPaying = false;
            }
        }
    }
}
】

ViewModels/OrderReviewViewModel.cs:
【﻿using System;



using System.Collections.Generic;



using System.Collections.ObjectModel;



using System.Diagnostics;



using System.Threading.Tasks;



using System.Windows.Input;



using GamerLinkApp.Models;



using GamerLinkApp.Services;



namespace GamerLinkApp.ViewModels



{



    public class OrderReviewViewModel : BaseViewModel



    {



        private const int MinimumCommentLength = 5;



        public ObservableCollection<RatingStarItem> RatingStars { get; }



        private readonly IDataService _dataService;



        private Order? _order;



        public Order? Order



        {



            get => _order;



            private set



            {



                if (_order == value)



                {



                    return;



                }



                _order = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(HasOrder));



                OnPropertyChanged(nameof(OrderNumberDisplay));



                OnPropertyChanged(nameof(OrderDateDisplay));



                OnPropertyChanged(nameof(OrderStatusDisplay));



                OnPropertyChanged(nameof(CanSubmit));



                OnPropertyChanged(nameof(SubmitButtonText));



            }



        }



        private Service? _service;



        public Service? Service



        {



            get => _service;



            private set



            {



                if (_service == value)



                {



                    return;



                }



                _service = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(ServiceName));



            }



        }



        private Review? _existingReview;



        public Review? ExistingReview



        {



            get => _existingReview;



            private set



            {



                if (_existingReview == value)



                {



                    return;



                }



                _existingReview = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(IsAlreadyReviewed));



                OnPropertyChanged(nameof(CanSubmit));



                OnPropertyChanged(nameof(IsCommentReadOnly));



                OnPropertyChanged(nameof(IsRatingReadOnly));



                OnPropertyChanged(nameof(SubmitButtonText));



            }



        }



        private bool _isLoading;



        public bool IsLoading



        {



            get => _isLoading;



            private set



            {



                if (_isLoading == value)



                {



                    return;



                }



                _isLoading = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(IsBusy));



            }



        }



        private bool _isSubmitting;



        public bool IsSubmitting



        {



            get => _isSubmitting;



            private set



            {



                if (_isSubmitting == value)



                {



                    return;



                }



                _isSubmitting = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(CanSubmit));



                OnPropertyChanged(nameof(SubmitButtonText));



                OnPropertyChanged(nameof(IsBusy));



            }



        }



        private int _rating = 5;



        public int Rating



        {



            get => _rating;



            set



            {



                var clamped = Math.Clamp(value, 1, 5);



                if (_rating == clamped)



                {



                    return;



                }



                _rating = clamped;



                OnPropertyChanged();



                OnPropertyChanged(nameof(RatingDisplay));



                OnPropertyChanged(nameof(CanSubmit));



                UpdateRatingStars();



            }



        }



        public string RatingDisplay => $"{Rating} 分";



        private void UpdateRatingStars()



        {



            foreach (var star in RatingStars)



            {



                star.IsFilled = star.Value <= Rating;



            }



        }



        private string _comment = string.Empty;



        public string Comment



        {



            get => _comment;



            set



            {



                var newValue = value ?? string.Empty;



                if (string.Equals(_comment, newValue, StringComparison.Ordinal))



                {



                    return;



                }



                _comment = newValue;



                OnPropertyChanged();



                OnPropertyChanged(nameof(CommentLengthIndicator));



                OnPropertyChanged(nameof(CanSubmit));



            }



        }



        public string CommentLengthIndicator => $"{Math.Min(Comment.Trim().Length, 200)}/200";



        public bool HasOrder => Order is not null;



        public bool IsAlreadyReviewed => ExistingReview is not null;



        public bool IsCommentReadOnly => IsAlreadyReviewed;



        public bool IsRatingReadOnly => IsAlreadyReviewed;



        public string SubmitButtonText => IsAlreadyReviewed ? "已完成评价" : (IsSubmitting ? "提交中..." : "提交评价");



        public bool IsBusy => IsLoading || IsSubmitting;



        private bool IsPendingReview => string.Equals(Order?.Status, nameof(OrderStatus.PendingReview), StringComparison.Ordinal);



        public bool CanSubmit



        {



            get



            {



                if (!HasOrder)



                {



                    return false;



                }



                if (IsAlreadyReviewed)



                {



                    return false;



                }



                if (IsSubmitting)



                {



                    return false;



                }



                if (!IsPendingReview)



                {



                    return false;



                }



                return Comment.Trim().Length >= MinimumCommentLength && Rating >= 1 && Rating <= 5;



            }



        }



        public string ServiceName => Service?.Title ?? "未知服务";



        public string OrderNumberDisplay => Order is null ? string.Empty : $"订单号：{Order.Id:D6}";



        public string OrderDateDisplay => Order is null ? string.Empty : Order.OrderDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm");



        public string OrderStatusDisplay => Order?.Status switch



        {



            nameof(OrderStatus.PendingPayment) => "待支付",



            nameof(OrderStatus.Ongoing) => "进行中",



            nameof(OrderStatus.PendingReview) => "待评价",



            nameof(OrderStatus.Completed) => "已完成",



            nameof(OrderStatus.RefundRequested) => "申请退款",



            nameof(OrderStatus.Cancelled) => "已取消",



            _ => "未知状态"



        };



        public OrderReviewViewModel(IDataService dataService)



        {



            _dataService = dataService;



            RatingStars = new ObservableCollection<RatingStarItem>();



            for (var i = 1; i <= 5; i++)



            {



                RatingStars.Add(new RatingStarItem(i));



            }



            UpdateRatingStars();



        }



        public async Task LoadAsync(int orderId)



        {



            if (orderId <= 0)



            {



                Order = null;



                Service = null;



                ExistingReview = null;



                Rating = 5;



                Comment = string.Empty;



                return;



            }



            if (IsLoading)



            {



                return;



            }



            IsLoading = true;



            try



            {



                var order = await _dataService.GetOrderByIdAsync(orderId);



                Order = order;



                if (order is null)



                {



                    Service = null;



                    ExistingReview = null;



                    Rating = 5;



                    Comment = string.Empty;



                    return;



                }



                Service = await _dataService.GetServiceByIdAsync(order.ServiceId);



                var review = await _dataService.GetReviewByOrderIdAsync(order.Id);



                ExistingReview = review;



                if (review is not null)



                {



                    Rating = review.Rating;



                    Comment = review.Comment;



                }



                else



                {



                    Rating = 5;



                    Comment = string.Empty;



                }



            }



            catch (Exception ex)



            {



                Debug.WriteLine($"Failed to load review data: {ex.Message}");



                Order = null;



                Service = null;



                ExistingReview = null;



                Rating = 5;



                Comment = string.Empty;



            }



            finally



            {



                IsLoading = false;



            }



        }



        public async Task<(bool Success, string? ErrorMessage)> SubmitAsync()



        {



            if (!HasOrder)



            {



                return (false, "未找到订单");



            }



            if (IsAlreadyReviewed)



            {



                return (false, "该订单已经评价过");



            }



            var trimmedComment = Comment.Trim();



            if (trimmedComment.Length < MinimumCommentLength)



            {



                return (false, $"评价内容至少需要 {MinimumCommentLength} 个字符");



            }



            if (Rating < 1 || Rating > 5)



            {



                return (false, "评分无效");



            }



            if (!IsPendingReview)



            {



                return (false, "当前状态暂不支持评价");



            }



            if (IsSubmitting)



            {



                return (false, null);



            }



            IsSubmitting = true;



            try



            {



                var (updatedOrder, createdReview, errorMessage) = await _dataService.SubmitReviewAsync(Order!.Id, Order.BuyerId, Rating, trimmedComment);



                if (!string.IsNullOrEmpty(errorMessage))



                {



                    return (false, errorMessage);



                }



                Order = updatedOrder;



                ExistingReview = createdReview;



                if (createdReview is not null)



                {



                    Rating = createdReview.Rating;



                    Comment = createdReview.Comment;



                }



                return (true, null);



            }



            catch (Exception ex)



            {



                Debug.WriteLine($"Failed to submit review: {ex.Message}");



                return (false, "评价提交失败，请稍后再试。");



            }



            finally



            {



                IsSubmitting = false;



            }



        }



        public class RatingStarItem : BaseViewModel



        {



            public RatingStarItem(int value)



            {



                Value = value;



            }



            public int Value { get; }



            private bool _isFilled;



            public bool IsFilled



            {



                get => _isFilled;



                set



                {



                    if (_isFilled == value)



                    {



                        return;



                    }



                    _isFilled = value;



                    OnPropertyChanged();



                }



            }



        }



    }



}



】

ViewModels/ProfileViewModel.cs:
【﻿using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using GamerLinkApp.Views;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels
{
    public class ProfileViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        private User? _currentUser;
        public User? CurrentUser
        {
            get => _currentUser;
            private set
            {
                if (_currentUser == value)
                {
                    return;
                }

                _currentUser = value;
                OnPropertyChanged();
            }
        }

        private decimal _totalPaid;
        public decimal TotalPaid
        {
            get => _totalPaid;
            private set
            {
                if (_totalPaid == value)
                {
                    return;
                }

                _totalPaid = value;
                OnPropertyChanged();
            }
        }

        private int _completedOrders;
        public int CompletedOrders
        {
            get => _completedOrders;
            private set
            {
                if (_completedOrders == value)
                {
                    return;
                }

                _completedOrders = value;
                OnPropertyChanged();
            }
        }

        public ObservableCollection<OrderStatusItem> OrderStatuses { get; } = new();
        public ICommand OrderStatusTappedCommand { get; }

        public ProfileViewModel(IDataService dataService)
        {
            _dataService = dataService;
            OrderStatusTappedCommand = new Command<OrderStatusItem>(async (item) => await OnOrderStatusTapped(item));
            _ = LoadAsync();
        }

        private async Task LoadAsync()
        {
            try
            {
                var user = await _dataService.GetUserAsync(1);
                CurrentUser = user;

                if (user is null)
                {
                    return;
                }

                var orders = await _dataService.GetOrdersByUserAsync(user.Id);
                TotalPaid = orders.Where(o => o.PaymentDate.HasValue).Sum(o => o.TotalPrice);
                CompletedOrders = orders.Count(o => string.Equals(o.Status, nameof(OrderStatus.Completed), StringComparison.Ordinal));

                var summaries = new[]
                {
                    new OrderStatusItem(nameof(OrderStatus.PendingPayment), "待支付", "¥"),
                    new OrderStatusItem(nameof(OrderStatus.Ongoing), "进行中", "⌛"),
                    new OrderStatusItem(nameof(OrderStatus.PendingReview), "待评价", "✍"),
                    new OrderStatusItem(null, "全部订单", "📄") // 修正: null key 代表全部订单
                };

                foreach (var summary in summaries)
                {
                    // 修正: 如果 StatusKey 为 null，则统计所有订单数量
                    summary.Count = string.IsNullOrEmpty(summary.StatusKey)
                        ? orders.Count
                        : orders.Count(o => string.Equals(o.Status, summary.StatusKey, StringComparison.Ordinal));
                }

                OrderStatuses.Clear();
                foreach (var summary in summaries)
                {
                    OrderStatuses.Add(summary);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to load profile: {ex.Message}");
            }
        }

        private async Task OnOrderStatusTapped(OrderStatusItem item)
        {
            if (item is null)
                return;

            // 根据点击的项构建导航路由
            // 如果 StatusKey 为空 (代表"全部订单"), 则不传递参数
            var route = string.IsNullOrEmpty(item.StatusKey)
                ? $"{nameof(OrderListPage)}"
                : $"{nameof(OrderListPage)}?status={item.StatusKey}";

            await Shell.Current.GoToAsync(route);
        }


        public class OrderStatusItem
        {
            public OrderStatusItem(string statusKey, string displayName, string symbol)
            {
                StatusKey = statusKey;
                DisplayName = displayName;
                Symbol = symbol;
            }

            public string StatusKey { get; }
            public string DisplayName { get; }
            public string Symbol { get; }
            public int Count { get; set; }
        }
    }
}】

ViewModels/ServiceDetailViewModel.cs:
【using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ServiceDetailViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        public ObservableCollection<ServiceReviewInfo> Reviews { get; } = new();

        private bool _isReviewsLoading;
        public bool IsReviewsLoading
        {
            get => _isReviewsLoading;
            private set
            {
                if (_isReviewsLoading == value)
                {
                    return;
                }

                _isReviewsLoading = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(IsReviewsEmpty));
            }
        }

        public bool HasReviews => Reviews.Count > 0;

        public bool IsReviewsEmpty => !IsReviewsLoading && !HasReviews;

        public int ReviewCount => Reviews.Count;

        public string ReviewCountDisplay => HasReviews ? $"{ReviewCount}条评价" : "暂无评价";

        public double AverageRating => HasReviews ? Math.Round(Reviews.Average(r => r.Rating), 1) : 0;

        public string AverageRatingDisplay => HasReviews ? AverageRating.ToString("F1") : "--";

        private Service? _selectedService;
        public Service? SelectedService
        {
            get => _selectedService;
            set
            {
                if (_selectedService == value)
                {
                    return;
                }

                _selectedService = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(CanPlaceOrder));
            }
        }

        private int _serviceId;
        public int ServiceId
        {
            get => _serviceId;
            set
            {
                if (_serviceId == value)
                {
                    return;
                }

                _serviceId = value;
                OnPropertyChanged();
                _ = LoadServiceAsync(value);
            }
        }

        private bool _isPlacingOrder;
        public bool IsPlacingOrder
        {
            get => _isPlacingOrder;
            private set
            {
                if (_isPlacingOrder == value)
                {
                    return;
                }

                _isPlacingOrder = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(CanPlaceOrder));
            }
        }

        public bool CanPlaceOrder => !IsPlacingOrder && SelectedService is not null;

        public ServiceDetailViewModel(IDataService dataService)
        {
            _dataService = dataService;

            Reviews.CollectionChanged += (_, __) =>
            {
                OnPropertyChanged(nameof(HasReviews));
                OnPropertyChanged(nameof(IsReviewsEmpty));
                OnPropertyChanged(nameof(ReviewCount));
                OnPropertyChanged(nameof(ReviewCountDisplay));
                OnPropertyChanged(nameof(AverageRating));
                OnPropertyChanged(nameof(AverageRatingDisplay));
            };
        }

        public async Task<(bool Success, string? ErrorMessage, Order? Order)> PlaceOrderAsync()
        {
            if (SelectedService is null)
            {
                return (false, "当前服务信息不可用，请稍后重试。", null);
            }

            if (IsPlacingOrder)
            {
                return (false, null, null);
            }

            IsPlacingOrder = true;

            try
            {
                var user = await _dataService.GetUserAsync(1);
                if (user is null)
                {
                    return (false, "未找到当前用户，请先登录。", null);
                }

                var order = new Order
                {
                    ServiceId = SelectedService.Id,
                    BuyerId = user.Id,
                    OrderDate = DateTime.UtcNow,
                    Status = nameof(OrderStatus.PendingPayment),
                    TotalPrice = SelectedService.Price
                };

                var createdOrder = await _dataService.CreateOrderAsync(order);
                return (true, null, createdOrder);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to create order: {ex.Message}");
                return (false, "下单失败，请稍后再试。", null);
            }
            finally
            {
                IsPlacingOrder = false;
            }
        }

        private async Task LoadServiceAsync(int id)
        {
            if (id <= 0)
            {
                SelectedService = null;
                Reviews.Clear();
                return;
            }

            try
            {
                SelectedService = await _dataService.GetServiceByIdAsync(id);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load service detail: {ex.Message}");
                SelectedService = null;
            }

            await LoadReviewsAsync(id);
        }

        private async Task LoadReviewsAsync(int serviceId)
        {
            if (serviceId <= 0)
            {
                Reviews.Clear();
                return;
            }

            try
            {
                IsReviewsLoading = true;
                var reviews = await _dataService.GetServiceReviewsAsync(serviceId);

                Reviews.Clear();
                foreach (var review in reviews)
                {
                    Reviews.Add(review);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load service reviews: {ex.Message}");
                Reviews.Clear();
            }
            finally
            {
                IsReviewsLoading = false;
            }
        }
    }
}
】

ViewModels/ServiceListViewModel.cs:
【﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ServiceListViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;
        private readonly List<Service> _allServices = new();
        private string _searchText = string.Empty;

        public ObservableCollection<Service> Services { get; } = new();

        public string SearchText
        {
            get => _searchText;
            set
            {
                if (_searchText == value)
                {
                    return;
                }

                _searchText = value;
                OnPropertyChanged();
                ApplyFilter();
                OnPropertyChanged(nameof(IsShowingBanners));
            }
        }

        public bool IsShowingBanners => string.IsNullOrWhiteSpace(SearchText);

        public ServiceListViewModel(IDataService dataService)
        {
            _dataService = dataService;
            _ = LoadServicesAsync(); // async load keeps UI responsive
        }

        private async Task LoadServicesAsync()
        {
            try
            {
                var services = await _dataService.GetServicesAsync();
                _allServices.Clear();
                _allServices.AddRange(services);
                ApplyFilter();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load services: {ex.Message}");
            }
        }

        private void ApplyFilter()
        {
            var query = SearchText?.Trim();

            IEnumerable<Service> filtered = _allServices;

            if (!string.IsNullOrWhiteSpace(query))
            {
                filtered = _allServices.Where(service =>
                    (!string.IsNullOrWhiteSpace(service.Title) && service.Title.Contains(query, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrWhiteSpace(service.GameName) && service.GameName.Contains(query, StringComparison.OrdinalIgnoreCase)) ||
                    (service.Tags?.Any(tag => tag.Contains(query, StringComparison.OrdinalIgnoreCase)) ?? false));
            }

            UpdateServices(filtered);
        }

        // --- 以下是修改的部分 ---

        /// <summary>
        /// 高效地更新服务列表，避免不必要的UI刷新导致输入框失去焦点
        /// </summary>
        /// <param name="source">过滤后的服务列表</param>
        private void UpdateServices(IEnumerable<Service> source)
        {
            var filteredList = source.ToList();

            // 移除不再存在于筛选结果中的服务
            for (int i = Services.Count - 1; i >= 0; i--)
            {
                var currentService = Services[i];
                if (!filteredList.Any(s => s.Id == currentService.Id))
                {
                    Services.RemoveAt(i);
                }
            }

            // 添加新服务或调整顺序
            for (int i = 0; i < filteredList.Count; i++)
            {
                var filteredService = filteredList[i];

                // 如果当前位置的服务不匹配，则需要调整
                if (i >= Services.Count || Services[i].Id != filteredService.Id)
                {
                    // 检查服务是否已存在于列表的其他位置
                    var existing = Services.FirstOrDefault(s => s.Id == filteredService.Id);
                    if (existing != null)
                    {
                        // 如果存在，就移动到正确的位置
                        Services.Move(Services.IndexOf(existing), i);
                    }
                    else
                    {
                        // 如果不存在，就插入到正确的位置
                        Services.Insert(i, filteredService);
                    }
                }
            }
        }
    }
}】

ViewModels/ZoneViewModel.cs:
【﻿using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ZoneViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        public ObservableCollection<Category> Categories { get; } = new();
        public ObservableCollection<Service> Services { get; } = new();

        private Category? _selectedCategory;
        public Category? SelectedCategory
        {
            get => _selectedCategory;
            set
            {
                if (_selectedCategory == value)
                {
                    return;
                }

                _selectedCategory = value;
                OnPropertyChanged();
                _ = LoadServicesForCategoryAsync(value);
            }
        }

        private Service? _highlightedService;
        public Service? HighlightedService
        {
            get => _highlightedService;
            private set
            {
                if (_highlightedService == value)
                {
                    return;
                }

                _highlightedService = value;
                OnPropertyChanged();
            }
        }

        public ZoneViewModel(IDataService dataService)
        {
            _dataService = dataService;
            _ = InitializeAsync();
        }

        private async Task InitializeAsync()
        {
            try
            {
                var categories = await _dataService.GetCategoriesAsync();
                Categories.Clear();
                foreach (var ca in categories)
                {
                    Categories.Add(ca);
                }

                if (Categories.Count > 0)
                {
                    SelectedCategory = Categories[0];
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to load zone games: {ex.Message}");
            }
        }

        private async Task LoadServicesForCategoryAsync(Category? cate)
        {
            if (cate==null)
            {
                Services.Clear();
                HighlightedService = null;
                return;
            }

            try
            {
                var services = await _dataService.GetServicesByCategoryAsync(cate);
                Services.Clear();
                foreach (var service in services)
                {
                    Services.Add(service);
                }

                if (services.Any())
                {
                    HighlightedService = services.FirstOrDefault();
                }
                else
                {
                    HighlightedService = null;
                }

            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to load services for {cate.Name}: {ex.Message}");
            }
        }
    }
}
】

Views/OrderListPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.OrderListPage"
             x:DataType="vm:OrderListViewModel"
             Title="订单页面"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="Auto,*"
          Padding="20,16,20,0">
        <VerticalStackLayout Grid.Row="0"
                             Spacing="16">
            <Label Text="订单"
                   FontSize="22"
                   FontAttributes="Bold"
                   TextColor="#1A1A1A" />

            <ScrollView Orientation="Horizontal" 
                        HorizontalScrollBarVisibility="Default"
                        Margin="0,0,0,8">

                <CollectionView ItemsSource="{Binding StatusFilters}"
                                SelectionMode="Single"
                                SelectedItem="{Binding SelectedFilter, Mode=TwoWay}"
                                BackgroundColor="Transparent">
                    <CollectionView.ItemsLayout>
                        <LinearItemsLayout Orientation="Horizontal"
                                           ItemSpacing="12" />
                    </CollectionView.ItemsLayout>
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="vm:OrderListViewModel+OrderFilterOption">
                            <Border Padding="16,10"
                                    StrokeThickness="0"
                                    BackgroundColor="#EEF1F5">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="22" />
                                </Border.StrokeShape>

                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup Name="SelectionStates">
                                        <VisualState Name="Normal">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor"
                                                        Value="#EEF1F5" />
                                                <Setter TargetName="FilterLabel"
                                                        Property="Label.TextColor"
                                                        Value="#4B5563" />
                                                <Setter TargetName="CountLabel"
                                                        Property="Label.TextColor"
                                                        Value="#9AA0B1" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState Name="Selected">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor"
                                                        Value="#3478F6" />
                                                <Setter TargetName="FilterLabel"
                                                        Property="Label.TextColor"
                                                        Value="#FFFFFF" />
                                                <Setter TargetName="CountLabel"
                                                        Property="Label.TextColor"
                                                        Value="#DCE7FF" />
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>

                                <HorizontalStackLayout Spacing="6">
                                    <Label x:Name="FilterLabel"
                                           Text="{Binding DisplayName}"
                                           FontSize="14"
                                           FontAttributes="Bold" />
                                    <Label x:Name="CountLabel"
                                           Text="{Binding CountDisplay}"
                                           FontSize="12" />
                                </HorizontalStackLayout>
                            </Border>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>
            </ScrollView>

        </VerticalStackLayout>

        <Grid Grid.Row="1">
            <CollectionView ItemsSource="{Binding Orders}"
                            SelectionMode="None"
                            BackgroundColor="Transparent"
                            ItemSizingStrategy="MeasureAllItems">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical"
                                       ItemSpacing="18" />
                </CollectionView.ItemsLayout>
                <CollectionView.EmptyView>
                    <VerticalStackLayout Spacing="8"
                                         Padding="0,60,0,0"
                                         HorizontalOptions="Center"
                                         VerticalOptions="Start">
                        <Label Text="暂无订单"
                               FontSize="18"
                               FontAttributes="Bold"
                               HorizontalTextAlignment="Center"
                               TextColor="#6B7280" />
                        <Label Text="赶快下单体验一下服务吧~"
                               FontSize="13"
                               HorizontalTextAlignment="Center"
                               TextColor="#9AA0B1" />
                    </VerticalStackLayout>
                </CollectionView.EmptyView>
                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="vm:OrderListViewModel+OrderListItem">
                        <Border Padding="16"
                                BackgroundColor="White"
                                StrokeThickness="1"
                                Stroke="#E6E8F0">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="18" />
                            </Border.StrokeShape>

                            <Grid ColumnDefinitions="Auto,*"
                                  ColumnSpacing="16">
                                <Border WidthRequest="76"
                                        HeightRequest="76"
                                        StrokeThickness="0"
                                        BackgroundColor="#F1F3F8"
                                        VerticalOptions="Start">
                                    <Border.StrokeShape>
                                        <RoundRectangle CornerRadius="14" />
                                    </Border.StrokeShape>
                                    <Image Source="{Binding ThumbnailUrl}"
                                           Aspect="AspectFill" />
                                </Border>

                                <VerticalStackLayout Grid.Column="1"
                                                     Spacing="8">
                                    <Grid ColumnDefinitions="*,Auto">
                                        <Label Text="{Binding ServiceTitle}"
                                               FontSize="16"
                                               FontAttributes="Bold"
                                               TextColor="#1F2933"
                                               LineBreakMode="TailTruncation" />
                                        <Border Grid.Column="1"
                                                Padding="10,4"
                                                BackgroundColor="{Binding StatusBadgeColor}"
                                                StrokeThickness="0"
                                                VerticalOptions="Start">
                                            <Border.StrokeShape>
                                                <RoundRectangle CornerRadius="12" />
                                            </Border.StrokeShape>
                                            <Label Text="{Binding StatusDisplay}"
                                                   FontSize="12"
                                                   TextColor="{Binding StatusTextColor}"
                                                   FontAttributes="Bold"
                                                   HorizontalTextAlignment="Center" />
                                        </Border>
                                    </Grid>

                                    <Label Text="{Binding OrderNumberDisplay}"
                                           FontSize="12"
                                           TextColor="#8E94A2" />

                                    <Grid ColumnDefinitions="*,Auto">
                                        <Label Text="{Binding OrderDateDisplay}"
                                               FontSize="12"
                                               TextColor="#8E94A2"
                                               VerticalOptions="Center" />
                                        <Label Grid.Column="1"
                                               Text="{Binding TotalPriceDisplay}"
                                               FontSize="16"
                                               FontAttributes="Bold"
                                               TextColor="#FF4D4F"
                                               VerticalOptions="Center" />
                                    </Grid>
                                    <Button Text="立即支付"
                                        HeightRequest="40"
                                        CornerRadius="20"
                                        Padding="0"
                                        BackgroundColor="#5B61FF"
                                        TextColor="White"
                                        FontSize="14"
                                        HorizontalOptions="End"
                                        CommandParameter="{Binding OrderId}"
                                        IsVisible="{Binding IsPendingPayment}"
                                        Clicked="OnPayOrderClicked" />

                                <Button Text="&#21435;&#35780;&#20215;"
                                        HeightRequest="40"
                                        Margin="0,8,0,0"
                                        CornerRadius="20"
                                        Padding="0"
                                        BackgroundColor="#FF8A3D"
                                        TextColor="White"
                                        FontSize="14"
                                        HorizontalOptions="End"
                                        CommandParameter="{Binding OrderId}"
                                        IsVisible="{Binding CanReview}"
                                        Clicked="OnReviewOrderClicked" />

                                </VerticalStackLayout>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>

            <ActivityIndicator IsRunning="{Binding IsLoading}"
                               IsVisible="{Binding IsLoading}"
                               Color="#3478F6"
                               WidthRequest="32"
                               HeightRequest="32"
                               HorizontalOptions="Center"
                               VerticalOptions="Center" />
        </Grid>
    </Grid>
</ContentPage>


】

Views/OrderListPage.xaml.cs:
【using System;
using Microsoft.Maui.Controls;
using GamerLinkApp.Helpers;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(InitialStatusKey), "status")]
public partial class OrderListPage : ContentPage
{
    public OrderListPage()
        : this(ServiceHelper.GetRequiredService<OrderListViewModel>())
    {
    }

    public OrderListPage(OrderListViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }

    public string InitialStatusKey
    {
        set
        {
            if (BindingContext is OrderListViewModel vm && !string.IsNullOrEmpty(value))
            {
                vm.SetInitialFilter(value);
            }
        }
    }

    protected override void OnAppearing()
    {
        base.OnAppearing();

        if (BindingContext is OrderListViewModel vm)
        {
            _ = vm.RefreshAsync();
        }
    }

    private async void OnPayOrderClicked(object sender, EventArgs e)
    {
        if ((sender as Button)?.BindingContext is not OrderListViewModel.OrderListItem item)
        {
            return;
        }

        if (Shell.Current is null)
        {
            return;
        }

        await Shell.Current.GoToAsync($"{nameof(OrderPaymentPage)}?orderId={item.OrderId}");
    }

    private async void OnReviewOrderClicked(object sender, EventArgs e)
    {
        if ((sender as Button)?.BindingContext is not OrderListViewModel.OrderListItem item)
        {
            return;
        }

        if (Shell.Current is null)
        {
            return;
        }

        await Shell.Current.GoToAsync($"{nameof(OrderReviewPage)}?orderId={item.OrderId}");
    }
}
】

Views/OrderPaymentPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.OrderPaymentPage"
             x:DataType="vm:OrderPaymentViewModel"
             Title="订单支付"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="*,Auto">
        <ScrollView Grid.Row="0"
                    Padding="20,16"
                    IsVisible="False">
            <ScrollView.Triggers>
                <DataTrigger TargetType="ScrollView"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="True" />
                </DataTrigger>
            </ScrollView.Triggers>
            <VerticalStackLayout Spacing="18">
                <Border BackgroundColor="White"
                        Padding="16"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <Grid ColumnDefinitions="Auto,*"
                          ColumnSpacing="16">
                        <Border WidthRequest="88"
                                HeightRequest="88"
                                StrokeThickness="0"
                                BackgroundColor="#EEF1F5"
                                VerticalOptions="Start">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="14" />
                            </Border.StrokeShape>
                            <Image Source="{Binding Service.ThumbnailUrl}"
                                   Aspect="AspectFill" />
                        </Border>

                        <VerticalStackLayout Grid.Column="1"
                                             Spacing="10">
                            <Label Text="{Binding ServiceName}"
                                   FontSize="20"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="{Binding Service.GameName, StringFormat='关联游戏：{0}'}"
                                   FontSize="14"
                                   TextColor="#6B7280" />
                            <Label Text="{Binding Service.ServiceType, StringFormat='服务类型：{0}'}"
                                   FontSize="14"
                                   TextColor="#6B7280" />
                        </VerticalStackLayout>
                    </Grid>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="14">
                        <Label Text="订单信息"
                               FontSize="16"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <VerticalStackLayout Spacing="8">
                            <Label Text="{Binding OrderNumberDisplay}"
                                   FontSize="13"
                                   TextColor="#434A59" />
                            <Label Text="{Binding OrderDateDisplay, StringFormat='下单时间：{0}'}"
                                   FontSize="13"
                                   TextColor="#434A59" />
                            <Label Text="{Binding OrderStatusDisplay, StringFormat='当前状态：{0}'}"
                                   FontSize="13"
                                   TextColor="#434A59" />
                        </VerticalStackLayout>
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

        <VerticalStackLayout Grid.Row="0"
                             Spacing="10"
                             Padding="20"
                             HorizontalOptions="Center"
                             VerticalOptions="Center"
                             IsVisible="True">
            <VerticalStackLayout.Triggers>
                <DataTrigger TargetType="VerticalStackLayout"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="False" />
                </DataTrigger>
            </VerticalStackLayout.Triggers>
            <Label Text="未找到订单"
                   FontSize="20"
                   FontAttributes="Bold"
                   TextColor="#1A1A1A" />
            <Label Text="请返回重试或在订单列表中重新选择。"
                   FontSize="14"
                   TextColor="#6B7280"
                   HorizontalTextAlignment="Center" />
        </VerticalStackLayout>

        <Grid Grid.Row="1"
              BackgroundColor="White"
              Padding="20,16"
              ColumnDefinitions="*,Auto"
              IsVisible="False">
            <Grid.Triggers>
                <DataTrigger TargetType="Grid"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="True" />
                </DataTrigger>
            </Grid.Triggers>
            <VerticalStackLayout Spacing="4"
                                  VerticalOptions="Center">
                <Label Text="支付金额"
                       FontSize="12"
                       TextColor="#7B8596" />
                <Label Text="{Binding PaymentAmountDisplay}"
                       FontSize="24"
                       FontAttributes="Bold"
                       TextColor="#FF4D4F" />
            </VerticalStackLayout>
            <Button Grid.Column="1"
                    Text="确认支付"
                    HeightRequest="48"
                    WidthRequest="160"
                    CornerRadius="24"
                    BackgroundColor="#5B61FF"
                    TextColor="White"
                    FontAttributes="Bold"
                    IsEnabled="{Binding CanPay}"
                    Clicked="OnPayClicked" />
        </Grid>

        <ActivityIndicator Grid.RowSpan="2"
                           IsRunning="{Binding IsLoading}"
                           IsVisible="{Binding IsLoading}"
                           Color="#3478F6"
                           WidthRequest="48"
                           HeightRequest="48"
                           HorizontalOptions="Center"
                           VerticalOptions="Center" />
    </Grid>
</ContentPage>
】

Views/OrderPaymentPage.xaml.cs:
【﻿using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(OrderId), "orderId")]
public partial class OrderPaymentPage : ContentPage
{
    private readonly OrderPaymentViewModel _viewModel;
    private int _orderId;

    public OrderPaymentPage()
        : this(ServiceHelper.GetRequiredService<OrderPaymentViewModel>())
    {
    }

    public OrderPaymentPage(OrderPaymentViewModel viewModel)
    {
        InitializeComponent();
        _viewModel = viewModel;
        BindingContext = _viewModel;
    }

    public int OrderId
    {
        set
        {
            if (value <= 0)
            {
                return;
            }

            if (_orderId == value && _viewModel.HasOrder)
            {
                return;
            }

            _orderId = value;
            _ = _viewModel.LoadAsync(value);
        }
    }

    protected override void OnAppearing()
    {
        base.OnAppearing();

        if (_orderId > 0 && !_viewModel.HasOrder && !_viewModel.IsLoading)
        {
            _ = _viewModel.LoadAsync(_orderId);
        }
    }

    private async void OnPayClicked(object sender, EventArgs e)
    {
        var (success, errorMessage) = await _viewModel.PayAsync();

        if (!success)
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                await DisplayAlert("提示", errorMessage, "确定");
            }

            return;
        }

        var navigateToOrders = await DisplayAlert("支付成功", "订单已支付，正在为你安排服务。", "前往订单", "留在此页");
        if (navigateToOrders && Shell.Current is not null)
        {
            await Shell.Current.GoToAsync($"{nameof(OrderListPage)}?status={nameof(OrderStatus.Ongoing)}");
        }
    }
}
】

Views/OrderReviewPage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.OrderReviewPage"
             x:DataType="vm:OrderReviewViewModel"
             Title="&#35780;&#20215;&#35746;&#21333;"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="*,Auto">
        <ScrollView Grid.Row="0"
                    Padding="20,16"
                    IsVisible="False">
            <ScrollView.Triggers>
                <DataTrigger TargetType="ScrollView"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="True" />
                </DataTrigger>
            </ScrollView.Triggers>
            <VerticalStackLayout Spacing="18">
                <Border BackgroundColor="White"
                        Padding="16"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <Grid ColumnDefinitions="Auto,*"
                          ColumnSpacing="16">
                        <Border WidthRequest="88"
                                HeightRequest="88"
                                StrokeThickness="0"
                                BackgroundColor="#EEF1F5"
                                VerticalOptions="Start">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="14" />
                            </Border.StrokeShape>
                            <Image Source="{Binding Service.ThumbnailUrl}"
                                   Aspect="AspectFill" />
                        </Border>

                        <VerticalStackLayout Grid.Column="1"
                                             Spacing="10">
                            <Label Text="{Binding ServiceName}"
                                   FontSize="20"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="{Binding Service.GameName, StringFormat='&#25152;&#23646;&#28216;&#25103;&#65306;{0}', TargetNullValue='&#25152;&#23646;&#28216;&#25103;&#65306;-'}"
                                   FontSize="14"
                                   TextColor="#6B7280" />
                            <Label Text="{Binding Service.ServiceType, StringFormat='&#26381;&#21153;&#31867;&#22411;&#65306;{0}', TargetNullValue='&#26381;&#21153;&#31867;&#22411;&#65306;-'}"
                                   FontSize="14"
                                   TextColor="#6B7280" />
                        </VerticalStackLayout>
                    </Grid>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="12">
                        <Label Text="&#35746;&#21333;&#20449;&#24687;"
                               FontSize="16"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <Label Text="{Binding OrderNumberDisplay}"
                               FontSize="13"
                               TextColor="#434A59" />
                        <Label Text="{Binding OrderDateDisplay, StringFormat='&#19979;&#21333;&#26102;&#38388;&#65306;{0}'}"
                               FontSize="13"
                               TextColor="#434A59" />
                        <Label Text="{Binding OrderStatusDisplay, StringFormat='&#24403;&#21069;&#29366;&#24577;&#65306;{0}'}"
                               FontSize="13"
                               TextColor="#434A59" />
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="16">
                        <VerticalStackLayout Spacing="4">
                            <Label Text="&#32508;&#21512;&#35780;&#20998;"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="&#35831;&#36873;&#25321; 1-5 &#20998;&#30340;&#35780;&#20998;&#65292;5 &#20998;&#20195;&#34920;&#38750;&#24120;&#28385;&#24847;"
                                   FontSize="12"
                                   TextColor="#87909F" />
                        </VerticalStackLayout>

                        <HorizontalStackLayout Spacing="12"
                                               VerticalOptions="Center">
                            <HorizontalStackLayout BindableLayout.ItemsSource="{Binding RatingStars}"
                                                   Spacing="6">
                                <BindableLayout.ItemTemplate>
                                    <DataTemplate x:DataType="vm:OrderReviewViewModel+RatingStarItem">
                                        <Grid>
                                            <Label Text="★"
                                                   FontSize="28"
                                                   TextColor="#D0D5DD">
                                                <Label.Triggers>
                                                    <DataTrigger TargetType="Label"
                                                                 Binding="{Binding IsFilled}"
                                                                 Value="True">
                                                        <Setter Property="TextColor" Value="#FFB400" />
                                                    </DataTrigger>
                                                </Label.Triggers>
                                            </Label>
                                            <Grid.GestureRecognizers>
                                                <TapGestureRecognizer Tapped="OnRatingStarTapped"
                                                                      CommandParameter="{Binding Value}" />
                                            </Grid.GestureRecognizers>
                                        </Grid>
                                    </DataTemplate>
                                </BindableLayout.ItemTemplate>
                            </HorizontalStackLayout>
                            <Label Text="{Binding RatingDisplay}"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#3478F6" />
                        </HorizontalStackLayout>

                        <VerticalStackLayout Spacing="4">
                            <Label Text="&#35780;&#20215;&#20869;&#23481;"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="&#33267;&#23569;&#22635;&#20889; 5 &#20010;&#23383;&#65292;&#24110;&#21161;&#26356;&#22810;&#29609;&#23478;&#20102;&#35299;&#23454;&#38469;&#20307;&#39564;"
                                   FontSize="12"
                                   TextColor="#87909F" />
                        </VerticalStackLayout>

                        <Editor Text="{Binding Comment, Mode=TwoWay}"
                                AutoSize="TextChanges"
                                HeightRequest="150"
                                MaxLength="200"
                                Placeholder="&#35831;&#20889;&#19979;&#26412;&#27425;&#26381;&#21153;&#20307;&#39564;"
                                TextColor="#1A1A1A">
                            <Editor.Triggers>
                                <DataTrigger TargetType="Editor"
                                             Binding="{Binding IsCommentReadOnly}"
                                             Value="True">
                                    <Setter Property="IsReadOnly" Value="True" />
                                    <Setter Property="TextColor" Value="#6B7280" />
                                </DataTrigger>
                            </Editor.Triggers>
                        </Editor>
                        <Label Text="{Binding CommentLengthIndicator}"
                               FontSize="12"
                               TextColor="#9AA0B1"
                               HorizontalOptions="End" />

                        <Border BackgroundColor="#F6F7FB"
                                Padding="12"
                                IsVisible="False">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="12" />
                            </Border.StrokeShape>
                            <Border.Triggers>
                                <DataTrigger TargetType="Border"
                                             Binding="{Binding IsAlreadyReviewed}"
                                             Value="True">
                                    <Setter Property="IsVisible" Value="True" />
                                </DataTrigger>
                            </Border.Triggers>
                            <Label Text="&#35813;&#35746;&#21333;&#24050;&#23436;&#25104;&#35780;&#20215;&#65292;&#22914;&#38656;&#20462;&#25913;&#35831;&#32852;&#31995;&#24179;&#21488;&#23458;&#26381;"
                                   FontSize="13"
                                   TextColor="#5A6475" />
                        </Border>
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

        <VerticalStackLayout Grid.Row="0"
                             Spacing="10"
                             Padding="20"
                             HorizontalOptions="Center"
                             VerticalOptions="Center"
                             IsVisible="True">
            <VerticalStackLayout.Triggers>
                <DataTrigger TargetType="VerticalStackLayout"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="False" />
                </DataTrigger>
            </VerticalStackLayout.Triggers>
            <Label Text="&#26242;&#26080;&#21487;&#35780;&#20215;&#30340;&#35746;&#21333;"
                   FontSize="20"
                   FontAttributes="Bold"
                   TextColor="#1A1A1A" />
            <Label Text="&#35831;&#36820;&#22238;&#35746;&#21333;&#20013;&#24515;&#36873;&#25321;&#19968;&#31508;&#24453;&#35780;&#20215;&#30340;&#35746;&#21333;"
                   FontSize="14"
                   TextColor="#6B7280"
                   HorizontalTextAlignment="Center" />
        </VerticalStackLayout>

        <Button Grid.Row="1"
                Text="{Binding SubmitButtonText}"
                HeightRequest="48"
                Margin="20,12"
                CornerRadius="24"
                BackgroundColor="#5B61FF"
                TextColor="White"
                FontAttributes="Bold"
                IsEnabled="{Binding CanSubmit}"
                IsVisible="{Binding HasOrder}"
                Clicked="OnSubmitClicked" />

        <ActivityIndicator Grid.RowSpan="2"
                           IsRunning="{Binding IsBusy}"
                           IsVisible="{Binding IsBusy}"
                           Color="#3478F6"
                           WidthRequest="48"
                           HeightRequest="48"
                           HorizontalOptions="Center"
                           VerticalOptions="Center" />
    </Grid>
</ContentPage>】

Views/OrderReviewPage.xaml.cs:
【using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(OrderId), "orderId")]
public partial class OrderReviewPage : ContentPage
{
    private readonly OrderReviewViewModel _viewModel;
    private int _orderId;

    public OrderReviewPage()
        : this(ServiceHelper.GetRequiredService<OrderReviewViewModel>())
    {
    }

    public OrderReviewPage(OrderReviewViewModel viewModel)
    {
        InitializeComponent();
        _viewModel = viewModel;
        BindingContext = _viewModel;
    }

    public int OrderId
    {
        set
        {
            if (value <= 0)
            {
                return;
            }

            if (_orderId == value && _viewModel.HasOrder)
            {
                return;
            }

            _orderId = value;
            _ = _viewModel.LoadAsync(value);
        }
    }

    protected override void OnAppearing()
    {
        base.OnAppearing();

        if (_orderId > 0 && !_viewModel.IsBusy && !_viewModel.HasOrder)
        {
            _ = _viewModel.LoadAsync(_orderId);
        }
    }

    private async void OnSubmitClicked(object sender, EventArgs e)
    {
        var (success, errorMessage) = await _viewModel.SubmitAsync();

        if (!success)
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                await DisplayAlert("��ʾ", errorMessage, "ȷ��");
            }

            return;
        }

        var goToOrders = await DisplayAlert("���۳ɹ�", "��л���ķ���������״̬�Ѹ���Ϊ����ɡ�", "���ض���", "���ڱ�ҳ");
        if (goToOrders && Shell.Current is not null)
        {
            await Shell.Current.GoToAsync("..");
        }
    }
    private void OnRatingStarTapped(object sender, TappedEventArgs e)
    {
        if (_viewModel.IsRatingReadOnly)
        {
            return;
        }

        if (e.Parameter is int value && value >= 1 && value <= 5)
        {
            _viewModel.Rating = value;
        }
    }


}

】

Views/ProfilePage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.ProfilePage"
             x:DataType="vm:ProfileViewModel"
             Title="个人"
             BackgroundColor="#F4F5F7">
    <Grid RowDefinitions="Auto,*">
        <ScrollView Grid.Row="1"
                    Padding="0,12,0,24">
            <VerticalStackLayout Spacing="18"
                                  Padding="20,0,20,0">
                <Border Padding="24,32"
                        StrokeThickness="0"
                        BackgroundColor="Transparent">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                            <GradientStop Color="#E9F0FF" Offset="0" />
                            <GradientStop Color="#FFE9F3" Offset="1" />
                        </LinearGradientBrush>
                    </Border.Background>
                    <VerticalStackLayout Spacing="14"
                                          HorizontalOptions="Center"
                                          VerticalOptions="Center">
                        <Border WidthRequest="96"
                                HeightRequest="96"
                                StrokeThickness="0"
                                BackgroundColor="#1A1A1A"
                                HorizontalOptions="Center"
                                VerticalOptions="Center">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="48" />
                            </Border.StrokeShape>
                            <Image Source="{Binding CurrentUser.AvatarUrl}"
                                   Aspect="AspectFill" />
                        </Border>
                        <Label Text="{Binding CurrentUser.Nickname}"
                               FontSize="19"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A"
                               HorizontalOptions="Center" />
                        <Label Text="{Binding CurrentUser.Username, StringFormat='ID: {0}'}"
                               FontSize="14"
                               TextColor="#666666"
                               HorizontalOptions="Center" />
                        <Label Text="{Binding TotalPaid, StringFormat='累计消费 ￥{0:F0}'}"
                               FontSize="13"
                               TextColor="#80869A"
                               HorizontalOptions="Center" />
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="20" />
                    </Border.StrokeShape>
                    <Border.Shadow>
                        <Shadow Brush="#14000000"
                                Offset="0,6"
                                Radius="12" />
                    </Border.Shadow>
                    <VerticalStackLayout Spacing="20">
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="订单"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="全部订单"
                                   Grid.Column="1"
                                   FontSize="14"
                                   TextColor="#00AEEF">
                                <Label.GestureRecognizers>
                                    <TapGestureRecognizer Tapped="OnAllOrdersTapped" />
                                </Label.GestureRecognizers>
                            </Label>
                        </Grid>

                        <CollectionView ItemsSource="{Binding OrderStatuses}"
                                        SelectionMode="None">
                            <CollectionView.ItemsLayout>
                                <GridItemsLayout Orientation="Vertical"
                                                 Span="4"
                                                 HorizontalItemSpacing="18" />
                            </CollectionView.ItemsLayout>
                            <CollectionView.ItemTemplate>
                                <DataTemplate x:DataType="vm:ProfileViewModel+OrderStatusItem">
                                    <VerticalStackLayout Spacing="8"
                                                          HorizontalOptions="Center"
                                                          VerticalOptions="Center">
                                        <!-- ▼▼▼ 在这里添加手势识别器 ▼▼▼ -->
                                        <VerticalStackLayout.GestureRecognizers>
                                            <TapGestureRecognizer
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type vm:ProfileViewModel}}, Path=OrderStatusTappedCommand}"
                                                CommandParameter="{Binding .}" />
                                        </VerticalStackLayout.GestureRecognizers>
                                        <!-- ▲▲▲ 添加结束 ▲▲▲ -->
                                        <Border WidthRequest="52"
                                                HeightRequest="52"
                                                StrokeThickness="0"
                                                BackgroundColor="#F5F7FA">
                                            <Border.StrokeShape>
                                                <RoundRectangle CornerRadius="26" />
                                            </Border.StrokeShape>
                                            <Label Text="{Binding Symbol}"
                                                   FontSize="20"
                                                   TextColor="#1A1A1A"
                                                   HorizontalOptions="Center"
                                                   VerticalOptions="Center"
                                                   HorizontalTextAlignment="Center" />
                                        </Border>
                                        <Label Text="{Binding DisplayName}"
                                               FontSize="13"
                                               TextColor="#444444"
                                               HorizontalOptions="Center"
                                               HorizontalTextAlignment="Center" />
                                        <Label Text="{Binding Count, StringFormat='({0})'}"
                                               FontSize="12"
                                               TextColor="#80869A"
                                               HorizontalOptions="Center" />
                                    </VerticalStackLayout>
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="20" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="12">
                        <Grid ColumnDefinitions="*,Auto">
                            <Label Text="已完成服务"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text="{Binding CompletedOrders, StringFormat='{0} 个'}"
                                   Grid.Column="1"
                                   FontSize="15"
                                   FontAttributes="Bold"
                                   TextColor="#5B61FF" />
                        </Grid>
                    </VerticalStackLayout>
                </Border>

                <VerticalStackLayout Spacing="12">
                    <Border BackgroundColor="White"
                            Padding="16"
                            StrokeThickness="0">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="16" />
                        </Border.StrokeShape>
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="关于我们"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text=">"
                                   Grid.Column="1"
                                   FontSize="16"
                                   TextColor="#C0C0C0" />
                        </Grid>
                    </Border>

                    <Border BackgroundColor="White"
                            Padding="16"
                            StrokeThickness="0">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="16" />
                        </Border.StrokeShape>
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="设置"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text=">"
                                   Grid.Column="1"
                                   FontSize="16"
                                   TextColor="#C0C0C0" />
                        </Grid>
                    </Border>
                </VerticalStackLayout>
            </VerticalStackLayout>
        </ScrollView>
    </Grid>
</ContentPage>
】

Views/ProfilePage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ProfilePage : ContentPage
{
    public ProfilePage(ProfileViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
    public ProfilePage()
    {
        InitializeComponent();
    }

    private async void OnAllOrdersTapped(object sender, TappedEventArgs e)
    {
        await Shell.Current.GoToAsync(nameof(OrderListPage));
    }
}】

Views/ServiceDetailPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             xmlns:models="clr-namespace:GamerLinkApp.Models"
             x:Class="GamerLinkApp.Views.ServiceDetailPage"
             x:DataType="vm:ServiceDetailViewModel"
             Title="服务详情"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="Auto,*,Auto">
        <ScrollView Grid.Row="1"
                    Padding="0,12,0,0">
            <VerticalStackLayout Spacing="18"
                                  Padding="20,0,20,120">
                <Border HeightRequest="220"
                        StrokeThickness="0"
                        BackgroundColor="#D9D9D9">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="26" />
                    </Border.StrokeShape>
                    <Grid>
                        <Image Source="{Binding SelectedService.ThumbnailUrl}"
                               Aspect="AspectFill" />
                        <Grid>
                            <Grid.Background>
                                <LinearGradientBrush StartPoint="0,0.4" EndPoint="0,1">
                                    <GradientStop Color="#00000000" Offset="0" />
                                    <GradientStop Color="#A6000000" Offset="1" />
                                </LinearGradientBrush>
                            </Grid.Background>
                        </Grid>
                        <VerticalStackLayout Spacing="6"
                                              Padding="20,20,20,24"
                                              VerticalOptions="End">
                            <Label Text="{Binding SelectedService.GameName}"
                                   FontSize="14"
                                   TextColor="#F2F5FF"
                                   Opacity="0.9" />
                            <Label Text="{Binding SelectedService.Title}"
                                   FontSize="22"
                                   FontAttributes="Bold"
                                   TextColor="White"
                                   LineBreakMode="TailTruncation" />
                            <Label Text="{Binding SelectedService.ServiceType, StringFormat='服务类型: {0}'}"
                                   FontSize="13"
                                   TextColor="#F2F5FF"
                                   Opacity="0.9" />
                        </VerticalStackLayout>
                    </Grid>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="16">
                        <HorizontalStackLayout Spacing="12"
                                                VerticalOptions="Center">
                            <Label Text="服务亮点"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Border BackgroundColor="#EEF0FF"
                                    Padding="10,4"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="12" />
                                </Border.StrokeShape>
                                <Border.Triggers>
                                    <DataTrigger TargetType="Border"
                                                 Binding="{Binding SelectedService.Category}"
                                                 Value="">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                    <DataTrigger TargetType="Border"
                                                 Binding="{Binding SelectedService.Category}"
                                                 Value="{x:Null}">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                </Border.Triggers>
                                <Label Text="{Binding SelectedService.Category}"
                                       FontSize="13"
                                       TextColor="#5B61FF"
                                       FontAttributes="Bold" />
                            </Border>
                        </HorizontalStackLayout>

                        <FlexLayout BindableLayout.ItemsSource="{Binding SelectedService.Tags}"
                                   Wrap="Wrap"
                                   AlignItems="Center"
                                   AlignContent="Start"
                                   JustifyContent="Start"
                                   Margin="0,4,0,0">
                            <BindableLayout.ItemTemplate>
                                <DataTemplate x:DataType="x:String">
                                    <Border BackgroundColor="#F3F4FF"
                                            Margin="0,0,8,8"
                                            Padding="10,6"
                                            StrokeThickness="0">
                                        <Border.StrokeShape>
                                            <RoundRectangle CornerRadius="14" />
                                        </Border.StrokeShape>
                                        <Label Text="{Binding .}"
                                               FontSize="13"
                                               TextColor="#5B61FF" />
                                    </Border>
                                </DataTemplate>
                            </BindableLayout.ItemTemplate>
                        </FlexLayout>

                        <Grid ColumnDefinitions="*,*"
                              ColumnSpacing="12">
                            <Border BackgroundColor="#F9FAFC"
                                    Padding="16"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="18" />
                                </Border.StrokeShape>
                                <VerticalStackLayout Spacing="6">
                                    <Label Text="评分"
                                           FontSize="13"
                                           TextColor="#727C8C" />
                                    <Label Text="{Binding SelectedService.AverageRating, StringFormat='{0:F1}'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F" />
                                    <Label Text="{Binding SelectedService.ReviewCount, StringFormat='{0}条评价'}"
                                           FontSize="12"
                                           TextColor="#9AA0AE" />
                                </VerticalStackLayout>
                            </Border>

                            <Border Grid.Column="1"
                                    BackgroundColor="#F9FAFC"
                                    Padding="16"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="18" />
                                </Border.StrokeShape>
                                <VerticalStackLayout Spacing="6">
                                    <Label Text="成交"
                                           FontSize="13"
                                           TextColor="#727C8C" />
                                    <Label Text="{Binding SelectedService.PurchaseCount, StringFormat='{0}人购买'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F" />
                                    <Label Text="{Binding SelectedService.CompletedCount, StringFormat='已完成{0}单'}"
                                           FontSize="12"
                                           TextColor="#9AA0AE" />
                                </VerticalStackLayout>
                            </Border>
                        </Grid>
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="12">
                        <Label Text="服务介绍"
                               FontSize="16"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <Label Text="{Binding SelectedService.Description}"
                               FontSize="14"
                               TextColor="#434A59"
                               LineHeight="1.4" />
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="18">
                        <Grid ColumnDefinitions="Auto,*"
                              RowDefinitions="Auto,Auto">
                            <VerticalStackLayout Spacing="4">
                                <Label Text="玩家评价"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#1A1A1A" />
                                <Label Text="{Binding ReviewCountDisplay}"
                                       FontSize="12"
                                       TextColor="#727C8C" />
                            </VerticalStackLayout>
                            <VerticalStackLayout Grid.Column="1"
                                                 Spacing="4"
                                                 HorizontalOptions="End">
                                <Label Text="{Binding AverageRatingDisplay}"
                                       FontSize="28"
                                       FontAttributes="Bold"
                                       TextColor="#FFB400"
                                       HorizontalOptions="End" />
                                <Label Text="综合评分"
                                       FontSize="12"
                                       TextColor="#9AA0AE"
                                       HorizontalOptions="End" />
                            </VerticalStackLayout>
                        </Grid>

                        <ActivityIndicator IsRunning="{Binding IsReviewsLoading}"
                                           IsVisible="{Binding IsReviewsLoading}"
                                           Color="#3478F6"
                                           HorizontalOptions="Center" />

                        <Border BackgroundColor="#F6F7FB"
                                Padding="16"
                                StrokeThickness="0"
                                IsVisible="{Binding IsReviewsEmpty}">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="16" />
                            </Border.StrokeShape>
                            <Label Text="暂无评价，快来抢沙发~"
                                   FontSize="13"
                                   TextColor="#5A6475" />
                        </Border>

                        <CollectionView ItemsSource="{Binding Reviews}"
                                        IsVisible="{Binding HasReviews}"
                                        SelectionMode="None">
                            <CollectionView.ItemsLayout>
                                <LinearItemsLayout Orientation="Vertical"
                                                   ItemSpacing="14" />
                            </CollectionView.ItemsLayout>
                            <CollectionView.ItemTemplate>
                                <DataTemplate x:DataType="models:ServiceReviewInfo">
                                    <Border BackgroundColor="#F9FAFC"
                                            Padding="16"
                                            StrokeThickness="0">
                                        <Border.StrokeShape>
                                            <RoundRectangle CornerRadius="18" />
                                        </Border.StrokeShape>
                                        <Grid ColumnDefinitions="Auto,*"
                                              ColumnSpacing="14">
                                            <Border WidthRequest="48"
                                                    HeightRequest="48"
                                                    StrokeThickness="0"
                                                    BackgroundColor="#5B61FF"
                                                    HorizontalOptions="Start"
                                                    VerticalOptions="Start">
                                                <Border.StrokeShape>
                                                    <RoundRectangle CornerRadius="16" />
                                                </Border.StrokeShape>
                                                <Grid>
                                                    <Image Source="{Binding UserAvatarUrl}"
                                                           Aspect="AspectFill"
                                                           IsVisible="True">
                                                        <Image.Triggers>
                                                            <DataTrigger TargetType="Image"
                                                                         Binding="{Binding UserAvatarUrl}"
                                                                         Value="">
                                                                <Setter Property="IsVisible" Value="False" />
                                                            </DataTrigger>
                                                            <DataTrigger TargetType="Image"
                                                                         Binding="{Binding UserAvatarUrl}"
                                                                         Value="{x:Null}">
                                                                <Setter Property="IsVisible" Value="False" />
                                                            </DataTrigger>
                                                        </Image.Triggers>
                                                    </Image>
                                                    <Label Text="{Binding UserInitial}"
                                                           HorizontalOptions="Center"
                                                           VerticalOptions="Center"
                                                           FontAttributes="Bold"
                                                           TextColor="White"
                                                           IsVisible="False">
                                                        <Label.Triggers>
                                                            <DataTrigger TargetType="Label"
                                                                         Binding="{Binding UserAvatarUrl}"
                                                                         Value="">
                                                                <Setter Property="IsVisible" Value="True" />
                                                            </DataTrigger>
                                                            <DataTrigger TargetType="Label"
                                                                         Binding="{Binding UserAvatarUrl}"
                                                                         Value="{x:Null}">
                                                                <Setter Property="IsVisible" Value="True" />
                                                            </DataTrigger>
                                                        </Label.Triggers>
                                                    </Label>
                                                </Grid>
                                            </Border>

                                            <VerticalStackLayout Grid.Column="1"
                                                                 Spacing="6">
                                                <Grid ColumnDefinitions="*,Auto">
                                                    <Label Text="{Binding UserNickname}"
                                                           FontSize="15"
                                                           FontAttributes="Bold"
                                                           TextColor="#1A1A1A" />
                                                    <HorizontalStackLayout Grid.Column="1"
                                                                           Spacing="4"
                                                                           HorizontalOptions="End"
                                                                           VerticalOptions="Center">
                                                        <Label Text="{Binding Rating}"
                                                               FontSize="14"
                                                               TextColor="#FFB400"
                                                               FontAttributes="Bold" />
                                                        <Label Text="分"
                                                               FontSize="12"
                                                               TextColor="#FFB400" />
                                                    </HorizontalStackLayout>
                                                </Grid>
                                                <Label Text="{Binding ReviewDateDisplay}"
                                                       FontSize="12"
                                                       TextColor="#9AA0AE" />
                                                <Label Text="{Binding Comment}"
                                                       FontSize="14"
                                                       TextColor="#434A59"
                                                       LineHeight="1.4" />
                                            </VerticalStackLayout>
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

        <Grid Grid.Row="2"
              BackgroundColor="White"
              Padding="20,12,20,24"
              ColumnDefinitions="*,Auto">
            <VerticalStackLayout Spacing="4"
                                  VerticalOptions="Center">
                <Label Text="当前价格"
                       FontSize="12"
                       TextColor="#7B8596" />
                <Label Text="{Binding SelectedService.Price, StringFormat='￥{0:F0}'}"
                       FontSize="22"
                       FontAttributes="Bold"
                       TextColor="#FF4D4F" />
            </VerticalStackLayout>
            <Button Grid.Column="1"
                    Text="立即下单"
                    HeightRequest="48"
                    WidthRequest="160"
                    CornerRadius="24"
                    IsEnabled="{Binding CanPlaceOrder}"
                    BackgroundColor="#5B61FF"
                    TextColor="White"
                    FontAttributes="Bold"
                    Clicked="OnPlaceOrderClicked" />
        </Grid>
    </Grid>
</ContentPage>
】

Views/ServiceDetailPage.xaml.cs:
【﻿using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(ServiceId), "id")]
public partial class ServiceDetailPage : ContentPage
{
    private readonly ServiceDetailViewModel _viewModel;

    public ServiceDetailPage()
        : this(ServiceHelper.GetRequiredService<ServiceDetailViewModel>())
    {
    }

    public ServiceDetailPage(ServiceDetailViewModel vm)
    {
        InitializeComponent();
        _viewModel = vm;
        BindingContext = _viewModel;
    }

    public string? ServiceId
    {
        set
        {
            if (int.TryParse(value, out var id))
            {
                _viewModel.ServiceId = id;
            }
        }
    }

    private async void OnPlaceOrderClicked(object sender, EventArgs e)
    {
        var (success, errorMessage, order) = await _viewModel.PlaceOrderAsync();

        if (!success)
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                await DisplayAlert("提示", errorMessage, "确定");
            }

            return;
        }

        if (order is null)
        {
            return;
        }

        var orderNumber = $"订单号：{order.Id:D6}\n";
        var navigateToPayment = await DisplayAlert("下单成功", $"{orderNumber}已生成待支付订单，是否立即支付？", "去支付", "稍后再说");
        if (navigateToPayment && Shell.Current is not null)
        {
            await Shell.Current.GoToAsync($"{nameof(OrderPaymentPage)}?orderId={order.Id}");
            return;
        }

        if (Shell.Current is not null)
        {
            await Shell.Current.GoToAsync($"{nameof(OrderListPage)}?status={nameof(OrderStatus.PendingPayment)}");
        }
    }

}
】

Views/ServiceListPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:models="clr-namespace:GamerLinkApp.Models"
             x:Class="GamerLinkApp.Views.ServiceListPage"
             Title="服务列表"
             BackgroundColor="#F5F6F9">
    <ContentPage.Resources>
        <Thickness x:Key="PagePadding">20,16,20,0</Thickness>
    </ContentPage.Resources>

    <CollectionView ItemsSource="{Binding Services}"
                    SelectionMode="None"
                    BackgroundColor="Transparent"
                    ItemSizingStrategy="MeasureAllItems">
        <CollectionView.ItemsLayout>
            <LinearItemsLayout Orientation="Vertical"
                               ItemSpacing="0" />
        </CollectionView.ItemsLayout>

        <CollectionView.Header>
            <VerticalStackLayout Spacing="24"
                                  Padding="{StaticResource PagePadding}">
                <Frame Padding="14,12"
                       CornerRadius="24"
                       BackgroundColor="White"
                       HasShadow="False"
                       BorderColor="#EEEEEE">
                    <Frame.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnSearchAreaTapped" />
                    </Frame.GestureRecognizers>
                    <Grid ColumnDefinitions="Auto,*"
                          ColumnSpacing="12"
                          VerticalOptions="Center"
                          HorizontalOptions="FillAndExpand">
                        <Image Grid.Column="0"
                               HeightRequest="20"
                               WidthRequest="20"
                               VerticalOptions="Center"
                               InputTransparent="True"
                               Source="https://img.icons8.com/ios-glyphs/30/9AA0B1/search--v1.png" />
                        <Entry x:Name="SearchEntry"
                               Grid.Column="1"
                               Placeholder="搜索服务或者向导"
                               PlaceholderColor="#9AA0B1"
                               TextColor="#2A2F3C"
                               FontSize="14"
                               VerticalOptions="Center"
                               HorizontalOptions="FillAndExpand"
                               BackgroundColor="Transparent"
                               Margin="0"
                               IsTextPredictionEnabled="False"
                               ReturnType="Search"
                               Text="{Binding SearchText}" />
                    </Grid>
                </Frame>

                <VerticalStackLayout Spacing="8" IsVisible="{Binding IsShowingBanners}">
                    <CarouselView HeightRequest="165"
                                  Loop="True"
                                  IsBounceEnabled="False"
                                  IndicatorView="{x:Reference BannerIndicators}">
                        <CarouselView.ItemsSource>
                            <x:Array Type="{x:Type x:String}">
                                <x:String>banner1.png</x:String>
                                <x:String>banner2.png</x:String>
                                <x:String>banner3.png</x:String>
                            </x:Array>
                        </CarouselView.ItemsSource>
                        <CarouselView.ItemTemplate>
                            <DataTemplate>
                                <Frame Padding="0"
                                       HasShadow="False"
                                       CornerRadius="18">
                                    <Image Source="{Binding .}"
                                           Aspect="AspectFill" />
                                </Frame>
                            </DataTemplate>
                        </CarouselView.ItemTemplate>
                    </CarouselView>
                    <IndicatorView x:Name="BannerIndicators"
                                   HorizontalOptions="Center"
                                   IndicatorColor="#D9D9D9"
                                   SelectedIndicatorColor="#5B61FF" />
                </VerticalStackLayout>

                <Grid ColumnDefinitions="*,*,*"
                      ColumnSpacing="14">
                    <Border BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/sword.png" />
                            <Label Text="英雄联盟"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="1"
                            BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/crown.png" />
                            <Label Text="王者荣耀"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="2"
                            BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/medal.png" />
                            <Label Text="绝地求生"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>
                </Grid>

                <Label Text="精选推荐"
                       FontSize="18"
                       FontAttributes="Bold"
                       TextColor="#2A2F3C" />
            </VerticalStackLayout>
        </CollectionView.Header>

        <CollectionView.ItemTemplate>
            <DataTemplate x:DataType="models:Service">
                <Frame Margin="20,0,20,16"
                       Padding="12"
                       BackgroundColor="White"
                       CornerRadius="18"
                       HasShadow="False"
                       BorderColor="#EEEEEE">
                    <Frame.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnServiceTapped" />
                    </Frame.GestureRecognizers>
                    <Grid ColumnDefinitions="Auto,*"
                          ColumnSpacing="14">
                        <Border Grid.Column="0"
                                WidthRequest="110"
                                HeightRequest="88"
                                StrokeShape="RoundRectangle 16"
                                VerticalOptions="Center">
                            <Image Source="{Binding ThumbnailUrl}"
                                   Aspect="AspectFill" />
                        </Border>

                        <VerticalStackLayout Grid.Column="1"
                                              Spacing="6"
                                              VerticalOptions="Center">
                            <Label Text="{Binding Title}"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#2A2F3C"
                                   LineBreakMode="TailTruncation" />
                            <Label Text="{Binding GameName}"
                                   FontSize="13"
                                   TextColor="#777D8C"
                                   LineBreakMode="TailTruncation" />
                            <HorizontalStackLayout Spacing="10">
                                <Label Text="{Binding PurchaseCount, StringFormat='{0}人购买'}"
                                       FontSize="12"
                                       TextColor="#9AA0B1" />
                                <Label Text="{Binding CompletedCount, StringFormat='完成{0}'}"
                                       FontSize="12"
                                       TextColor="#9AA0B1" />
                            </HorizontalStackLayout>
                            <Label Text="{Binding Price, StringFormat='￥{0:F0}'}"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#FF4D4F" />
                        </VerticalStackLayout>
                    </Grid>
                </Frame>
            </DataTemplate>
        </CollectionView.ItemTemplate>
        <!-- 🧩 这是添加的空视图部分 -->
        <CollectionView.EmptyView>
            <VerticalStackLayout Spacing="8"
                             Padding="0,60,0,0"
                             HorizontalOptions="Center"
                             VerticalOptions="Start">
                <Image Source="no_service.png"
                   WidthRequest="120"
                   HeightRequest="120"
                   Aspect="AspectFit"
                   Opacity="0.85" />
                <Label Text="暂无服务"
                   FontSize="18"
                   FontAttributes="Bold"
                   HorizontalTextAlignment="Center"
                   TextColor="#6B7280" />
                <Label Text="试试刷新一下或看看其他分类吧~"
                   FontSize="13"
                   HorizontalTextAlignment="Center"
                   TextColor="#9AA0B1" />
            </VerticalStackLayout>
        </CollectionView.EmptyView>
    </CollectionView>
</ContentPage>
】

Views/ServiceListPage.xaml.cs:
【﻿using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ServiceListPage : ContentPage
{
    public ServiceListPage(ServiceListViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }

    public ServiceListPage()
    {
        InitializeComponent();
    }

    private void OnSearchAreaTapped(object sender, TappedEventArgs e)
    {
        // 点击搜索区域时，让输入框获得焦点
        SearchEntry.Focus();
    }

    private async void OnServiceTapped(object sender, TappedEventArgs e)
    {
        if ((sender as Element)?.BindingContext is not Service tappedService)
            return;

        await Shell.Current.GoToAsync($"{nameof(ServiceDetailPage)}?id={tappedService.Id}");
    }
}】

Views/temp.txt:
【﻿using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ProfilePage : ContentPage
{
    public ProfilePage(ProfileViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
    public ProfilePage()
    {
        InitializeComponent();
    }
}
】

Views/ZonePage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.ZonePage"
             x:DataType="vm:ZoneViewModel"
             xmlns:model="clr-namespace:GamerLinkApp.Models"
             Title="Game Zone"
             BackgroundColor="#FFFFFF">
    <Grid ColumnDefinitions="140,*">
        <Border Grid.Column="0"
                Padding="0,24,0,0"
                BackgroundColor="#F5F6F8"
                StrokeThickness="0">
            <CollectionView ItemsSource="{Binding Categories}"
                            SelectionMode="Single"
                            SelectedItem="{Binding SelectedCategory, Mode=TwoWay}"
                            Margin="0"
                            BackgroundColor="Transparent">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical"
                                       ItemSpacing="0"/>
                </CollectionView.ItemsLayout>
                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="model:Category">
                        <Grid ColumnDefinitions="6,*"
                              Padding="0,14"
                              BackgroundColor="Transparent">
                            <BoxView x:Name="SelectionIndicator"
                                     WidthRequest="6"
                                     BackgroundColor="Transparent"
                                     HorizontalOptions="Fill"
                                     VerticalOptions="Fill"/>
                            <Label x:Name="CategoryLabel"
                                   Grid.Column="1"
                                   Text="{Binding Name}"
                                   FontSize="16"
                                   TextColor="#5F6473"
                                   VerticalOptions="Center"
                                   Padding="18,0"
                                   LineBreakMode="TailTruncation"/>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="SelectionStates">
                                    <VisualState Name="Normal">
                                        <VisualState.Setters>
                                            <Setter TargetName="SelectionIndicator"
                                                    Property="BoxView.BackgroundColor"
                                                    Value="Transparent"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.TextColor"
                                                    Value="#5F6473"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.FontAttributes"
                                                    Value="None"/>
                                            <Setter Property="BackgroundColor"
                                                    Value="Transparent"/>
                                        </VisualState.Setters>
                                    </VisualState>
                                    <VisualState Name="Selected">
                                        <VisualState.Setters>
                                            <Setter TargetName="SelectionIndicator"
                                                    Property="BoxView.BackgroundColor"
                                                    Value="#3478F6"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.TextColor"
                                                    Value="#3478F6"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.FontAttributes"
                                                    Value="Bold"/>
                                            <Setter Property="BackgroundColor"
                                                    Value="#EAF1FF"/>
                                        </VisualState.Setters>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
        </Border>

        <VerticalStackLayout Grid.Column="1"
                             Padding="32,24"
                             Spacing="24"
                             BackgroundColor="#FFFFFF">
            <Label Text="{Binding SelectedCategory.Name, FallbackValue='Game Zone'}"
                   FontSize="22"
                   FontAttributes="Bold"
                   TextColor="#1F1F1F"/>

            <Label Text="No services available"
                   FontSize="14"
                   TextColor="#8E94A2"
                   HorizontalOptions="Center"
                   IsVisible="False">
                <Label.Triggers>
                    <DataTrigger TargetType="Label"
                                 Binding="{Binding HighlightedService}"
                                 Value="{x:Null}">
                        <Setter Property="IsVisible"
                                Value="True"/>
                    </DataTrigger>
                </Label.Triggers>
            </Label>
            <CollectionView ItemsSource="{Binding Services}"
                            SelectionMode="None"
                            Margin="0"
                            BackgroundColor="Transparent">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical"
                            ItemSpacing="12"/>
                </CollectionView.ItemsLayout>

                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="model:Service">
                        <Border Padding="16"
                                BackgroundColor="#FFFFFF"
                                StrokeThickness="1"
                                Stroke="#E5E7EB"
                                Margin="0,0,0,12">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="16"/>
                            </Border.StrokeShape>

                            <Grid ColumnDefinitions="Auto,*"
                                  ColumnSpacing="16">
                                <Border WidthRequest="84"
                                        HeightRequest="84"
                                        StrokeThickness="0"
                                        BackgroundColor="#F2F4F8">
                                    <Border.StrokeShape>
                                        <RoundRectangle CornerRadius="12"/>
                                    </Border.StrokeShape>
                                    <Image Source="{Binding ThumbnailUrl}"
                                            Aspect="AspectFill"/>
                                </Border>

                                <VerticalStackLayout Grid.Column="1"
                                                     Spacing="8"
                                                     VerticalOptions="Center">
                                    <Label Text="{Binding Title}"
                                           FontSize="16"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F"
                                           LineBreakMode="TailTruncation"/>
                                    <Label Text="{Binding PurchaseCount, StringFormat='Sold {0}'}"
                                           FontSize="12"
                                           TextColor="#8E94A2"/>
                                    <Label Text="{Binding Price, StringFormat='{0:C0}'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#E53935"/>
                                </VerticalStackLayout>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>


        </VerticalStackLayout>
    </Grid>
</ContentPage>
】

Views/ZonePage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ZonePage : ContentPage
{
	public ZonePage()
	{
		InitializeComponent();
	}
	// 修改构造函数以接收 ViewModel
	public ZonePage(ZoneViewModel vm)
	{
		InitializeComponent();
		BindingContext = vm; // 设置数据上下文
	}
}】

