./AppShell.xaml:
【<?xml version="1.0" encoding="UTF-8" ?>
<Shell
    x:Class="GamerLinkApp.AppShell"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    Shell.FlyoutBehavior="Disabled"
    Title="GamerLinkApp"
    Shell.NavBarIsVisible="False">

    <!-- 具体的 Tab 项目在代码中根据用户身份动态构建 -->
</Shell>
】

./AppShell.xaml.cs:
【using System;
using System.Threading.Tasks;
using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using GamerLinkApp.Views;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace GamerLinkApp;

public partial class AppShell : Shell
{
    private readonly IAuthService _authService;

    public AppShell()
    {
        InitializeComponent();
        Routing.RegisterRoute(nameof(ServiceDetailPage), typeof(ServiceDetailPage));
        Routing.RegisterRoute(nameof(OrderListPage), typeof(OrderListPage));
        Routing.RegisterRoute(nameof(OrderPaymentPage), typeof(OrderPaymentPage));
        Routing.RegisterRoute(nameof(OrderReviewPage), typeof(OrderReviewPage));
        Routing.RegisterRoute(nameof(FavoriteServicesPage), typeof(FavoriteServicesPage));
        Routing.RegisterRoute(nameof(AdminDashboardPage), typeof(AdminDashboardPage));
        Routing.RegisterRoute(nameof(AdminOrdersPage), typeof(AdminOrdersPage));
        Routing.RegisterRoute(nameof(AdminUsersPage), typeof(AdminUsersPage));

        _authService = ServiceHelper.GetRequiredService<IAuthService>();
        _authService.CurrentUserChanged += OnCurrentUserChanged;

        _ = InitializeTabsAsync();
    }

    protected override void OnHandlerChanged()
    {
        base.OnHandlerChanged();

        if (Handler is null)
        {
            _authService.CurrentUserChanged -= OnCurrentUserChanged;
        }
    }

    private async Task InitializeTabsAsync()
    {
        var user = await _authService.GetCurrentUserAsync();
        await MainThread.InvokeOnMainThreadAsync(() => UpdateTabs(user));
    }

    private void OnCurrentUserChanged(object? sender, User? user) =>
        _ = MainThread.InvokeOnMainThreadAsync(() => UpdateTabs(user));

    private void UpdateTabs(User? user)
    {
        Items.Clear();

        if (user?.IsAdmin == true)
        {
            Items.Add(CreateTab("服务管理", "tab_shop.png", () => ServiceHelper.GetRequiredService<AdminDashboardPage>()));
            Items.Add(CreateTab("订单管理", "tab_zone.png", () => ServiceHelper.GetRequiredService<AdminOrdersPage>()));
            Items.Add(CreateTab("用户管理", "tab_mine.png", () => ServiceHelper.GetRequiredService<AdminUsersPage>()));
        }
        else
        {
            Items.Add(CreateTab("服务", "tab_shop.png", () => ServiceHelper.GetRequiredService<ServiceListPage>()));
            Items.Add(CreateTab("专区", "tab_zone.png", () => ServiceHelper.GetRequiredService<ZonePage>()));
            Items.Add(CreateTab("个人", "tab_mine.png", () => ServiceHelper.GetRequiredService<ProfilePage>()));
        }

        if (Items.Count > 0)
        {
            CurrentItem = Items[0];
        }
    }

    private static Tab CreateTab(string title, string icon, Func<Page> pageFactory)
    {
        var content = new ShellContent
        {
            Title = title,
            ContentTemplate = new DataTemplate(pageFactory)
        };

        var tab = new Tab
        {
            Title = title,
            Icon = icon
        };

        tab.Items.Add(content);
        return tab;
    }
}
】

./MainPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="GamerLinkApp.MainPage">

    <ScrollView>
        <VerticalStackLayout
            Padding="30,0"
            Spacing="25">
            <Image
                Source="dotnet_bot.png"
                HeightRequest="185"
                Aspect="AspectFit"
                SemanticProperties.Description="dot net bot in a hovercraft number nine" />

            <Label
                Text="Hello, World!"
                Style="{StaticResource Headline}"
                SemanticProperties.HeadingLevel="Level1" />

            <Label
                Text="Welcome to &#10;.NET Multi-platform App UI"
                Style="{StaticResource SubHeadline}"
                SemanticProperties.HeadingLevel="Level2"
                SemanticProperties.Description="Welcome to dot net Multi platform App U I" />

            <Button
                x:Name="CounterBtn"
                Text="Click me" 
                SemanticProperties.Hint="Counts the number of times you click"
                Clicked="OnCounterClicked"
                HorizontalOptions="Fill" />
        </VerticalStackLayout>
    </ScrollView>

</ContentPage>
】

./MainPage.xaml.cs:
【﻿namespace GamerLinkApp
{
    public partial class MainPage : ContentPage
    {
        int count = 0;

        public MainPage()
        {
            InitializeComponent();
        }

        private void OnCounterClicked(object? sender, EventArgs e)
        {
            count++;

            if (count == 1)
                CounterBtn.Text = $"Clicked {count} time";
            else
                CounterBtn.Text = $"Clicked {count} times";

            SemanticScreenReader.Announce(CounterBtn.Text);
        }
    }
}
】

./MauiProgram.cs:
【using System.IO;
using GamerLinkApp.Data;
using GamerLinkApp.Helpers;
using GamerLinkApp.Services;
using GamerLinkApp.ViewModels;
using GamerLinkApp.Views;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Maui.Storage;

namespace GamerLinkApp
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });

#if DEBUG
            builder.Logging.AddDebug();
#endif

            var databasePath = Path.Combine(FileSystem.AppDataDirectory, "gamerlink.db");

#if DEBUG
            if (File.Exists(databasePath))
            {
                File.Delete(databasePath);
                Console.WriteLine($"Database reset: {databasePath}");
            }
            else
            {
                Console.WriteLine("Database file not found.");
            }
#endif

            builder.Services.AddDbContextFactory<ServiceDbContext>(options =>
                options.UseSqlite($"Data Source={databasePath}"));
            builder.Services.AddSingleton<IDataService, SqliteDataService>();
            builder.Services.AddSingleton<IAuthService, AuthService>();

            builder.Services.AddSingleton<ServiceListPage>();
            builder.Services.AddSingleton<ServiceListViewModel>();

            builder.Services.AddSingleton<ZonePage>();
            builder.Services.AddSingleton<ZoneViewModel>();
            builder.Services.AddSingleton<ProfilePage>();
            builder.Services.AddSingleton<ProfileViewModel>();

            builder.Services.AddTransient<LoginPage>();
            builder.Services.AddTransient<LoginViewModel>();
            builder.Services.AddTransient<RegisterPage>();
            builder.Services.AddTransient<RegisterViewModel>();

            builder.Services.AddTransient<OrderListPage>();
            builder.Services.AddTransient<OrderListViewModel>();
            builder.Services.AddTransient<OrderPaymentPage>();
            builder.Services.AddTransient<OrderPaymentViewModel>();
            builder.Services.AddTransient<ServiceDetailPage>();
            builder.Services.AddTransient<ServiceDetailViewModel>();
            builder.Services.AddTransient<OrderReviewPage>();
            builder.Services.AddTransient<OrderReviewViewModel>();
            builder.Services.AddTransient<FavoriteServicesPage>();
            builder.Services.AddTransient<FavoriteServicesViewModel>();
            builder.Services.AddTransient<AdminDashboardPage>();
            builder.Services.AddTransient<AdminDashboardViewModel>();
            builder.Services.AddTransient<AdminOrdersPage>();
            builder.Services.AddTransient<AdminOrdersViewModel>();
            builder.Services.AddTransient<AdminUsersViewModel>();
            builder.Services.AddTransient<AdminUsersPage>();

            var app = builder.Build();
            ServiceHelper.Initialize(app.Services);

            return app;
        }
    }
}
】

Data/ServiceDbContext.cs:
【﻿using System;
using System.Collections.Generic;
using System.Text.Json;
using GamerLinkApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GamerLinkApp.Data
{
    public class ServiceDbContext : DbContext
    {
        private static readonly JsonSerializerOptions JsonOptions = new(JsonSerializerDefaults.Web)
        {
            WriteIndented = false
        };

        private static readonly ValueConverter<List<string>, string> ListConverter = new(
            list => JsonSerializer.Serialize(list ?? new List<string>(), JsonOptions),
            json => string.IsNullOrWhiteSpace(json)
                ? new List<string>()
                : JsonSerializer.Deserialize<List<string>>(json, JsonOptions) ?? new List<string>()
        );

        private static readonly ValueComparer<List<string>> ListComparer = new(
            (left, right) => AreListsEqual(left, right),
            list => GetListHashCode(list),
            list => CloneList(list)
        );

        public ServiceDbContext(DbContextOptions<ServiceDbContext> options)
            : base(options)
        {
        }

        public DbSet<Service> Services => Set<Service>();
        public DbSet<User> Users => Set<User>();
        public DbSet<Order> Orders => Set<Order>();
        public DbSet<Review> Reviews => Set<Review>();
        public DbSet<Banner> Banners => Set<Banner>();
        public DbSet<Category> Categories => Set<Category>();
        public DbSet<Favorite> Favorites => Set<Favorite>();

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            ConfigureService(modelBuilder);
            ConfigureUser(modelBuilder);
        }

        private static void ConfigureService(ModelBuilder modelBuilder)
        {
            var entity = modelBuilder.Entity<Service>();

            entity.HasKey(s => s.Id);
            entity.Property(s => s.Title).IsRequired();
            entity.Property(s => s.Description).IsRequired(false);
            entity.Property(s => s.GameName).IsRequired(false);
            entity.Property(s => s.ServiceType).IsRequired(false);
            entity.Property(s => s.Category).IsRequired(false);
            entity.Property(s => s.ThumbnailUrl).IsRequired(false);

            entity.Property(s => s.ImageUrls)
                .HasConversion(ListConverter)
                .Metadata.SetValueComparer(ListComparer);

            entity.Property(s => s.Tags)
                .HasConversion(ListConverter)
                .Metadata.SetValueComparer(ListComparer);

            entity.Ignore(s => s.IsFavorite);
        }

        private static void ConfigureUser(ModelBuilder modelBuilder)
        {
            var entity = modelBuilder.Entity<User>();

            entity.HasKey(u => u.Id);

            entity.Property(u => u.Username)
                .IsRequired();

            entity.Property(u => u.Email)
                .IsRequired();

            entity.Property(u => u.PasswordHash)
                .IsRequired();

            entity.Property(u => u.PasswordSalt)
                .IsRequired();

            entity.Property(u => u.IsAdmin)
                .HasDefaultValue(false);

            entity.Property(u => u.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP");

            entity.HasIndex(u => u.Username)
                .IsUnique();

            entity.HasIndex(u => u.Email)
                .IsUnique();
        }

        private static bool AreListsEqual(List<string>? left, List<string>? right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (left is null || right is null)
            {
                return left is null && right is null;
            }

            if (left.Count != right.Count)
            {
                return false;
            }

            for (var i = 0; i < left.Count; i++)
            {
                if (!string.Equals(left[i], right[i], StringComparison.Ordinal))
                {
                    return false;
                }
            }

            return true;
        }

        private static int GetListHashCode(List<string>? list)
        {
            if (list is null || list.Count == 0)
            {
                return 0;
            }

            var hash = new HashCode();
            for (var i = 0; i < list.Count; i++)
            {
                hash.Add(list[i], StringComparer.Ordinal);
            }

            return hash.ToHashCode();
        }

        private static List<string> CloneList(List<string>? list)
        {
            return list is null ? new List<string>() : new List<string>(list);
        }
    }
}
】

Helpers/AuthNavigationHelper.cs:
【using System;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Services;
using GamerLinkApp.Views;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.Helpers;

public static class AuthNavigationHelper
{
    private static bool _isPresentingLogin;

    public static Task<bool> EnsureAuthenticatedAsync() =>
        EnsureAuthenticatedAsync(ServiceHelper.GetRequiredService<IAuthService>());

    public static async Task<bool> EnsureAuthenticatedAsync(IAuthService authService)
    {
        ArgumentNullException.ThrowIfNull(authService);

        if (authService.IsAuthenticated)
        {
            return true;
        }

        var user = await authService.GetCurrentUserAsync();
        if (user is not null)
        {
            return true;
        }

        return await PresentLoginAsync();
    }

    private static async Task<bool> PresentLoginAsync()
    {
        if (_isPresentingLogin)
        {
            return false;
        }

        try
        {
            _isPresentingLogin = true;

            await MainThread.InvokeOnMainThreadAsync(async () =>
            {
                var navigation = GetCurrentNavigation();
                if (navigation is null)
                {
                    return;
                }

                if (navigation.ModalStack.Any(IsLoginModal))
                {
                    return;
                }

                var loginPage = ServiceHelper.GetRequiredService<LoginPage>();
                await navigation.PushModalAsync(new NavigationPage(loginPage));
            });
        }
        finally
        {
            _isPresentingLogin = false;
        }

        return false;
    }

    private static INavigation? GetCurrentNavigation()
    {
        var application = Application.Current;
        if (application is not null)
        {
            var window = application.Windows.FirstOrDefault();
            if (window?.Page is not null)
            {
                return window.Page.Navigation;
            }
        }

        return Shell.Current?.Navigation;
    }

    private static bool IsLoginModal(Page page) =>
        page switch
        {
            NavigationPage navigationPage => navigationPage.RootPage is LoginPage,
            LoginPage => true,
            _ => false
        };
}
】

Helpers/PasswordHasher.cs:
【using System;
using System.Security.Cryptography;

namespace GamerLinkApp.Helpers;

public static class PasswordHasher
{
    private const int SaltSize = 16;
    private const int KeySize = 32;
    private const int Iterations = 100_000;

    public static (string Hash, string Salt) HashPassword(string password)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(password);

        var saltBytes = RandomNumberGenerator.GetBytes(SaltSize);
        var hashBytes = DeriveKey(password, saltBytes);

        return (Convert.ToBase64String(hashBytes), Convert.ToBase64String(saltBytes));
    }

    public static bool VerifyPassword(string password, string hash, string salt)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(password);
        ArgumentException.ThrowIfNullOrWhiteSpace(hash);
        ArgumentException.ThrowIfNullOrWhiteSpace(salt);

        var saltBytes = Convert.FromBase64String(salt);
        var expectedHash = Convert.FromBase64String(hash);
        var actualHash = DeriveKey(password, saltBytes);

        return CryptographicOperations.FixedTimeEquals(actualHash, expectedHash);
    }

    private static byte[] DeriveKey(string password, byte[] saltBytes)
    {
        return Rfc2898DeriveBytes.Pbkdf2(
            password,
            saltBytes,
            Iterations,
            HashAlgorithmName.SHA256,
            KeySize);
    }
}
】

Helpers/ServiceHelper.cs:
【﻿using System;
using Microsoft.Extensions.DependencyInjection;

namespace GamerLinkApp.Helpers;

public static class ServiceHelper
{
    private static IServiceProvider? _serviceProvider;

    public static void Initialize(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }

    public static T GetRequiredService<T>() where T : notnull
    {
        if (_serviceProvider is null)
        {
            throw new InvalidOperationException("Service provider is not initialized.");
        }

        return _serviceProvider.GetRequiredService<T>();
    }
}
】

Models/Banner.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Banner
    {
        public int Id { get; set; }
        public string ImageUrl { get; set; } // Banner图片地址
        public string TargetUrl { get; set; } // 点击Banner后跳转的地址 (例如某个服务的详情页)
    }
}
】

Models/Category.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } // 分类名称，如 "MOBA", "FPS", "RPG"
        public string IconUrl { get; set; } // 分类的图标URL (可选)
    }
}】

Models/Favorite.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Favorite
    {
        public int Id { get; set; }
        public int UserId { get; set; }     // 哪个用户收藏的
        public int ServiceId { get; set; }  // 收藏了哪个服务
    }
}】

Models/Order.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class Order
    {
        public int Id { get; set; }
        public int ServiceId { get; set; }
        public int BuyerId { get; set; }
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } // 例如: "进行中", "已完成"

        // 订单流程管理
        public DateTime? PaymentDate { get; set; } // 支付时间
        public DateTime? CompletionDate { get; set; } // 订单完成时间
        public DateTime? RefundRequestDate { get; set; } // 退款申请时间
        public decimal TotalPrice { get; set; } // 订单总价

        // 评论系统关联
        public int? ReviewId { get; set; } // 关联的评论ID，可以为空
    }

    // 建议为订单状态定义一个枚举
    public enum OrderStatus
    {
        PendingPayment, // 待支付
        Ongoing,        // 进行中
        PendingReview,  // 待评论
        Completed,      // 已完成
        RefundRequested,// 退款中
        Cancelled       // 已取消
    }
}
】

Models/Review.cs:
【﻿using System;

namespace GamerLinkApp.Models
{
    public class Review
    {
        public int Id { get; set; }
        public int ServiceId { get; set; } // 关联哪个服务
        public int OrderId { get; set; }   // 关联哪个订单
        public int UserId { get; set; }    // 哪个用户发表的
        public int Rating { get; set; }    // 评分 (例如 1-5 星)
        public string Comment { get; set; } // 评论内容
        public DateTime ReviewDate { get; set; } // 评论时间
    }
}】

Models/Service.cs:
【﻿using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.CompilerServices;

namespace GamerLinkApp.Models
{
    public class Service : INotifyPropertyChanged
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string GameName { get; set; }
        public string ServiceType { get; set; } // 例如: "代练", "陪玩"
        public int SellerId { get; set; }

        public string ThumbnailUrl { get; set; } // 列表和推荐位缩略图
        public List<string> ImageUrls { get; set; } // 轮播图/详情图集合
        public string Category { get; set; } // 服务所属分类, 如 "MOBA", "FPS"
        public bool IsFeatured { get; set; } // 是否精选推荐
        public double AverageRating { get; set; } // 平均评分
        public int ReviewCount { get; set; } // 评价数量
        public int PurchaseCount { get; set; } // 累计购买人数
        public int CompletedCount { get; set; } // 已完成订单数

        public List<string> Tags { get; set; } // 服务标签, 如 "上分", "陪练"

        private bool _isFavorite;

        [NotMapped]
        public bool IsFavorite
        {
            get => _isFavorite;
            set
            {
                if (_isFavorite == value)
                {
                    return;
                }

                _isFavorite = value;
                OnPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler? PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
】

Models/ServiceReviewInfo.cs:
【using System;

namespace GamerLinkApp.Models
{
    /// <summary>
    /// 展示在服务详情页的评论信息（包含用户资料）
    /// </summary>
    public class ServiceReviewInfo
    {
        public int Id { get; set; }
        public int ServiceId { get; set; }
        public int OrderId { get; set; }
        public int Rating { get; set; }
        public string Comment { get; set; } = string.Empty;
        public DateTime ReviewDate { get; set; }

        public int UserId { get; set; }
        public string UserNickname { get; set; } = string.Empty;
        public string? UserAvatarUrl { get; set; }

        public string ReviewDateDisplay => ReviewDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm");

        public string UserInitial => string.IsNullOrWhiteSpace(UserNickname)
            ? "匿"
            : UserNickname.Substring(0, 1);
    }
}
】

Models/User.cs:
【using System;

namespace GamerLinkApp.Models;

public class User
{
    public int Id { get; set; }
    public string Username { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public string PasswordHash { get; set; } = string.Empty;
    public string PasswordSalt { get; set; } = string.Empty;

    // 微信账户信息（预留）
    //public string WeChatOpenId { get; set; } // 用户唯一标识
    //public string WeChatUnionId { get; set; } // 关联公众号/小程序时使用

    // 基础资料
    public string Nickname { get; set; } = string.Empty; // 用户昵称
    public string AvatarUrl { get; set; } = string.Empty; // 头像图片 URL

    public bool IsAdmin { get; set; }

    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public DateTime? LastLoginAt { get; set; }
}
】

Platforms/Android/AndroidManifest.xml:
【﻿<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
	<application android:allowBackup="true" android:icon="@mipmap/appicon" android:roundIcon="@mipmap/appicon_round" android:supportsRtl="true" android:theme="@style/Maui.MainTheme"></application>
	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
	<uses-permission android:name="android.permission.INTERNET" />
</manifest>】

Platforms/Android/MainActivity.cs:
【﻿using Android.App;
using Android.Content.PM;
using Android.OS;

namespace GamerLinkApp
{
    [Activity(Theme = "@style/Maui.SplashTheme", MainLauncher = true, LaunchMode = LaunchMode.SingleTop, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]
    public class MainActivity : MauiAppCompatActivity
    {
    }
}
】

Platforms/Android/MainApplication.cs:
【﻿using Android.App;
using Android.Runtime;

namespace GamerLinkApp
{
    [Application]
    public class MainApplication : MauiApplication
    {
        public MainApplication(IntPtr handle, JniHandleOwnership ownership)
            : base(handle, ownership)
        {
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
】

Platforms/Android/Resources/values/colors.xml:
【<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#512BD4</color>
    <color name="colorPrimaryDark">#2B0B98</color>
    <color name="colorAccent">#2B0B98</color>
</resources>】

Platforms/Android/Resources/values/styles.xml:
【<?xml version="1.0" encoding="utf-8" ?>
<resources>
	<!-- 定义基础主题，确保其父主题是 MaterialComponents 的子主题 -->
	<style name="MainTheme.Base" parent="Theme.MaterialComponents.DayNight.NoActionBar">
		<!-- 应用的主要颜色 -->
		<item name="colorPrimary">@color/colorPrimary</item>
		<item name="colorPrimaryDark">@color/colorPrimaryDark</item>
		<item name="colorAccent">@color/colorAccent</item>

		<!-- 确保窗口没有标题栏，因为 MAUI 会自己处理 -->
		<item name="android:windowNoTitle">true</item>
		<!-- 对于某些版本，可能还需要这个来移除窗口边框 -->
		<item name="windowActionBar">false</item>

		<!-- 如果需要，还可以添加其他窗口相关的设置 -->
		<item name="android:windowBackground">@android:color/white</item>
	</style>

	<!-- 定义应用实际使用的主题，它继承自我们定义的基础主题 -->
	<style name="Maui.MainTheme" parent="MainTheme.Base" />

</resources>】

Platforms/iOS/Program.cs:
【﻿using ObjCRuntime;
using UIKit;

namespace GamerLinkApp
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
】

Platforms/MacCatalyst/Program.cs:
【﻿using ObjCRuntime;
using UIKit;

namespace GamerLinkApp
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
】

Resources/Raw/seed_data.json:
【{
  "Services": [
    {
      "Id": 1,
      "Title": "王者荣耀-巅峰陪练冲刺",
      "Description": "顶尖荣耀教练，全赛季陪练指点操作与意识，助你稳步上分。",
      "GameName": "王者荣耀",
      "Price": 58,
      "ServiceType": "陪练",
      "Category": "MOBA",
      "SellerId": 1,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": true,
      "AverageRating": 4.9,
      "ReviewCount": 1280,
      "PurchaseCount": 1547,
      "CompletedCount": 120,
      "Tags": [
        "打野上分",
        "意识训练",
        "赛后复盘"
      ]
    },
    {
      "Id": 2,
      "Title": "英雄联盟-大师晋级导师",
      "Description": "前职业选手一对一定制上分方案，单双排/灵活全段位安全托管。",
      "GameName": "英雄联盟",
      "Price": 318,
      "ServiceType": "代练",
      "Category": "MOBA",
      "SellerId": 2,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": true,
      "AverageRating": 4.8,
      "ReviewCount": 980,
      "PurchaseCount": 2300,
      "CompletedCount": 45,
      "Tags": [
        "国服钻石",
        "全位置",
        "职业教练"
      ]
    },
    {
      "Id": 3,
      "Title": "绝地求生-战术指挥官",
      "Description": "提供战术拆解、枪法训练与团队指挥复盘，让你每局都能精准吃鸡。",
      "GameName": "绝地求生",
      "Price": 126,
      "ServiceType": "教学",
      "Category": "射击",
      "SellerId": 3,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png",
        "banner2.png"
      ],
      "IsFeatured": false,
      "AverageRating": 4.7,
      "ReviewCount": 560,
      "PurchaseCount": 860,
      "CompletedCount": 72,
      "Tags": [
        "战术分析",
        "枪法提升",
        "团队配合"
      ]
    },
    {
      "Id": 4,
      "Title": "CS:GO 高手陪练",
      "Description": "职业枪法指导，带你练习压枪与道具运用。",
      "GameName": "CS:GO",
      "Price": 99,
      "ServiceType": "陪练",
      "Category": "射击",
      "SellerId": 4,
      "ThumbnailUrl": "banner1.png",
      "ImageUrls": [
        "banner1.png"
      ],
      "IsFeatured": true,
      "AverageRating": 4.6,
      "ReviewCount": 340,
      "PurchaseCount": 620,
      "CompletedCount": 500,
      "Tags": [
        "压枪训练",
        "团队战术"
      ]
    }
  ],
  "Users": [
    {
      "Id": 1,
      "Username": "iharty",
      "Email": "iharty@example.com",
      "Nickname": "Irving",
      "AvatarUrl": "banner1.png",
      "Password": "Password123!",
      "CreatedAt": "2023-09-01T12:00:00Z",
      "IsAdmin": false
    },
    {
      "Id": 2,
      "Username": "proplayer",
      "Email": "pro@example.com",
      "Nickname": "职业选手",
      "AvatarUrl": "banner2.png",
      "Password": "Password123!",
      "CreatedAt": "2023-09-05T08:30:00Z",
      "IsAdmin": false
    },
    {
      "Id": 3,
      "Username": "root",
      "Email": "root@example.com",
      "Nickname": "root",
      "AvatarUrl": "banner3.png",
      "Password": "root",
      "CreatedAt": "2023-09-10T08:30:00Z",
      "IsAdmin": true
    }
  ],
  "Orders": [
    {
      "Id": 1,
      "ServiceId": 1,
      "BuyerId": 1,
      "OrderDate": "2023-10-01T10:00:00Z",
      "PaymentDate": "2023-10-01T11:00:00Z",
      "CompletionDate": "2023-10-02T10:00:00Z",
      "TotalPrice": 58,
      "Status": "Completed",
      "ReviewId": 1
    },
    {
      "Id": 2,
      "ServiceId": 2,
      "BuyerId": 1,
      "OrderDate": "2023-11-01T10:00:00Z",
      "PaymentDate": "2023-11-01T12:00:00Z",
      "TotalPrice": 318,
      "Status": "PendingReview"
    },
    {
      "Id": 3,
      "ServiceId": 3,
      "BuyerId": 1,
      "OrderDate": "2023-12-01T10:00:00Z",
      "PaymentDate": "2023-12-01T11:00:00Z",
      "TotalPrice": 126,
      "Status": "Ongoing"
    },
    {
      "Id": 4,
      "ServiceId": 4,
      "BuyerId": 2,
      "OrderDate": "2024-01-01T10:00:00Z",
      "TotalPrice": 99,
      "Status": "PendingPayment"
    },
    {
      "Id": 5,
      "ServiceId": 1,
      "BuyerId": 2,
      "OrderDate": "2023-10-10T09:30:00Z",
      "PaymentDate": "2023-10-10T09:45:00Z",
      "CompletionDate": "2023-10-10T11:30:00Z",
      "TotalPrice": 58,
      "Status": "Completed",
      "ReviewId": 2
    },
    {
      "Id": 6,
      "ServiceId": 2,
      "BuyerId": 1,
      "OrderDate": "2023-11-02T09:10:00Z",
      "PaymentDate": "2023-11-02T09:20:00Z",
      "CompletionDate": "2023-11-04T18:00:00Z",
      "TotalPrice": 318,
      "Status": "Completed",
      "ReviewId": 3
    }
  ],
  "Categories": [
    {
      "Id": 1,
      "Name": "MOBA",
      "IconUrl": "banner1.png"
    },
    {
      "Id": 2,
      "Name": "射击",
      "IconUrl": "banner2.png"
    },
    {
      "Id": 3,
      "Name": "RPG",
      "IconUrl": "banner3.png"
    }
  ],
  "Banners": [
    {
      "Id": 1,
      "ImageUrl": "banner1.png",
      "TargetUrl": "/ServiceDetail/1"
    },
    {
      "Id": 2,
      "ImageUrl": "banner2.png",
      "TargetUrl": "/ServiceDetail/2"
    },
    {
      "Id": 3,
      "ImageUrl": "banner3.png",
      "TargetUrl": "/ServiceDetail/3"
    }
  ],
  "Reviews": [
    {
      "Id": 1,
      "ServiceId": 1,
      "OrderId": 1,
      "UserId": 1,
      "Rating": 5,
      "Comment": "教练很专业，战术细节讲得很清楚。",
      "ReviewDate": "2023-10-02T15:30:00Z"
    },
    {
      "Id": 2,
      "ServiceId": 1,
      "OrderId": 5,
      "UserId": 2,
      "Rating": 4,
      "Comment": "陪练氛围轻松愉快，就是排位有点卡。",
      "ReviewDate": "2023-10-10T12:05:00Z"
    },
    {
      "Id": 3,
      "ServiceId": 2,
      "OrderId": 6,
      "UserId": 1,
      "Rating": 5,
      "Comment": "上分方案非常针对性，两天就晋级了。",
      "ReviewDate": "2023-11-05T08:15:00Z"
    }
  ]
}
】

Services/AuthService.cs:
【using System;
using System.Threading;
using System.Threading.Tasks;
using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using Microsoft.Maui.Storage;

namespace GamerLinkApp.Services;

public class AuthService : IAuthService
{
    private const string CurrentUserIdKey = "auth.current_user_id";

    private readonly IDataService _dataService;
    private readonly SemaphoreSlim _syncLock = new(1, 1);
    private User? _currentUser;

    public AuthService(IDataService dataService)
    {
        _dataService = dataService;
    }

    public event EventHandler<User?>? CurrentUserChanged;

    public bool IsAuthenticated => _currentUser is not null;

    public async Task<(bool Success, string? ErrorMessage, User? User)> RegisterAsync(
        string username,
        string email,
        string password,
        string? nickname = null,
        string? avatarUrl = null)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(username);
        ArgumentException.ThrowIfNullOrWhiteSpace(email);
        ArgumentException.ThrowIfNullOrWhiteSpace(password);

        username = username.Trim();
        email = email.Trim().ToLowerInvariant();

        await _syncLock.WaitAsync();
        try
        {
            if (await _dataService.GetUserByUsernameAsync(username) is not null)
            {
                return (false, "用户名已被使用", null);
            }

            if (await _dataService.GetUserByEmailAsync(email) is not null)
            {
                return (false, "邮箱已被注册", null);
            }

            var (hash, salt) = PasswordHasher.HashPassword(password);

            var user = new User
            {
                Username = username,
                Email = email,
                PasswordHash = hash,
                PasswordSalt = salt,
                Nickname = string.IsNullOrWhiteSpace(nickname) ? username : nickname!,
                AvatarUrl = avatarUrl ?? string.Empty,
                CreatedAt = DateTime.UtcNow
            };

            var createdUser = await _dataService.CreateUserAsync(user);
            await CacheCurrentUserAsync(createdUser);

            return (true, null, createdUser);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"RegisterAsync failed: {ex.Message}");
            return (false, "注册失败，请稍后重试", null);
        }
        finally
        {
            _syncLock.Release();
        }
    }

    public async Task<(bool Success, string? ErrorMessage, User? User)> LoginAsync(string usernameOrEmail, string password)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(usernameOrEmail);
        ArgumentException.ThrowIfNullOrWhiteSpace(password);

        var account = usernameOrEmail.Trim();

        await _syncLock.WaitAsync();
        try
        {
            User? user = await _dataService.GetUserByUsernameAsync(account);
            if (user is null)
            {
                var email = account.ToLowerInvariant();
                user = await _dataService.GetUserByEmailAsync(email);
            }

            if (user is null)
            {
                return (false, "账号不存在", null);
            }

            if (!PasswordHasher.VerifyPassword(password, user.PasswordHash, user.PasswordSalt))
            {
                return (false, "密码不正确", null);
            }

            user.LastLoginAt = DateTime.UtcNow;
            await _dataService.UpdateUserAsync(user);

            await CacheCurrentUserAsync(user);

            return (true, null, user);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"LoginAsync failed: {ex.Message}");
            return (false, "登录失败，请稍后重试", null);
        }
        finally
        {
            _syncLock.Release();
        }
    }

    public async Task LogoutAsync()
    {
        await _syncLock.WaitAsync();
        try
        {
            _currentUser = null;
            Preferences.Remove(CurrentUserIdKey);
            RaiseCurrentUserChanged(null);
        }
        finally
        {
            _syncLock.Release();
        }
    }

    public async Task<User?> GetCurrentUserAsync()
    {
        if (_currentUser is not null)
        {
            return _currentUser;
        }

        var storedUserId = Preferences.ContainsKey(CurrentUserIdKey)
            ? Preferences.Get(CurrentUserIdKey, -1)
            : -1;

        if (storedUserId <= 0)
        {
            return null;
        }

        await _syncLock.WaitAsync();
        try
        {
            if (_currentUser is not null)
            {
                return _currentUser;
            }

            var user = await _dataService.GetUserAsync(storedUserId);
            if (user is null)
            {
                Preferences.Remove(CurrentUserIdKey);
                return null;
            }

            _currentUser = user;
            return user;
        }
        finally
        {
            _syncLock.Release();
        }
    }

    private Task CacheCurrentUserAsync(User user)
    {
        _currentUser = user;

        Preferences.Set(CurrentUserIdKey, user.Id);
        RaiseCurrentUserChanged(user);
        return Task.CompletedTask;
    }

    private void RaiseCurrentUserChanged(User? user)
    {
        CurrentUserChanged?.Invoke(this, user);
    }
}
】

Services/IAuthService.cs:
【using System;
using System.Threading.Tasks;
using GamerLinkApp.Models;

namespace GamerLinkApp.Services;

public interface IAuthService
{
    event EventHandler<User?>? CurrentUserChanged;

    Task<(bool Success, string? ErrorMessage, User? User)> RegisterAsync(
        string username,
        string email,
        string password,
        string? nickname = null,
        string? avatarUrl = null);

    Task<(bool Success, string? ErrorMessage, User? User)> LoginAsync(string usernameOrEmail, string password);

    Task LogoutAsync();

    Task<User?> GetCurrentUserAsync();

    bool IsAuthenticated { get; }
}
】

Services/IDataService.cs:
【using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using GamerLinkApp.Models;

namespace GamerLinkApp.Services
{
    public interface IDataService
    {
        Task<List<Service>> GetServicesAsync();
        Task<Service?> GetServiceByIdAsync(int id);
        Task<List<Category>> GetCategoriesAsync();
        Task<List<Service>> GetServicesByCategoryAsync(Category category);
        Task<List<User>> GetAllUsersAsync();
        Task<User?> GetUserAsync(int id);
        Task<User?> GetUserByUsernameAsync(string username);
        Task<User?> GetUserByEmailAsync(string email);
        Task<User> CreateUserAsync(User user);
        Task UpdateUserAsync(User user);
        Task<Order> CreateOrderAsync(Order order);
        Task<Order?> GetOrderByIdAsync(int id);
        Task<Order?> MarkOrderAsPaidAsync(int orderId);
        Task<List<Order>> GetOrdersByUserAsync(int userId);
        Task<Review?> GetReviewByOrderIdAsync(int orderId);
        Task<List<ServiceReviewInfo>> GetServiceReviewsAsync(int serviceId);
        Task<(Order? Order, Review? Review, string? ErrorMessage)> SubmitReviewAsync(int orderId, int userId, int rating, string comment);
        Task<List<int>> GetFavoriteServiceIdsAsync(int userId);
        Task<List<Service>> GetFavoriteServicesAsync(int userId);
        Task<bool> IsFavoriteAsync(int userId, int serviceId);
        Task<bool> ToggleFavoriteAsync(int userId, int serviceId);
        Task<Service?> UpdateServiceAsync(Service service);
        Task<List<Order>> GetAllOrdersAsync();
        Task<Order?> UpdateOrderStatusAsync(int orderId, string status, DateTime? paymentDate = null, DateTime? completionDate = null, DateTime? refundRequestedAt = null);

    }
}
】

Services/SqliteDataService.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using GamerLinkApp.Data;
using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Maui.Storage;

namespace GamerLinkApp.Services
{
    public class SqliteDataService : IDataService
    {
        private readonly IDbContextFactory<ServiceDbContext> _contextFactory;
        private readonly SemaphoreSlim _initializationLock = new(1, 1);
        private bool _initialized;

        public SqliteDataService(IDbContextFactory<ServiceDbContext> contextFactory)
        {
            _contextFactory = contextFactory;
        }

        public async Task<List<Service>> GetServicesAsync()
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var services = await context.Services.AsNoTracking().ToListAsync();

            foreach (var service in services)
            {
                service.ImageUrls ??= new List<string>();
                service.Tags ??= new List<string>();
            }

            return services;
        }

        public async Task<Service?> GetServiceByIdAsync(int id)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var service = await context.Services.AsNoTracking().FirstOrDefaultAsync(s => s.Id == id);
            if (service is not null)
            {
                service.ImageUrls ??= new List<string>();
                service.Tags ??= new List<string>();
            }

            return service;
        }

        public async Task<Service?> UpdateServiceAsync(Service service)
        {
            ArgumentNullException.ThrowIfNull(service);

            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var entity = await context.Services.FirstOrDefaultAsync(s => s.Id == service.Id);
            if (entity is null)
            {
                return null;
            }

            entity.Title = service.Title ?? string.Empty;
            entity.Description = service.Description ?? string.Empty;
            entity.Price = service.Price;
            entity.GameName = service.GameName ?? string.Empty;
            entity.ServiceType = service.ServiceType ?? string.Empty;
            entity.SellerId = service.SellerId;
            entity.ThumbnailUrl = service.ThumbnailUrl ?? string.Empty;
            entity.Category = service.Category ?? string.Empty;
            entity.IsFeatured = service.IsFeatured;
            entity.AverageRating = service.AverageRating;
            entity.ReviewCount = service.ReviewCount;
            entity.PurchaseCount = service.PurchaseCount;
            entity.CompletedCount = service.CompletedCount;
            entity.ImageUrls = service.ImageUrls ?? new List<string>();
            entity.Tags = service.Tags ?? new List<string>();

            await context.SaveChangesAsync();

            var updated = await context.Services
                .AsNoTracking()
                .FirstOrDefaultAsync(s => s.Id == entity.Id);

            if (updated is not null)
            {
                updated.ImageUrls ??= new List<string>();
                updated.Tags ??= new List<string>();
            }

            return updated;
        }

        public async Task<List<Category>> GetCategoriesAsync()
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Categories
                .AsNoTracking()
                .Distinct()
                .OrderBy(Name => Name)
                .ToListAsync();
        }

        public async Task<List<User>> GetAllUsersAsync()
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Users
                .AsNoTracking()
                .OrderByDescending(u => u.CreatedAt)
                .ToListAsync();
        }


        public async Task<User?> GetUserAsync(int id)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == id);
        }

        public async Task<User?> GetUserByUsernameAsync(string username)
        {
            ArgumentException.ThrowIfNullOrWhiteSpace(username);

            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Username == username);
        }

        public async Task<User?> GetUserByEmailAsync(string email)
        {
            ArgumentException.ThrowIfNullOrWhiteSpace(email);

            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Email == email);
        }

        public async Task<User> CreateUserAsync(User user)
        {
            ArgumentNullException.ThrowIfNull(user);

            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();

            if (user.CreatedAt == default)
            {
                user.CreatedAt = DateTime.UtcNow;
            }

            context.Users.Add(user);
            await context.SaveChangesAsync();

            return user;
        }

        public async Task UpdateUserAsync(User user)
        {
            ArgumentNullException.ThrowIfNull(user);

            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            context.Users.Update(user);
            await context.SaveChangesAsync();
        }

        public async Task<Order> CreateOrderAsync(Order order)
        {
            ArgumentNullException.ThrowIfNull(order);

            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();

            if (order.OrderDate == default)
            {
                order.OrderDate = DateTime.UtcNow;
            }

            context.Orders.Add(order);
            await context.SaveChangesAsync();

            return order;
        }

        public async Task<Order?> GetOrderByIdAsync(int id)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Orders.AsNoTracking().FirstOrDefaultAsync(o => o.Id == id);
        }

        public async Task<Order?> MarkOrderAsPaidAsync(int orderId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var order = await context.Orders.FirstOrDefaultAsync(o => o.Id == orderId);
            if (order is null)
            {
                return null;
            }

            order.Status = nameof(OrderStatus.Ongoing);
            order.PaymentDate = DateTime.UtcNow;

            await context.SaveChangesAsync();

            return order;
        }

        public async Task<List<Order>> GetOrdersByUserAsync(int userId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Orders
                .AsNoTracking()
                .Where(o => o.BuyerId == userId)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();
        }

        public async Task<List<Order>> GetAllOrdersAsync()
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Orders
                .AsNoTracking()
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();
        }

        public async Task<Order?> UpdateOrderStatusAsync(int orderId, string status, DateTime? paymentDate = null, DateTime? completionDate = null, DateTime? refundRequestedAt = null)
        {
            ArgumentException.ThrowIfNullOrWhiteSpace(status);

            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var order = await context.Orders.FirstOrDefaultAsync(o => o.Id == orderId);
            if (order is null)
            {
                return null;
            }

            order.Status = status;

            if (paymentDate.HasValue)
            {
                order.PaymentDate = paymentDate.Value;
            }

            if (completionDate.HasValue)
            {
                order.CompletionDate = completionDate.Value;
            }

            if (refundRequestedAt.HasValue)
            {
                order.RefundRequestDate = refundRequestedAt.Value;
            }

            await context.SaveChangesAsync();

            return await context.Orders
                .AsNoTracking()
                .FirstOrDefaultAsync(o => o.Id == orderId);
        }

        public async Task<Review?> GetReviewByOrderIdAsync(int orderId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Reviews.AsNoTracking().FirstOrDefaultAsync(r => r.OrderId == orderId);
        }

        public async Task<List<ServiceReviewInfo>> GetServiceReviewsAsync(int serviceId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();

            var reviews = await (from review in context.Reviews.AsNoTracking()
                                 where review.ServiceId == serviceId
                                 orderby review.ReviewDate descending
                                 join user in context.Users.AsNoTracking() on review.UserId equals user.Id into userGroup
                                 from user in userGroup.DefaultIfEmpty()
                                 select new ServiceReviewInfo
                                 {
                                     Id = review.Id,
                                     ServiceId = review.ServiceId,
                                     OrderId = review.OrderId,
                                     Rating = review.Rating,
                                     Comment = review.Comment ?? string.Empty,
                                     ReviewDate = review.ReviewDate,
                                     UserId = user.Id,
                                     UserNickname = string.IsNullOrWhiteSpace(user.Nickname)
                                         ? (string.IsNullOrWhiteSpace(user.Username) ? "匿名玩家" : user!.Username!)
                                         : user!.Nickname!,
                                     UserAvatarUrl = user.AvatarUrl
                                 }).ToListAsync();

            return reviews;
        }

        public async Task<(Order? Order, Review? Review, string? ErrorMessage)> SubmitReviewAsync(int orderId, int userId, int rating, string comment)
        {
            await EnsureInitializedAsync();

            if (rating < 1 || rating > 5)
            {
                return (null, null, "Rating must be between 1 and 5.");
            }

            comment = comment?.Trim() ?? string.Empty;
            if (comment.Length < 5)
            {
                return (null, null, "Comment must contain at least 5 characters.");
            }

            await using var context = await _contextFactory.CreateDbContextAsync();
            var order = await context.Orders.FirstOrDefaultAsync(o => o.Id == orderId);
            if (order is null || order.BuyerId != userId)
            {
                return (null, null, "未找到对应的订单");
            }

            if (order.ReviewId.HasValue)
            {
                var existingReview = await context.Reviews.AsNoTracking().FirstOrDefaultAsync(r => r.Id == order.ReviewId.Value);
                return (order, existingReview, "璇ヨ鍗曞凡瀹屾垚璇勪环");
            }

            if (!string.Equals(order.Status, nameof(OrderStatus.PendingReview), StringComparison.Ordinal))
            {
                return (order, null, "褰撳墠璁㈠崟鐘舵€佷笉鏀寔璇勪环");
            }

            var review = new Review
            {
                OrderId = order.Id,
                ServiceId = order.ServiceId,
                UserId = userId,
                Rating = rating,
                Comment = comment,
                ReviewDate = DateTime.UtcNow
            };

            context.Reviews.Add(review);
            await context.SaveChangesAsync();

            order.Status = nameof(OrderStatus.Completed);
            order.ReviewId = review.Id;
            order.CompletionDate ??= DateTime.UtcNow;

            await UpdateServiceReviewStatsAsync(context, order.ServiceId);

            await context.SaveChangesAsync();

            var updatedOrder = await context.Orders.AsNoTracking().FirstOrDefaultAsync(o => o.Id == orderId);
            var createdReview = await context.Reviews.AsNoTracking().FirstOrDefaultAsync(r => r.Id == review.Id);

            return (updatedOrder, createdReview, null);
        }

        public async Task<List<int>> GetFavoriteServiceIdsAsync(int userId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Favorites
                .AsNoTracking()
                .Where(f => f.UserId == userId)
                .Select(f => f.ServiceId)
                .ToListAsync();
        }

        public async Task<List<Service>> GetFavoriteServicesAsync(int userId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();

            var services = await (from favorite in context.Favorites.AsNoTracking()
                                  join service in context.Services.AsNoTracking() on favorite.ServiceId equals service.Id
                                  where favorite.UserId == userId
                                  select service)
                .ToListAsync();

            foreach (var service in services)
            {
                service.ImageUrls ??= new List<string>();
                service.Tags ??= new List<string>();
                service.IsFavorite = true;
            }

            return services;
        }

        public async Task<bool> IsFavoriteAsync(int userId, int serviceId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Favorites
                .AsNoTracking()
                .AnyAsync(f => f.UserId == userId && f.ServiceId == serviceId);
        }

        public async Task<bool> ToggleFavoriteAsync(int userId, int serviceId)
        {
            await EnsureInitializedAsync();

            await using var context = await _contextFactory.CreateDbContextAsync();
            var favorite = await context.Favorites.FirstOrDefaultAsync(f => f.UserId == userId && f.ServiceId == serviceId);

            if (favorite is not null)
            {
                context.Favorites.Remove(favorite);
                await context.SaveChangesAsync();
                return false;
            }

            context.Favorites.Add(new Favorite
            {
                UserId = userId,
                ServiceId = serviceId
            });

            await context.SaveChangesAsync();
            return true;
        }

        private static async Task UpdateServiceReviewStatsAsync(ServiceDbContext context, int serviceId)
        {
            var service = await context.Services.FirstOrDefaultAsync(s => s.Id == serviceId);
            if (service is null)
            {
                return;
            }

            var stats = await context.Reviews
                .Where(r => r.ServiceId == serviceId)
                .GroupBy(r => 1)
                .Select(g => new
                {
                    Count = g.Count(),
                    Average = g.Average(r => r.Rating)
                })
                .FirstOrDefaultAsync();

            if (stats is null)
            {
                service.ReviewCount = 0;
                service.AverageRating = 0;
                return;
            }

            service.ReviewCount = stats.Count;
            service.AverageRating = Math.Round(stats.Average, 1);
        }        
        private async Task EnsureInitializedAsync()
        {
            if (_initialized)
            {
                return;
            }

            await _initializationLock.WaitAsync();
            try
            {
                if (_initialized)
                {
                    return;
                }

                await using var context = await _contextFactory.CreateDbContextAsync();
                await context.Database.EnsureCreatedAsync();
                await SeedDataAsync(context);
                _initialized = true;
            }
            finally
            {
                _initializationLock.Release();
            }
        }

        private static async Task SeedDataAsync(ServiceDbContext context)
        {
            // 数据已存在时跳过初始化
            if (await context.Services.AnyAsync() ||
                await context.Users.AnyAsync() ||
                await context.Orders.AnyAsync() ||
                await context.Categories.AnyAsync() ||
                await context.Banners.AnyAsync())
            {
                return;
            }

            try
            {
                await using var stream = await FileSystem.OpenAppPackageFileAsync("seed_data.json");
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
                var seedData = await JsonSerializer.DeserializeAsync<SeedData>(stream, options);

                if (seedData is null)
                {
                    return;
                }

                if (seedData.Services?.Any() == true)
                {
                    await context.Services.AddRangeAsync(seedData.Services);
                }

                if (seedData.Users?.Any() == true)
                {
                    var userEntities = await Task.WhenAll(seedData.Users.Select(MapSeedUserAsync));
                    await context.Users.AddRangeAsync(userEntities);
                }

                if (seedData.Orders?.Any() == true)
                {
                    await context.Orders.AddRangeAsync(seedData.Orders);
                }

                if (seedData.Reviews?.Any() == true)
                {
                    await context.Reviews.AddRangeAsync(seedData.Reviews);
                }

                if (seedData.Categories?.Any() == true)
                {
                    await context.Categories.AddRangeAsync(seedData.Categories);
                }

                if (seedData.Banners?.Any() == true)
                {
                    await context.Banners.AddRangeAsync(seedData.Banners);
                }

                await context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"SeedData initialization failed: {ex.Message}");
            }
        }

        public async Task<List<Service>> GetServicesByCategoryAsync(Category category)
        {
            await EnsureInitializedAsync();
            await using var context = await _contextFactory.CreateDbContextAsync();
            return await context.Services.AsNoTracking().Where(s => s.Category == category.Name).ToListAsync();

        }

        private static Task<(string Hash, string Salt)> HashPasswordAsync(string password) =>
            Task.Run(() => PasswordHasher.HashPassword(password));

        private static async Task<User> MapSeedUserAsync(SeedUser seedUser)
        {
            var normalizedUsername = seedUser.Username?.Trim() ?? string.Empty;
            var normalizedEmail = seedUser.Email?.Trim().ToLowerInvariant() ?? string.Empty;
            var nickname = string.IsNullOrWhiteSpace(seedUser.Nickname)
                ? normalizedUsername
                : seedUser.Nickname!.Trim();

            var user = new User
            {
                Id = seedUser.Id,
                Username = normalizedUsername,
                Email = normalizedEmail,
                Nickname = nickname,
                AvatarUrl = seedUser.AvatarUrl ?? string.Empty,
                IsAdmin = seedUser.IsAdmin,
                CreatedAt = seedUser.CreatedAt == default ? DateTime.UtcNow : seedUser.CreatedAt,
                LastLoginAt = seedUser.LastLoginAt
            };

            string? passwordHash = seedUser.PasswordHash;
            string? passwordSalt = seedUser.PasswordSalt;

            if (!string.IsNullOrWhiteSpace(seedUser.Password))
            {
                (passwordHash, passwordSalt) = await HashPasswordAsync(seedUser.Password);
            }

            if (string.IsNullOrWhiteSpace(passwordHash) || string.IsNullOrWhiteSpace(passwordSalt))
            {
                (passwordHash, passwordSalt) = await HashPasswordAsync("Password123!");
            }

            user.PasswordHash = passwordHash;
            user.PasswordSalt = passwordSalt;

            return user;
        }

        public class SeedData
        {
            public List<Service> Services { get; set; } = new();
            public List<SeedUser> Users { get; set; } = new();
            public List<Order> Orders { get; set; } = new();
            public List<Review> Reviews { get; set; } = new();
            public List<Category> Categories { get; set; } = new();
            public List<Banner> Banners { get; set; } = new();
        }

        public class SeedUser : User
        {
            public string? Password { get; set; }
        }

    }
}











】

ViewModels/AdminDashboardViewModel.cs:
【using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using GamerLinkApp.Views;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels;

public class AdminDashboardViewModel : BaseViewModel
{
    private readonly IDataService _dataService;
    private readonly IAuthService _authService;
    private readonly List<Service> _allServices = new();
    private readonly List<Order> _allOrders = new();

    private bool _isBusy;
    private bool _isSaving;
    private bool _isFormDirty;
    private bool _isAccessDenied;
    private bool _isLoggingOut;
    private string _searchText = string.Empty;
    private string _statusMessage = string.Empty;
    private ServiceListItem? _selectedService;

    public AdminDashboardViewModel(IDataService dataService, IAuthService authService)
    {
        _dataService = dataService;
        _authService = authService;

        RefreshCommand = new Command(async () => await LoadAsync(), () => !IsBusy);
        SaveCommand = new Command(async () => await SaveAsync(), () => CanSave);
        ResetCommand = new Command(ResetForm, () => CanReset);
        SelectServiceCommand = new Command<ServiceListItem>(item => SelectedService = item);
        ToggleFeaturedCommand = new Command(async () => await ToggleFeaturedAsync(), () => SelectedService is not null && !IsSaving);
        LogoutCommand = new Command(async () => await LogoutAsync(), () => !_isLoggingOut);

        ServiceForm.PropertyChanged += (_, _) => UpdateFormState();
    }

    #region Collections & Models

    public ObservableCollection<ServiceListItem> Services { get; } = new();

    public ObservableCollection<SummaryMetric> SummaryMetrics { get; } = new();

    public EditableServiceForm ServiceForm { get; } = new();

    public ObservableCollection<OrderSnapshot> RecentOrders { get; } = new();

    #endregion

    #region Bindable Properties

    public string SearchText
    {
        get => _searchText;
        set
        {
            if (_searchText == value)
            {
                return;
            }

            _searchText = value;
            OnPropertyChanged();
            ApplyFilter();
        }
    }

    public bool IsBusy
    {
        get => _isBusy;
        private set
        {
            if (_isBusy == value)
            {
                return;
            }

            _isBusy = value;
            OnPropertyChanged();
            ((Command)RefreshCommand).ChangeCanExecute();
            UpdateCommandStates();
        }
    }

    public bool IsSaving
    {
        get => _isSaving;
        private set
        {
            if (_isSaving == value)
            {
                return;
            }

            _isSaving = value;
            OnPropertyChanged();
            UpdateCommandStates();
        }
    }

    public bool IsFormDirty
    {
        get => _isFormDirty;
        private set
        {
            if (_isFormDirty == value)
            {
                return;
            }

            _isFormDirty = value;
            OnPropertyChanged();
            UpdateCommandStates();
        }
    }

    public bool IsAccessDenied
    {
        get => _isAccessDenied;
        private set
        {
            if (_isAccessDenied == value)
            {
                return;
            }

            _isAccessDenied = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasAccess));
        }
    }

    public bool HasAccess => !IsAccessDenied;

    public string StatusMessage
    {
        get => _statusMessage;
        private set
        {
            if (_statusMessage == value)
            {
                return;
            }

            _statusMessage = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasStatusMessage));
        }
    }

    public bool HasStatusMessage => !string.IsNullOrWhiteSpace(StatusMessage);

    public ServiceListItem? SelectedService
    {
        get => _selectedService;
        set
        {
            if (_selectedService == value)
            {
                return;
            }

            _selectedService = value;
            OnPropertyChanged();
            LoadFormFromSelection();
            UpdateRecentOrdersForSelection();
            UpdateFormState();
        }
    }

    public bool CanSave => !IsBusy && !IsSaving && IsFormDirty && SelectedService is not null && !ServiceForm.HasValidationError;

    public bool CanReset => !IsBusy && !IsSaving && SelectedService is not null && IsFormDirty;

    public bool HasRecentOrders => RecentOrders.Count > 0;

    #endregion

    #region Commands

    public ICommand RefreshCommand { get; }

    public ICommand SaveCommand { get; }

    public ICommand ResetCommand { get; }

    public ICommand SelectServiceCommand { get; }

    public ICommand ToggleFeaturedCommand { get; }

    public ICommand LogoutCommand { get; }

    #endregion

    #region Public API

    public async Task LoadAsync()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;
        StatusMessage = string.Empty;

        try
        {
            if (!await EnsureAdminAsync())
            {
                return;
            }

            await LoadServicesAsync();
            await LoadRecentOrdersAsync();
            UpdateSummaryMetrics();

            if (SelectedService is null && Services.Count > 0)
            {
                SelectedService = Services[0];
            }
            else
            {
                LoadFormFromSelection();
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"加载数据失败：{ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Admin dashboard load failed: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    #endregion

    #region Internal Helpers

    private async Task<bool> EnsureAdminAsync()
    {
        var user = await _authService.GetCurrentUserAsync();
        var isAdmin = user?.IsAdmin == true;
        IsAccessDenied = !isAdmin;
        return isAdmin;
    }

    private async Task LoadServicesAsync()
    {
        _allServices.Clear();
        Services.Clear();

        var services = await _dataService.GetServicesAsync();
        foreach (var service in services.OrderByDescending(s => s.IsFeatured).ThenBy(s => s.Title, StringComparer.OrdinalIgnoreCase))
        {
            service.ImageUrls ??= new List<string>();
            service.Tags ??= new List<string>();
            _allServices.Add(service);
            Services.Add(new ServiceListItem(service));
        }

        ApplyFilter();
    }

    private async Task LoadRecentOrdersAsync()
    {
        _allOrders.Clear();
        var orders = await _dataService.GetAllOrdersAsync();
        _allOrders.AddRange(orders);
        UpdateRecentOrdersForSelection();
    }

    private void UpdateSummaryMetrics()
    {
        SummaryMetrics.Clear();

        if (_allServices.Count == 0)
        {
            return;
        }

        var featuredCount = _allServices.Count(s => s.IsFeatured);
        var avgPrice = _allServices.Average(s => (double)s.Price);
        var maxPriceService = _allServices.MaxBy(s => s.Price);
        var uniqueGames = _allServices.Select(s => s.GameName ?? string.Empty).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct(StringComparer.OrdinalIgnoreCase).Count();

        SummaryMetrics.Add(new SummaryMetric("服务总数", _allServices.Count.ToString(), "当前可售服务数量"));
        SummaryMetrics.Add(new SummaryMetric("精选推荐", featuredCount.ToString(), "标记为精选的服务数"));
        SummaryMetrics.Add(new SummaryMetric("平均价格", $"¥{avgPrice:F0}", "所有服务的平均收费"));
        SummaryMetrics.Add(new SummaryMetric("覆盖游戏", uniqueGames.ToString(), "支持的不同游戏数量"));

        if (maxPriceService is not null)
        {
            SummaryMetrics.Add(new SummaryMetric(
                "价格最高",
                $"¥{maxPriceService.Price:F0}",
                string.IsNullOrWhiteSpace(maxPriceService.Title) ? $"服务 #{maxPriceService.Id}" : maxPriceService.Title));
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(SearchText))
        {
            for (int i = 0; i < Services.Count; i++)
            {
                Services[i].IsVisible = true;
            }
            return;
        }

        var query = SearchText.Trim();

        foreach (var item in Services)
        {
            var service = item.Service;
            var matches =
                (service.Title?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (service.GameName?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (service.Category?.Contains(query, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (service.Tags?.Any(tag => tag.Contains(query, StringComparison.OrdinalIgnoreCase)) ?? false);

            item.IsVisible = matches;
        }

        if (SelectedService is not null && !SelectedService.IsVisible)
        {
            SelectedService = Services.FirstOrDefault(s => s.IsVisible);
        }
    }

    private void LoadFormFromSelection()
    {
        if (SelectedService is null)
        {
            ServiceForm.Load(null);
            return;
        }

        ServiceForm.Load(SelectedService.Service);
    }

    private void UpdateFormState()
    {
        if (SelectedService is null)
        {
            IsFormDirty = false;
            return;
        }

        IsFormDirty = ServiceForm.HasChangesComparedTo(SelectedService.Service);
        StatusMessage = string.Empty;
        UpdateCommandStates();
    }

    private void UpdateCommandStates()
    {
        ((Command)SaveCommand).ChangeCanExecute();
        ((Command)ResetCommand).ChangeCanExecute();
        ((Command)ToggleFeaturedCommand).ChangeCanExecute();
    }

    private void ResetForm()
    {
        LoadFormFromSelection();
        StatusMessage = "已恢复表单内容。";
        UpdateFormState();
        UpdateRecentOrdersForSelection();
    }

    private async Task SaveAsync()
    {
        if (SelectedService is null || !CanSave)
        {
            return;
        }

        IsSaving = true;

        try
        {
            var updatedService = ServiceForm.ToServiceSnapshot(SelectedService.Service);
            var result = await _dataService.UpdateServiceAsync(updatedService);

            if (result is null)
            {
                StatusMessage = "保存失败：服务可能已被删除。";
                return;
            }

            ReplaceService(result);
            SelectedService.Update(result);
            LoadFormFromSelection();
            UpdateSummaryMetrics();
            UpdateRecentOrdersForSelection();
            ApplyFilter();
            StatusMessage = "保存成功。";
        }
        catch (Exception ex)
        {
            StatusMessage = $"保存失败：{ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Admin dashboard save failed: {ex.Message}");
        }
        finally
        {
            IsSaving = false;
            UpdateFormState();
        }
    }

    private void UpdateRecentOrdersForSelection()
    {
        RecentOrders.Clear();

        if (SelectedService is null)
        {
            OnPropertyChanged(nameof(HasRecentOrders));
            return;
        }

        var serviceId = SelectedService.Id;
        var serviceLookup = _allServices.ToDictionary(s => s.Id, s => s.Title ?? $"服务 #{s.Id}");

        var matched = _allOrders
            .Where(o => o.ServiceId == serviceId)
            .OrderByDescending(o => o.OrderDate)
            .Take(6)
            .ToList();

        foreach (var order in matched)
        {
            var title = serviceLookup.TryGetValue(order.ServiceId, out var value)
                ? value
                : $"服务 #{order.ServiceId}";

            RecentOrders.Add(new OrderSnapshot(
                order.Id,
                title,
                order.TotalPrice,
                order.OrderDate,
                order.Status));
        }

        OnPropertyChanged(nameof(HasRecentOrders));
    }

    private async Task ToggleFeaturedAsync()
    {
        if (SelectedService is null || IsSaving)
        {
            return;
        }

        ServiceForm.IsFeatured = !ServiceForm.IsFeatured;
        await SaveAsync();
    }

    private void ReplaceService(Service updated)
    {
        var index = _allServices.FindIndex(s => s.Id == updated.Id);
        if (index >= 0)
        {
            _allServices[index] = updated;
        }
    }

    private async Task LogoutAsync()
    {
        if (_isLoggingOut)
        {
            return;
        }

        _isLoggingOut = true;
        ((Command)LogoutCommand).ChangeCanExecute();

        try
        {
            await _authService.LogoutAsync();
        }
        catch (Exception ex)
        {
            StatusMessage = $"退出登录失败：{ex.Message}";
        }
        finally
        {
            _isLoggingOut = false;
            ((Command)LogoutCommand).ChangeCanExecute();
        }
    }

    #endregion

    #region Nested Types

    public class ServiceListItem : BaseViewModel
    {
        private Service _service;
        private bool _isVisible = true;

        public ServiceListItem(Service service)
        {
            _service = service;
        }

        public Service Service => _service;

        public int Id => _service.Id;

        public string Title => _service.Title ?? $"服务 #{_service.Id}";

        public string PriceDisplay => $"¥{_service.Price:F0}";

        public string GameName => string.IsNullOrWhiteSpace(_service.GameName) ? "-" : _service.GameName;

        public string Category => string.IsNullOrWhiteSpace(_service.Category) ? "-" : _service.Category;

        public bool IsFeatured => _service.IsFeatured;

        public string FeaturedBadge => _service.IsFeatured ? "精选" : string.Empty;

        public bool IsVisible
        {
            get => _isVisible;
            set
            {
                if (_isVisible == value)
                {
                    return;
                }

                _isVisible = value;
                OnPropertyChanged();
            }
        }

        public void Update(Service service)
        {
            _service = service;
            OnPropertyChanged(nameof(Service));
            OnPropertyChanged(nameof(Title));
            OnPropertyChanged(nameof(PriceDisplay));
            OnPropertyChanged(nameof(GameName));
            OnPropertyChanged(nameof(Category));
            OnPropertyChanged(nameof(IsFeatured));
            OnPropertyChanged(nameof(FeaturedBadge));
        }
    }

    public class EditableServiceForm : BaseViewModel
    {
        private bool _isInitializing;
        private int _id;
        private string _title = string.Empty;
        private string _description = string.Empty;
        private decimal _price;
        private string _gameName = string.Empty;
        private string _category = string.Empty;
        private string _serviceType = string.Empty;
        private string _thumbnailUrl = string.Empty;
        private string _tags = string.Empty;
        private bool _isFeatured;
        private string _validationMessage = string.Empty;

        public int Id
        {
            get => _id;
            private set
            {
                if (_id == value)
                {
                    return;
                }

                _id = value;
                OnPropertyChanged();
            }
        }

        public string Title
        {
            get => _title;
            set
            {
                if (_title == value)
                {
                    return;
                }

                _title = value ?? string.Empty;
                OnPropertyChanged();
                Validate();
            }
        }

        public string Description
        {
            get => _description;
            set
            {
                if (_description == value)
                {
                    return;
                }

                _description = value ?? string.Empty;
                OnPropertyChanged();
            }
        }

        public decimal Price
        {
            get => _price;
            set
            {
                if (_price == value)
                {
                    return;
                }

                _price = value;
                OnPropertyChanged();
                Validate();
            }
        }

        public string GameName
        {
            get => _gameName;
            set
            {
                if (_gameName == value)
                {
                    return;
                }

                _gameName = value ?? string.Empty;
                OnPropertyChanged();
            }
        }

        public string Category
        {
            get => _category;
            set
            {
                if (_category == value)
                {
                    return;
                }

                _category = value ?? string.Empty;
                OnPropertyChanged();
            }
        }

        public string ServiceType
        {
            get => _serviceType;
            set
            {
                if (_serviceType == value)
                {
                    return;
                }

                _serviceType = value ?? string.Empty;
                OnPropertyChanged();
            }
        }

        public string ThumbnailUrl
        {
            get => _thumbnailUrl;
            set
            {
                if (_thumbnailUrl == value)
                {
                    return;
                }

                _thumbnailUrl = value ?? string.Empty;
                OnPropertyChanged();
            }
        }

        public string Tags
        {
            get => _tags;
            set
            {
                if (_tags == value)
                {
                    return;
                }

                _tags = value ?? string.Empty;
                OnPropertyChanged();
            }
        }

        public bool IsFeatured
        {
            get => _isFeatured;
            set
            {
                if (_isFeatured == value)
                {
                    return;
                }

                _isFeatured = value;
                OnPropertyChanged();
            }
        }

        public string ValidationMessage
        {
            get => _validationMessage;
            private set
            {
                if (_validationMessage == value)
                {
                    return;
                }

                _validationMessage = value ?? string.Empty;
                OnPropertyChanged();
                OnPropertyChanged(nameof(HasValidationError));
            }
        }

        public bool HasValidationError => !string.IsNullOrWhiteSpace(ValidationMessage);

        public void Load(Service? service)
        {
            _isInitializing = true;

            if (service is null)
            {
                Reset();
            }
            else
            {
                Id = service.Id;
                Title = service.Title ?? string.Empty;
                Description = service.Description ?? string.Empty;
                Price = service.Price;
                GameName = service.GameName ?? string.Empty;
                Category = service.Category ?? string.Empty;
                ServiceType = service.ServiceType ?? string.Empty;
                ThumbnailUrl = service.ThumbnailUrl ?? string.Empty;
                Tags = service.Tags is null ? string.Empty : string.Join(", ", service.Tags);
                IsFeatured = service.IsFeatured;
            }

            ValidationMessage = string.Empty;
            _isInitializing = false;
        }

        public void Reset()
        {
            Id = 0;
            Title = string.Empty;
            Description = string.Empty;
            Price = 0;
            GameName = string.Empty;
            Category = string.Empty;
            ServiceType = string.Empty;
            ThumbnailUrl = string.Empty;
            Tags = string.Empty;
            IsFeatured = false;
            ValidationMessage = string.Empty;
        }

        public Service ToServiceSnapshot(Service original)
        {
            var clone = new Service
            {
                Id = original.Id,
                SellerId = original.SellerId,
                AverageRating = original.AverageRating,
                ReviewCount = original.ReviewCount,
                PurchaseCount = original.PurchaseCount,
                CompletedCount = original.CompletedCount,
                ImageUrls = original.ImageUrls is null ? new List<string>() : new List<string>(original.ImageUrls),
                IsFavorite = original.IsFavorite
            };

            clone.Title = Title;
            clone.Description = Description;
            clone.Price = Price;
            clone.GameName = GameName;
            clone.Category = Category;
            clone.ServiceType = ServiceType;
            clone.ThumbnailUrl = ThumbnailUrl;
            clone.IsFeatured = IsFeatured;
            clone.Tags = ParseTags();

            return clone;
        }

        public bool HasChangesComparedTo(Service service)
        {
            if (service is null)
            {
                return false;
            }

            return
                !string.Equals(Title, service.Title ?? string.Empty, StringComparison.Ordinal) ||
                !string.Equals(Description, service.Description ?? string.Empty, StringComparison.Ordinal) ||
                Price != service.Price ||
                !string.Equals(GameName, service.GameName ?? string.Empty, StringComparison.Ordinal) ||
                !string.Equals(Category, service.Category ?? string.Empty, StringComparison.Ordinal) ||
                !string.Equals(ServiceType, service.ServiceType ?? string.Empty, StringComparison.Ordinal) ||
                !string.Equals(ThumbnailUrl, service.ThumbnailUrl ?? string.Empty, StringComparison.Ordinal) ||
                IsFeatured != service.IsFeatured ||
                !TagsEquals(service.Tags);
        }

        private List<string> ParseTags()
        {
            if (string.IsNullOrWhiteSpace(Tags))
            {
                return new List<string>();
            }

            return Tags.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries)
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();
        }

        private bool TagsEquals(IReadOnlyCollection<string>? tags)
        {
            var parsed = ParseTags();
            if (tags is null)
            {
                return parsed.Count == 0;
            }

            if (parsed.Count != tags.Count)
            {
                return false;
            }

            return !tags.Where((tag, index) => !string.Equals(tag, parsed[index], StringComparison.OrdinalIgnoreCase)).Any();
        }

        private void Validate()
        {
            if (_isInitializing)
            {
                return;
            }

            if (string.IsNullOrWhiteSpace(Title))
            {
                ValidationMessage = "名称不能为空";
                return;
            }

            if (Price < 0)
            {
                ValidationMessage = "价格不能为负数";
                return;
            }

            ValidationMessage = string.Empty;
        }
    }

    public record SummaryMetric(string Title, string Value, string Description);

    public record OrderSnapshot(int Id, string ServiceTitle, decimal TotalPrice, DateTime OrderDate, string StatusRaw)
    {
        public string TotalPriceDisplay => TotalPrice.ToString("C0", CultureInfo.CurrentCulture);
        public string OrderDateDisplay => OrderDate.ToLocalTime().ToString("MM-dd HH:mm", CultureInfo.CurrentCulture);

        public string StatusDisplay => StatusRaw switch
        {
            nameof(OrderStatus.PendingPayment) => "待支付",
            nameof(OrderStatus.Ongoing) => "进行中",
            nameof(OrderStatus.PendingReview) => "待评价",
            nameof(OrderStatus.Completed) => "已完成",
            nameof(OrderStatus.RefundRequested) => "退款中",
            nameof(OrderStatus.Cancelled) => "已取消",
            _ => StatusRaw
        };
    }

    #endregion
}
】

ViewModels/AdminOrdersViewModel.cs:
【using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels;

public class AdminOrdersViewModel : BaseViewModel
{
    private readonly IDataService _dataService;
    private readonly IAuthService _authService;
    private readonly List<Order> _allOrders = new();
    private readonly List<AdminOrderItem> _allOrderItems = new();
    private readonly Dictionary<int, Service> _serviceLookup = new();
    private readonly Dictionary<int, User> _userLookup = new();

    private bool _isBusy;
    private bool _isUpdating;
    private bool _isAccessDenied;
    private bool _isLoggingOut;
    private string _searchText = string.Empty;
    private string _statusMessage = string.Empty;
    private AdminOrderFilter? _selectedFilter;
    private AdminOrderItem? _selectedOrder;

    public AdminOrdersViewModel(IDataService dataService, IAuthService authService)
    {
        _dataService = dataService;
        _authService = authService;

        InitializeFilters();

        RefreshCommand = new Command(async () => await LoadAsync(), () => !IsBusy);
        MarkPaidCommand = new Command(async () => await MarkPaidAsync(), () => CanMarkPaid);
        MarkCompletedCommand = new Command(async () => await MarkCompletedAsync(), () => CanMarkCompleted);
        MarkPendingReviewCommand = new Command(async () => await MarkPendingReviewAsync(), () => CanMarkPendingReview);
        MarkCancelledCommand = new Command(async () => await MarkCancelledAsync(), () => CanMarkCancelled);
        LogoutCommand = new Command(async () => await LogoutAsync(), () => !_isLoggingOut);
    }

    #region Collections

    public ObservableCollection<AdminOrderFilter> StatusFilters { get; } = new();

    public ObservableCollection<AdminOrderItem> Orders { get; } = new();

    #endregion

    #region Bindable Properties

    public string SearchText
    {
        get => _searchText;
        set
        {
            if (_searchText == value)
            {
                return;
            }

            _searchText = value ?? string.Empty;
            OnPropertyChanged();
            ApplyFilter();
        }
    }

    public bool IsBusy
    {
        get => _isBusy;
        private set
        {
            if (_isBusy == value)
            {
                return;
            }

            _isBusy = value;
            OnPropertyChanged();
            ((Command)RefreshCommand).ChangeCanExecute();
        }
    }

    public bool IsUpdating
    {
        get => _isUpdating;
        private set
        {
            if (_isUpdating == value)
            {
                return;
            }

            _isUpdating = value;
            OnPropertyChanged();
            UpdateCommandStates();
        }
    }

    public bool IsAccessDenied
    {
        get => _isAccessDenied;
        private set
        {
            if (_isAccessDenied == value)
            {
                return;
            }

            _isAccessDenied = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasAccess));
        }
    }

    public bool HasAccess => !IsAccessDenied;

    public string StatusMessage
    {
        get => _statusMessage;
        private set
        {
            if (_statusMessage == value)
            {
                return;
            }

            _statusMessage = value ?? string.Empty;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasStatusMessage));
        }
    }

    public bool HasStatusMessage => !string.IsNullOrWhiteSpace(StatusMessage);

    public bool HasOrders => Orders.Count > 0;

    public bool HasSelection => SelectedOrder is not null;

    public AdminOrderFilter? SelectedFilter
    {
        get => _selectedFilter;
        set
        {
            if (_selectedFilter == value)
            {
                return;
            }

            _selectedFilter = value;
            OnPropertyChanged();
            ApplyFilter();
        }
    }

    public AdminOrderItem? SelectedOrder
    {
        get => _selectedOrder;
        set
        {
            if (_selectedOrder == value)
            {
                return;
            }

            _selectedOrder = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasSelection));
            UpdateCommandStates();
        }
    }

    public bool CanMarkPaid => !IsUpdating && SelectedOrder is not null && string.Equals(SelectedOrder.StatusKey, nameof(OrderStatus.PendingPayment), StringComparison.Ordinal);

    public bool CanMarkCompleted => !IsUpdating && SelectedOrder is not null && (string.Equals(SelectedOrder.StatusKey, nameof(OrderStatus.Ongoing), StringComparison.Ordinal) || string.Equals(SelectedOrder.StatusKey, nameof(OrderStatus.PendingReview), StringComparison.Ordinal));

    public bool CanMarkPendingReview => !IsUpdating && SelectedOrder is not null && string.Equals(SelectedOrder.StatusKey, nameof(OrderStatus.Ongoing), StringComparison.Ordinal);

    public bool CanMarkCancelled => !IsUpdating && SelectedOrder is not null && !string.Equals(SelectedOrder.StatusKey, nameof(OrderStatus.Completed), StringComparison.Ordinal) && !string.Equals(SelectedOrder.StatusKey, nameof(OrderStatus.Cancelled), StringComparison.Ordinal);

    #endregion

    #region Commands

    public ICommand RefreshCommand { get; }

    public ICommand MarkPaidCommand { get; }

    public ICommand MarkCompletedCommand { get; }

    public ICommand MarkPendingReviewCommand { get; }

    public ICommand MarkCancelledCommand { get; }

    public ICommand LogoutCommand { get; }

    #endregion

    #region Public API

    public async Task LoadAsync()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;
        StatusMessage = string.Empty;

        try
        {
            if (!await EnsureAdminAsync())
            {
                return;
            }

            await LoadReferenceDataAsync();
            await LoadOrdersAsync();
        }
        catch (Exception ex)
        {
            StatusMessage = $"加载订单失败：{ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Admin orders load failed: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    #endregion

    #region Data Loading

    private async Task<bool> EnsureAdminAsync()
    {
        var user = await _authService.GetCurrentUserAsync();
        var isAdmin = user?.IsAdmin == true;
        IsAccessDenied = !isAdmin;
        return isAdmin;
    }

    private void InitializeFilters()
    {
        StatusFilters.Clear();
        StatusFilters.Add(new AdminOrderFilter(null, "全部订单"));
        StatusFilters.Add(new AdminOrderFilter(nameof(OrderStatus.PendingPayment), "待支付"));
        StatusFilters.Add(new AdminOrderFilter(nameof(OrderStatus.Ongoing), "进行中"));
        StatusFilters.Add(new AdminOrderFilter(nameof(OrderStatus.PendingReview), "待评价"));
        StatusFilters.Add(new AdminOrderFilter(nameof(OrderStatus.Completed), "已完成"));
        StatusFilters.Add(new AdminOrderFilter(nameof(OrderStatus.RefundRequested), "退款申请"));
        StatusFilters.Add(new AdminOrderFilter(nameof(OrderStatus.Cancelled), "已取消"));

        SelectedFilter = StatusFilters.FirstOrDefault();
    }

    private async Task LoadReferenceDataAsync()
    {
        _serviceLookup.Clear();
        var services = await _dataService.GetServicesAsync();
        foreach (var service in services)
        {
            _serviceLookup[service.Id] = service;
        }
    }

    private async Task LoadOrdersAsync()
    {
        _allOrders.Clear();
        _allOrderItems.Clear();
        Orders.Clear();

        var orders = await _dataService.GetAllOrdersAsync();
        _allOrders.AddRange(orders);

        var buyerIds = orders.Select(o => o.BuyerId).Distinct().ToList();
        var userTasks = buyerIds.Select(id => _dataService.GetUserAsync(id));
        var users = await Task.WhenAll(userTasks);

        _userLookup.Clear();
        for (int i = 0; i < buyerIds.Count; i++)
        {
            if (users[i] is not null)
            {
                _userLookup[buyerIds[i]] = users[i]!;
            }
        }

        foreach (var order in orders)
        {
            var item = CreateOrderItem(order);
            _allOrderItems.Add(item);
        }

        UpdateFilterCounts();
        ApplyFilter();
        OnPropertyChanged(nameof(HasOrders));

        if (Orders.Count > 0)
        {
            SelectedOrder = Orders[0];
        }
    }

    #endregion

    #region Filtering

    private void ApplyFilter(int? keepSelectionId = null)
    {
        IEnumerable<AdminOrderItem> query = _allOrderItems;

        if (!string.IsNullOrWhiteSpace(SelectedFilter?.StatusKey))
        {
            query = query.Where(item => string.Equals(item.StatusKey, SelectedFilter!.StatusKey, StringComparison.Ordinal));
        }

        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            var keyword = SearchText.Trim();
            query = query.Where(item =>
                item.ServiceTitle.Contains(keyword, StringComparison.OrdinalIgnoreCase) ||
                item.BuyerName.Contains(keyword, StringComparison.OrdinalIgnoreCase) ||
                item.OrderId.ToString(CultureInfo.InvariantCulture).Contains(keyword, StringComparison.OrdinalIgnoreCase));
        }

        var filtered = query
            .OrderByDescending(item => item.OrderDate)
            .ToList();

        Orders.Clear();
        foreach (var item in filtered)
        {
            Orders.Add(item);
        }

        OnPropertyChanged(nameof(HasOrders));

        if (keepSelectionId.HasValue)
        {
            SelectedOrder = Orders.FirstOrDefault(o => o.OrderId == keepSelectionId.Value);
        }
        else if (SelectedOrder is not null && !Orders.Contains(SelectedOrder))
        {
            SelectedOrder = Orders.FirstOrDefault();
        }
    }

    private void UpdateFilterCounts()
    {
        foreach (var filter in StatusFilters)
        {
            if (string.IsNullOrWhiteSpace(filter.StatusKey))
            {
                filter.Count = _allOrderItems.Count;
            }
            else
            {
                filter.Count = _allOrderItems.Count(item => string.Equals(item.StatusKey, filter.StatusKey, StringComparison.Ordinal));
            }
        }
    }

    #endregion

    #region Status Updates

    private async Task MarkPaidAsync()
    {
        if (!CanMarkPaid || SelectedOrder is null)
        {
            return;
        }

        await RunUpdateAsync(async () =>
        {
            var updated = await _dataService.MarkOrderAsPaidAsync(SelectedOrder.OrderId);
            if (updated is null)
            {
                StatusMessage = "标记支付失败：订单不存在。";
                return;
            }

            ApplyOrderUpdate(updated);
            StatusMessage = "已标记为已支付。";
        });
    }

    private async Task MarkCompletedAsync()
    {
        if (!CanMarkCompleted || SelectedOrder is null)
        {
            return;
        }

        await RunUpdateAsync(async () =>
        {
            var updated = await _dataService.UpdateOrderStatusAsync(
                SelectedOrder.OrderId,
                nameof(OrderStatus.Completed),
                completionDate: DateTime.UtcNow);

            if (updated is null)
            {
                StatusMessage = "标记完成失败：订单不存在。";
                return;
            }

            ApplyOrderUpdate(updated);
            StatusMessage = "订单已标记为完成。";
        });
    }

    private async Task MarkPendingReviewAsync()
    {
        if (!CanMarkPendingReview || SelectedOrder is null)
        {
            return;
        }

        await RunUpdateAsync(async () =>
        {
            var updated = await _dataService.UpdateOrderStatusAsync(
                SelectedOrder.OrderId,
                nameof(OrderStatus.PendingReview));

            if (updated is null)
            {
                StatusMessage = "标记待评价失败：订单不存在。";
                return;
            }

            ApplyOrderUpdate(updated);
            StatusMessage = "订单状态已改为待评价。";
        });
    }

    private async Task MarkCancelledAsync()
    {
        if (!CanMarkCancelled || SelectedOrder is null)
        {
            return;
        }

        await RunUpdateAsync(async () =>
        {
            var updated = await _dataService.UpdateOrderStatusAsync(
                SelectedOrder.OrderId,
                nameof(OrderStatus.Cancelled),
                refundRequestedAt: DateTime.UtcNow);

            if (updated is null)
            {
                StatusMessage = "取消订单失败：订单不存在。";
                return;
            }

            ApplyOrderUpdate(updated);
            StatusMessage = "订单已取消。";
        });
    }

    private async Task RunUpdateAsync(Func<Task> operation)
    {
        if (IsUpdating)
        {
            return;
        }

        IsUpdating = true;
        try
        {
            await operation();
        }
        catch (Exception ex)
        {
            StatusMessage = $"操作失败：{ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Admin order update failed: {ex.Message}");
        }
        finally
        {
            IsUpdating = false;
        }
    }

    private void ApplyOrderUpdate(Order updated)
    {
        var selectedId = SelectedOrder?.OrderId;

        var existingIndex = _allOrders.FindIndex(o => o.Id == updated.Id);
        if (existingIndex >= 0)
        {
            _allOrders[existingIndex] = updated;
        }

        var item = _allOrderItems.FirstOrDefault(o => o.OrderId == updated.Id);
        if (item is not null)
        {
            item.Update(updated);
        }

        UpdateFilterCounts();
        ApplyFilter(selectedId);
        UpdateCommandStates();
        OnPropertyChanged(nameof(HasOrders));
    }

    #endregion

    #region Helpers

    private AdminOrderItem CreateOrderItem(Order order)
    {
        var serviceTitle = _serviceLookup.TryGetValue(order.ServiceId, out var service)
            ? service.Title ?? $"服务 #{service.Id}"
            : $"服务 #{order.ServiceId}";

        var buyerName = _userLookup.TryGetValue(order.BuyerId, out var buyer)
            ? string.IsNullOrWhiteSpace(buyer.Nickname) ? buyer.Username : buyer.Nickname
            : $"用户 #{order.BuyerId}";

        return new AdminOrderItem(order, serviceTitle, buyerName);
    }

    private void UpdateCommandStates()
    {
        ((Command)MarkPaidCommand).ChangeCanExecute();
        ((Command)MarkCompletedCommand).ChangeCanExecute();
        ((Command)MarkPendingReviewCommand).ChangeCanExecute();
        ((Command)MarkCancelledCommand).ChangeCanExecute();

        OnPropertyChanged(nameof(CanMarkPaid));
        OnPropertyChanged(nameof(CanMarkCompleted));
        OnPropertyChanged(nameof(CanMarkPendingReview));
        OnPropertyChanged(nameof(CanMarkCancelled));
    }

    private async Task LogoutAsync()
    {
        if (_isLoggingOut)
        {
            return;
        }

        _isLoggingOut = true;
        ((Command)LogoutCommand).ChangeCanExecute();

        try
        {
            await _authService.LogoutAsync();
        }
        catch (Exception ex)
        {
            StatusMessage = $"退出登录失败：{ex.Message}";
        }
        finally
        {
            _isLoggingOut = false;
            ((Command)LogoutCommand).ChangeCanExecute();
        }
    }

    #endregion

    #region Nested Types

    public class AdminOrderFilter : BaseViewModel
    {
        public AdminOrderFilter(string? statusKey, string displayName)
        {
            StatusKey = statusKey;
            DisplayName = displayName;
        }

        public string? StatusKey { get; }
        public string DisplayName { get; }

        private int _count;
        public int Count
        {
            get => _count;
            set
            {
                if (_count == value)
                {
                    return;
                }

                _count = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(CountDisplay));
            }
        }

        public string CountDisplay => $"({Count})";
    }

    public class AdminOrderItem : BaseViewModel
    {
        private Order _order;
        private readonly string _serviceTitle;
        private readonly string _buyerName;

        public AdminOrderItem(Order order, string serviceTitle, string buyerName)
        {
            _order = order;
            _serviceTitle = serviceTitle;
            _buyerName = buyerName;
        }

        public int OrderId => _order.Id;
        public string ServiceTitle => _serviceTitle;
        public string BuyerName => _buyerName;
        public string StatusKey => _order.Status;
        public DateTime OrderDate => _order.OrderDate;
        public decimal TotalPrice => _order.TotalPrice;

        public string StatusDisplay => StatusKey switch
        {
            nameof(OrderStatus.PendingPayment) => "待支付",
            nameof(OrderStatus.Ongoing) => "进行中",
            nameof(OrderStatus.PendingReview) => "待评价",
            nameof(OrderStatus.Completed) => "已完成",
            nameof(OrderStatus.RefundRequested) => "退款申请",
            nameof(OrderStatus.Cancelled) => "已取消",
            _ => StatusKey
        };

        public string StatusBadgeColor => StatusKey switch
        {
            nameof(OrderStatus.PendingPayment) => "#FFF3E0",
            nameof(OrderStatus.Ongoing) => "#E5F1FF",
            nameof(OrderStatus.PendingReview) => "#F3E8FF",
            nameof(OrderStatus.Completed) => "#E6F8EE",
            nameof(OrderStatus.RefundRequested) => "#FFE7E7",
            nameof(OrderStatus.Cancelled) => "#EEF1F5",
            _ => "#EEF1F5"
        };

        public string StatusTextColor => StatusKey switch
        {
            nameof(OrderStatus.PendingPayment) => "#FF8A00",
            nameof(OrderStatus.Ongoing) => "#3478F6",
            nameof(OrderStatus.PendingReview) => "#8E24AA",
            nameof(OrderStatus.Completed) => "#2DBE60",
            nameof(OrderStatus.RefundRequested) => "#FF4D4F",
            nameof(OrderStatus.Cancelled) => "#6B7280",
            _ => "#6B7280"
        };

        public string OrderDateDisplay => _order.OrderDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.CurrentCulture);

        public string TotalPriceDisplay => _order.TotalPrice.ToString("C0", CultureInfo.CurrentCulture);

        public string PaymentDateDisplay => _order.PaymentDate.HasValue
            ? _order.PaymentDate.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.CurrentCulture)
            : "未支付";

        public string CompletionDateDisplay => _order.CompletionDate.HasValue
            ? _order.CompletionDate.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.CurrentCulture)
            : "未完成";

        public string RefundDateDisplay => _order.RefundRequestDate.HasValue
            ? _order.RefundRequestDate.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.CurrentCulture)
            : "-";

        public string OrderNumberDisplay => $"订单号：{OrderId:D6}";

        public void Update(Order order)
        {
            _order = order;

            OnPropertyChanged(nameof(StatusKey));
            OnPropertyChanged(nameof(StatusDisplay));
            OnPropertyChanged(nameof(StatusBadgeColor));
            OnPropertyChanged(nameof(StatusTextColor));
            OnPropertyChanged(nameof(OrderDate));
            OnPropertyChanged(nameof(OrderDateDisplay));
            OnPropertyChanged(nameof(TotalPrice));
            OnPropertyChanged(nameof(TotalPriceDisplay));
            OnPropertyChanged(nameof(PaymentDateDisplay));
            OnPropertyChanged(nameof(CompletionDateDisplay));
            OnPropertyChanged(nameof(RefundDateDisplay));
        }
    }

    #endregion
}
】

ViewModels/AdminUsersViewModel.cs:
【using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels;

public class AdminUsersViewModel : BaseViewModel
{
    private readonly IDataService _dataService;
    private readonly IAuthService _authService;
    private readonly List<User> _allUsers = new();

    private bool _isBusy;
    private bool _isSaving;
    private bool _isAccessDenied;
    private bool _isLoggingOut;
    private string _searchText = string.Empty;
    private string _statusMessage = string.Empty;
    private bool _isFormDirty;
    private UserListItem? _selectedUser;
    private UserFilter? _selectedFilter;

    public AdminUsersViewModel(IDataService dataService, IAuthService authService)
    {
        _dataService = dataService;
        _authService = authService;

        RefreshCommand = new Command(async () => await LoadAsync(), () => !IsBusy);
        SaveCommand = new Command(async () => await SaveAsync(), () => CanSave);
        ResetCommand = new Command(ResetForm, () => CanReset);
        LogoutCommand = new Command(async () => await LogoutAsync(), () => !_isLoggingOut);

        InitializeFilters();
        UpdateSummaryMetrics();

        UserForm.PropertyChanged += (_, _) => UpdateFormState();
    }

    #region Collections

    public ObservableCollection<UserListItem> Users { get; } = new();

    public ObservableCollection<UserSummaryMetric> SummaryMetrics { get; } = new();

    public ObservableCollection<UserFilter> Filters { get; } = new();

    public EditableUserForm UserForm { get; } = new();

    #endregion

    #region Bindable Properties

    public string SearchText
    {
        get => _searchText;
        set
        {
            if (_searchText == value)
            {
                return;
            }

            _searchText = value ?? string.Empty;
            OnPropertyChanged();
            ApplyFilter(_selectedUser?.Id);
        }
    }

    public bool IsBusy
    {
        get => _isBusy;
        private set
        {
            if (_isBusy == value)
            {
                return;
            }

            _isBusy = value;
            OnPropertyChanged();
            ((Command)RefreshCommand).ChangeCanExecute();
        }
    }

    public bool IsSaving
    {
        get => _isSaving;
        private set
        {
            if (_isSaving == value)
            {
                return;
            }

            _isSaving = value;
            OnPropertyChanged();
            UpdateCommandStates();
        }
    }

    public bool IsAccessDenied
    {
        get => _isAccessDenied;
        private set
        {
            if (_isAccessDenied == value)
            {
                return;
            }

            _isAccessDenied = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasAccess));
        }
    }

    public bool HasAccess => !IsAccessDenied;

    public string StatusMessage
    {
        get => _statusMessage;
        private set
        {
            if (_statusMessage == value)
            {
                return;
            }

            _statusMessage = value ?? string.Empty;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasStatusMessage));
        }
    }

    public bool HasStatusMessage => !string.IsNullOrWhiteSpace(StatusMessage);

    public bool IsFormDirty
    {
        get => _isFormDirty;
        private set
        {
            if (_isFormDirty == value)
            {
                return;
            }

            _isFormDirty = value;
            OnPropertyChanged();
            UpdateCommandStates();
        }
    }

    public UserFilter? SelectedFilter
    {
        get => _selectedFilter;
        set
        {
            if (_selectedFilter == value)
            {
                return;
            }

            _selectedFilter = value;
            OnPropertyChanged();
            ApplyFilter(_selectedUser?.Id);
        }
    }

    public UserListItem? SelectedUser
    {
        get => _selectedUser;
        set
        {
            if (_selectedUser == value)
            {
                return;
            }

            _selectedUser = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasSelection));
            LoadFormFromSelection();
            UpdateCommandStates();
        }
    }

    public bool HasSelection => SelectedUser is not null;

    public bool HasUsers => Users.Count > 0;

    public bool CanSave => !IsSaving && HasSelection && UserForm.IsDirty && !UserForm.HasValidationError;

    public bool CanReset => !IsSaving && HasSelection && UserForm.IsDirty;

    #endregion

    #region Commands

    public ICommand RefreshCommand { get; }

    public ICommand SaveCommand { get; }

    public ICommand ResetCommand { get; }

    public ICommand LogoutCommand { get; }

    #endregion

    #region Public API

    public async Task LoadAsync()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;
        StatusMessage = string.Empty;

        try
        {
            if (!await EnsureAdminAsync())
            {
                return;
            }

            await LoadUsersAsync();
            UpdateSummaryMetrics();

            if (Users.Count > 0 && SelectedUser is null)
            {
                SelectedUser = Users[0];
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"加载用户数据失败：{ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Admin users load failed: {ex}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    #endregion

    #region Internal Helpers

    private async Task<bool> EnsureAdminAsync()
    {
        var user = await _authService.GetCurrentUserAsync();
        var isAdmin = user?.IsAdmin == true;
        IsAccessDenied = !isAdmin;
        return isAdmin;
    }

    private async Task LoadUsersAsync()
    {
        _allUsers.Clear();

        var users = await _dataService.GetAllUsersAsync();
        foreach (var user in users)
        {
            _allUsers.Add(user);
        }

        UpdateFilterCounts();
        ApplyFilter(_selectedUser?.Id);
    }

    private void ApplyFilter(int? keepSelectionId = null)
    {
        IEnumerable<User> query = _allUsers;

        if (SelectedFilter?.Predicate is not null)
        {
            query = query.Where(SelectedFilter.Predicate);
        }

        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            var keyword = SearchText.Trim();
            query = query.Where(user =>
                (!string.IsNullOrWhiteSpace(user.Username) && user.Username.Contains(keyword, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(user.Email) && user.Email.Contains(keyword, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(user.Nickname) && user.Nickname.Contains(keyword, StringComparison.OrdinalIgnoreCase)));
        }

        var items = query
            .OrderByDescending(user => user.IsAdmin)
            .ThenByDescending(user => user.CreatedAt)
            .Select(user => new UserListItem(user))
            .ToList();

        Users.Clear();
        foreach (var item in items)
        {
            Users.Add(item);
        }

        OnPropertyChanged(nameof(HasUsers));

        if (keepSelectionId.HasValue)
        {
            SelectedUser = Users.FirstOrDefault(u => u.Id == keepSelectionId.Value);
        }
        else if (SelectedUser is not null && Users.All(u => u.Id != SelectedUser.Id))
        {
            SelectedUser = Users.FirstOrDefault();
        }
        else if (SelectedUser is null && Users.Count > 0)
        {
            SelectedUser = Users[0];
        }
    }

    private void UpdateSummaryMetrics()
    {
        void Update()
        {
            SummaryMetrics.Clear();

            var now = DateTime.UtcNow;
            var total = _allUsers.Count;
            var adminCount = _allUsers.Count(u => u.IsAdmin);
            var new30 = _allUsers.Count(u => u.CreatedAt >= now.AddDays(-30));
            var active7 = _allUsers.Count(u => u.LastLoginAt.HasValue && u.LastLoginAt.Value >= now.AddDays(-7));

            SummaryMetrics.Add(new UserSummaryMetric("用户总数", total.ToString(CultureInfo.InvariantCulture), "当前系统内所有注册用户"));
            SummaryMetrics.Add(new UserSummaryMetric("管理员数", adminCount.ToString(CultureInfo.InvariantCulture), "拥有后台权限的账号数量"));
            SummaryMetrics.Add(new UserSummaryMetric("近30天新增", new30.ToString(CultureInfo.InvariantCulture), "最近30天内注册的用户"));
            SummaryMetrics.Add(new UserSummaryMetric("7天活跃", active7.ToString(CultureInfo.InvariantCulture), "最近7天内登录过的用户"));
        }

        if (MainThread.IsMainThread)
        {
            Update();
        }
        else
        {
            MainThread.BeginInvokeOnMainThread(Update);
        }
    }

    private void InitializeFilters()
    {
        Filters.Clear();

        Filters.Add(new UserFilter("all", "全部用户"));
        Filters.Add(new UserFilter("admin", "管理员", user => user.IsAdmin));
        Filters.Add(new UserFilter("new30", "近30天注册", user => user.CreatedAt >= DateTime.UtcNow.AddDays(-30)));
        Filters.Add(new UserFilter("inactive30", "30天未登录", user => !user.LastLoginAt.HasValue || user.LastLoginAt.Value < DateTime.UtcNow.AddDays(-30)));

        SelectedFilter = Filters.FirstOrDefault();
    }

    private void UpdateFilterCounts()
    {
        foreach (var filter in Filters)
        {
            if (filter.Predicate is null)
            {
                filter.Count = _allUsers.Count;
            }
            else
            {
                filter.Count = _allUsers.Count(filter.Predicate);
            }
        }
    }

    private async Task SaveAsync()
    {
        if (!CanSave || SelectedUser is null)
        {
            return;
        }

        IsSaving = true;
        StatusMessage = string.Empty;

        try
        {
            var user = SelectedUser.User;
            UserForm.ApplyTo(user);

            await _dataService.UpdateUserAsync(user);
            UserForm.AcceptChanges();

            SelectedUser.NotifyUpdated();
            UpdateFilterCounts();
            UpdateSummaryMetrics();
            ApplyFilter(user.Id);

            StatusMessage = "用户信息已保存";
        }
        catch (Exception ex)
        {
            StatusMessage = $"保存失败：{ex.Message}";
            System.Diagnostics.Debug.WriteLine($"User save failed: {ex}");
        }
        finally
        {
            IsSaving = false;
        }
    }

    private void ResetForm()
    {
        if (SelectedUser is null)
        {
            return;
        }

        UserForm.LoadFrom(SelectedUser.User);
    }

    private void LoadFormFromSelection()
    {
        if (SelectedUser is null)
        {
            UserForm.Clear();
            return;
        }

        UserForm.LoadFrom(SelectedUser.User);
    }

    private async Task LogoutAsync()
    {
        if (_isLoggingOut)
        {
            return;
        }

        _isLoggingOut = true;
        ((Command)LogoutCommand).ChangeCanExecute();

        try
        {
            await _authService.LogoutAsync();
        }
        catch (Exception ex)
        {
            StatusMessage = $"退出登录失败：{ex.Message}";
        }
        finally
        {
            _isLoggingOut = false;
            ((Command)LogoutCommand).ChangeCanExecute();
        }
    }

    private void UpdateFormState()
    {
        IsFormDirty = UserForm.IsDirty;
        UpdateCommandStates();
    }

    private void UpdateCommandStates()
    {
        ((Command)SaveCommand).ChangeCanExecute();
        ((Command)ResetCommand).ChangeCanExecute();
    }

    #endregion

    #region Nested Types

    public class UserSummaryMetric
    {
        public UserSummaryMetric(string title, string value, string description)
        {
            Title = title;
            Value = value;
            Description = description;
        }

        public string Title { get; }

        public string Value { get; }

        public string Description { get; }
    }

    public class UserFilter : BaseViewModel
    {
        private int _count;

        public UserFilter(string key, string displayName, Func<User, bool>? predicate = null)
        {
            Key = key;
            DisplayName = displayName;
            Predicate = predicate;
        }

        public string Key { get; }

        public string DisplayName { get; }

        public Func<User, bool>? Predicate { get; }

        public int Count
        {
            get => _count;
            set
            {
                if (_count == value)
                {
                    return;
                }

                _count = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(CountDisplay));
            }
        }

        public string CountDisplay => _count.ToString(CultureInfo.InvariantCulture);
    }

    public class UserListItem : BaseViewModel
    {
        private readonly User _user;

        public UserListItem(User user)
        {
            _user = user ?? throw new ArgumentNullException(nameof(user));
        }

        public User User => _user;

        public int Id => _user.Id;

        public string DisplayName => string.IsNullOrWhiteSpace(_user.Nickname)
            ? (string.IsNullOrWhiteSpace(_user.Username) ? $"用户 #{_user.Id}" : _user.Username)
            : _user.Nickname;

        public string Username => _user.Username;

        public string Email => _user.Email;

        public bool IsAdmin => _user.IsAdmin;

        public string RoleBadge => IsAdmin ? "管理员" : "普通用户";

        public string RoleBadgeColor => IsAdmin ? "#3478F6" : "#7A8196";

        public string SecondaryText => string.IsNullOrWhiteSpace(Email)
            ? Username
            : $"{Username} · {Email}";

        public string CreatedAtDisplay => $"注册 {FormatDate(_user.CreatedAt)}";

        public string LastLoginDisplay => _user.LastLoginAt.HasValue
            ? $"最近登录 {FormatDateTime(_user.LastLoginAt.Value)}"
            : "尚未登录";

        public string ActivityBadge
        {
            get
            {
                if (!_user.LastLoginAt.HasValue)
                {
                    return "未登录";
                }

                var lastLoginUtc = _user.LastLoginAt.Value;

                if (lastLoginUtc >= DateTime.UtcNow.AddDays(-7))
                {
                    return "7天活跃";
                }

                if (lastLoginUtc >= DateTime.UtcNow.AddDays(-30))
                {
                    return "30天登录";
                }

                return "长期未登录";
            }
        }

        public string ActivityBadgeColor => ActivityBadge switch
        {
            "7天活跃" => "#2DBE60",
            "30天登录" => "#FF9F0A",
            "未登录" => "#FF4D4F",
            _ => "#7A8196"
        };

        public string AvatarInitial => string.IsNullOrWhiteSpace(DisplayName)
            ? "#"
            : DisplayName.Substring(0, 1).ToUpperInvariant();

        private static string FormatDate(DateTime utc) =>
            utc.ToLocalTime().ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

        private static string FormatDateTime(DateTime utc) =>
            utc.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);

        public void NotifyUpdated()
        {
            OnPropertyChanged(nameof(DisplayName));
            OnPropertyChanged(nameof(Username));
            OnPropertyChanged(nameof(Email));
            OnPropertyChanged(nameof(IsAdmin));
            OnPropertyChanged(nameof(RoleBadge));
            OnPropertyChanged(nameof(RoleBadgeColor));
            OnPropertyChanged(nameof(SecondaryText));
            OnPropertyChanged(nameof(CreatedAtDisplay));
            OnPropertyChanged(nameof(LastLoginDisplay));
            OnPropertyChanged(nameof(ActivityBadge));
            OnPropertyChanged(nameof(ActivityBadgeColor));
            OnPropertyChanged(nameof(AvatarInitial));
        }
    }

    public class EditableUserForm : BaseViewModel
    {
        private bool _isInitializing;
        private int _id;
        private string _username = string.Empty;
        private string _nickname = string.Empty;
        private string _email = string.Empty;
        private string _avatarUrl = string.Empty;
        private bool _isAdmin;
        private bool _isDirty;
        private bool _hasValidationError;
        private string _validationMessage = string.Empty;

        private string _originalNickname = string.Empty;
        private string _originalEmail = string.Empty;
        private string _originalAvatarUrl = string.Empty;
        private bool _originalIsAdmin;

        public int Id
        {
            get => _id;
            private set
            {
                if (_id == value)
                {
                    return;
                }

                _id = value;
                OnPropertyChanged();
            }
        }

        public string Username
        {
            get => _username;
            set
            {
                if (_username == value)
                {
                    return;
                }

                _username = value ?? string.Empty;
                OnPropertyChanged();
                MarkDirty();
            }
        }

        public string Nickname
        {
            get => _nickname;
            set
            {
                if (_nickname == value)
                {
                    return;
                }

                _nickname = value ?? string.Empty;
                OnPropertyChanged();
                MarkDirty();
            }
        }

        public string Email
        {
            get => _email;
            set
            {
                if (_email == value)
                {
                    return;
                }

                _email = value ?? string.Empty;
                OnPropertyChanged();
                Validate();
                MarkDirty();
            }
        }

        public string AvatarUrl
        {
            get => _avatarUrl;
            set
            {
                if (_avatarUrl == value)
                {
                    return;
                }

                _avatarUrl = value ?? string.Empty;
                OnPropertyChanged();
                MarkDirty();
            }
        }

        public bool IsAdmin
        {
            get => _isAdmin;
            set
            {
                if (_isAdmin == value)
                {
                    return;
                }

                _isAdmin = value;
                OnPropertyChanged();
                MarkDirty();
            }
        }

        public bool IsDirty
        {
            get => _isDirty;
            private set
            {
                if (_isDirty == value)
                {
                    return;
                }

                _isDirty = value;
                OnPropertyChanged();
            }
        }

        public bool HasValidationError
        {
            get => _hasValidationError;
            private set
            {
                if (_hasValidationError == value)
                {
                    return;
                }

                _hasValidationError = value;
                OnPropertyChanged();
            }
        }

        public string ValidationMessage
        {
            get => _validationMessage;
            private set
            {
                if (_validationMessage == value)
                {
                    return;
                }

                _validationMessage = value ?? string.Empty;
                OnPropertyChanged();
            }
        }

        public void LoadFrom(User user)
        {
            ArgumentNullException.ThrowIfNull(user);

            _isInitializing = true;

            Id = user.Id;
            Username = user.Username;
            Nickname = user.Nickname;
            Email = user.Email;
            AvatarUrl = user.AvatarUrl;
            IsAdmin = user.IsAdmin;

            _originalNickname = Nickname;
            _originalEmail = Email;
            _originalAvatarUrl = AvatarUrl;
            _originalIsAdmin = IsAdmin;

            HasValidationError = false;
            ValidationMessage = string.Empty;
            IsDirty = false;

            _isInitializing = false;
        }

        public void ApplyTo(User user)
        {
            ArgumentNullException.ThrowIfNull(user);

            user.Nickname = Nickname?.Trim() ?? string.Empty;
            user.Email = Email?.Trim() ?? string.Empty;
            user.AvatarUrl = AvatarUrl?.Trim() ?? string.Empty;
            user.IsAdmin = IsAdmin;
        }

        public void AcceptChanges()
        {
            _originalNickname = Nickname;
            _originalEmail = Email;
            _originalAvatarUrl = AvatarUrl;
            _originalIsAdmin = IsAdmin;

            IsDirty = false;
        }

        public void Clear()
        {
            _isInitializing = true;

            Id = 0;
            Username = string.Empty;
            Nickname = string.Empty;
            Email = string.Empty;
            AvatarUrl = string.Empty;
            IsAdmin = false;

            _originalNickname = string.Empty;
            _originalEmail = string.Empty;
            _originalAvatarUrl = string.Empty;
            _originalIsAdmin = false;

            HasValidationError = false;
            ValidationMessage = string.Empty;
            IsDirty = false;

            _isInitializing = false;
        }

        private void MarkDirty()
        {
            if (_isInitializing)
            {
                return;
            }

            var dirty = !string.Equals(_nickname, _originalNickname, StringComparison.Ordinal) ||
                        !string.Equals(_email, _originalEmail, StringComparison.OrdinalIgnoreCase) ||
                        !string.Equals(_avatarUrl, _originalAvatarUrl, StringComparison.Ordinal) ||
                        _isAdmin != _originalIsAdmin;

            IsDirty = dirty;
        }

        private void Validate()
        {
            if (_isInitializing)
            {
                HasValidationError = false;
                ValidationMessage = string.Empty;
                return;
            }

            if (string.IsNullOrWhiteSpace(_email))
            {
                HasValidationError = true;
                ValidationMessage = "邮箱不能为空";
                return;
            }

            if (!_email.Contains('@', StringComparison.Ordinal))
            {
                HasValidationError = true;
                ValidationMessage = "邮箱格式看起来不正确";
                return;
            }

            HasValidationError = false;
            ValidationMessage = string.Empty;
        }
    }

    #endregion
}
】

ViewModels/BaseViewModel.cs:
【using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace GamerLinkApp.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
】

ViewModels/FavoriteServicesViewModel.cs:
【using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels
{
    public class FavoriteServicesViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;
        private readonly IAuthService _authService;
        private bool _isLoading;
        private bool _isUpdatingFavorite;
        private int? _currentUserId;

        public ObservableCollection<Service> Favorites { get; } = new();

        public bool IsLoading
        {
            get => _isLoading;
            private set
            {
                if (_isLoading == value)
                {
                    return;
                }

                _isLoading = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(IsEmpty));
            }
        }

        public bool IsEmpty => !IsLoading && Favorites.Count == 0;

        public ICommand ToggleFavoriteCommand { get; }

        public FavoriteServicesViewModel(IDataService dataService, IAuthService authService)
        {
            _dataService = dataService;
            _authService = authService;
            ToggleFavoriteCommand = new Command<Service>(async service => await ToggleFavoriteAsync(service));
            Favorites.CollectionChanged += (_, __) => OnPropertyChanged(nameof(IsEmpty));
            _authService.CurrentUserChanged += OnCurrentUserChanged;
        }

        private async Task<int?> GetCurrentUserIdAsync()
        {
            if (_currentUserId.HasValue)
            {
                return _currentUserId;
            }

            var user = await _authService.GetCurrentUserAsync();
            _currentUserId = user?.Id;
            return _currentUserId;
        }

        private void OnCurrentUserChanged(object? sender, User? user)
        {
            _currentUserId = user?.Id;

            _ = MainThread.InvokeOnMainThreadAsync(async () =>
            {
                Favorites.Clear();
                OnPropertyChanged(nameof(IsEmpty));

                if (user is not null)
                {
                    await LoadAsync();
                }
            });
        }

        public async Task LoadAsync()
        {
            if (IsLoading)
            {
                return;
            }

            IsLoading = true;

            try
            {
                var userId = await GetCurrentUserIdAsync();
                if (userId is null)
                {
                    Favorites.Clear();
                    return;
                }

                var services = await _dataService.GetFavoriteServicesAsync(userId.Value);

                Favorites.Clear();
                foreach (var service in services)
                {
                    service.IsFavorite = true;
                    Favorites.Add(service);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load favorites: {ex.Message}");
                Favorites.Clear();
            }
            finally
            {
                IsLoading = false;
            }
        }

        public async Task RefreshAsync()
        {
            await LoadAsync();
        }

        private async Task ToggleFavoriteAsync(Service service)
        {
            if (service is null || _isUpdatingFavorite)
            {
                return;
            }

            _isUpdatingFavorite = true;

            try
            {
                if (!await AuthNavigationHelper.EnsureAuthenticatedAsync(_authService))
                {
                    return;
                }

                var userId = await GetCurrentUserIdAsync();
                if (userId is null)
                {
                    return;
                }

                var isFavorite = await _dataService.ToggleFavoriteAsync(userId.Value, service.Id);

                if (!isFavorite)
                {
                    Favorites.Remove(service);
                }
                else if (!Favorites.Contains(service))
                {
                    Favorites.Add(service);
                }

                if (service.IsFavorite != isFavorite)
                {
                    service.IsFavorite = isFavorite;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to toggle favorite in favorites list: {ex.Message}");
            }
            finally
            {
                _isUpdatingFavorite = false;
            }
        }
    }
}
】

ViewModels/LoginViewModel.cs:
【using System;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Services;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels;

public class LoginViewModel : BaseViewModel
{
    private readonly IAuthService _authService;

    private string _account = string.Empty;
    private string _password = string.Empty;
    private bool _isBusy;
    private string _errorMessage = string.Empty;

    public LoginViewModel(IAuthService authService)
    {
        _authService = authService;
        LoginCommand = new Command(async () => await ExecuteLoginAsync(), () => CanLogin);
    }

    public string Account
    {
        get => _account;
        set
        {
            if (_account == value)
            {
                return;
            }

            _account = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanLogin));
            ((Command)LoginCommand).ChangeCanExecute();
        }
    }

    public string Password
    {
        get => _password;
        set
        {
            if (_password == value)
            {
                return;
            }

            _password = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanLogin));
            ((Command)LoginCommand).ChangeCanExecute();
        }
    }

    public bool IsBusy
    {
        get => _isBusy;
        private set
        {
            if (_isBusy == value)
            {
                return;
            }

            _isBusy = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanLogin));
            ((Command)LoginCommand).ChangeCanExecute();
        }
    }

    public string ErrorMessage
    {
        get => _errorMessage;
        private set
        {
            if (_errorMessage == value)
            {
                return;
            }

            _errorMessage = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasError));
        }
    }

    public bool HasError => !string.IsNullOrWhiteSpace(ErrorMessage);

    public bool CanLogin => !IsBusy && !string.IsNullOrWhiteSpace(Account) && !string.IsNullOrWhiteSpace(Password);

    public ICommand LoginCommand { get; }

    private async Task ExecuteLoginAsync()
    {
        if (!CanLogin)
        {
            return;
        }

        try
        {
            IsBusy = true;
            ErrorMessage = string.Empty;

            var result = await _authService.LoginAsync(Account, Password);
            if (!result.Success)
            {
                ErrorMessage = result.ErrorMessage ?? "登录失败";
            }
            else
            {
                Password = string.Empty;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"ExecuteLoginAsync failed: {ex.Message}");
            ErrorMessage = "登录失败，请稍后重试";
        }
        finally
        {
            IsBusy = false;
        }
    }
}
】

ViewModels/OrderListViewModel.cs:
【using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using Microsoft.Maui.ApplicationModel;

namespace GamerLinkApp.ViewModels;

public class OrderListViewModel : BaseViewModel
{
    private readonly IDataService _dataService;
    private readonly IAuthService _authService;
    private readonly List<OrderListItem> _allOrders = new();

    private OrderFilterOption? _selectedFilter;
    private bool _isLoading;
    private int? _currentUserId;

    public ObservableCollection<OrderFilterOption> StatusFilters { get; } = new();
    public ObservableCollection<OrderListItem> Orders { get; } = new();

    public OrderFilterOption? SelectedFilter
    {
        get => _selectedFilter;
        set
        {
            if (_selectedFilter == value)
            {
                return;
            }

            _selectedFilter = value;
            OnPropertyChanged();
            ApplyFilter();
        }
    }

    public bool IsLoading
    {
        get => _isLoading;
        private set
        {
            if (_isLoading == value)
            {
                return;
            }

            _isLoading = value;
            OnPropertyChanged();
        }
    }

    public bool HasOrders => Orders.Count > 0;

    public OrderListViewModel(IDataService dataService, IAuthService authService)
    {
        _dataService = dataService;
        _authService = authService;

        InitializeFilters();
        _authService.CurrentUserChanged += OnCurrentUserChanged;
        _ = LoadAsync();
    }

    private void InitializeFilters()
    {
        StatusFilters.Clear();
        StatusFilters.Add(new OrderFilterOption(null, "全部订单"));
        StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.PendingPayment), "待支付"));
        StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.Ongoing), "进行中"));
        StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.PendingReview), "待评价"));
        StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.Completed), "已完成"));
        StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.RefundRequested), "退款申请"));
        StatusFilters.Add(new OrderFilterOption(nameof(OrderStatus.Cancelled), "已取消"));

        SelectedFilter = StatusFilters.FirstOrDefault();
    }

    public void SetInitialFilter(string statusKey)
    {
        if (string.IsNullOrWhiteSpace(statusKey))
        {
            return;
        }

        var filter = StatusFilters.FirstOrDefault(f => string.Equals(f.StatusKey, statusKey, StringComparison.Ordinal));
        if (filter is not null)
        {
            SelectedFilter = filter;
        }
    }

    public Task RefreshAsync() => LoadAsync();

    private async Task LoadAsync()
    {
        if (IsLoading)
        {
            return;
        }

        IsLoading = true;

        try
        {
            var userId = await GetCurrentUserIdAsync();
            if (!userId.HasValue)
            {
                _allOrders.Clear();
                Orders.Clear();
                UpdateFilterCounts();
                OnPropertyChanged(nameof(HasOrders));
                return;
            }

            var orders = await _dataService.GetOrdersByUserAsync(userId.Value);
            var items = new List<OrderListItem>(orders.Count);

            foreach (var order in orders)
            {
                Service? service = null;

                try
                {
                    service = await _dataService.GetServiceByIdAsync(order.ServiceId);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Failed to load service for order {order.Id}: {ex.Message}");
                }

                items.Add(CreateOrderItem(order, service));
            }

            _allOrders.Clear();
            _allOrders.AddRange(items);

            UpdateFilterCounts();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Failed to load orders: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ApplyFilter()
    {
        IEnumerable<OrderListItem> filtered = _allOrders;

        var statusKey = SelectedFilter?.StatusKey;
        if (!string.IsNullOrWhiteSpace(statusKey))
        {
            filtered = filtered.Where(item => string.Equals(item.StatusKey, statusKey, StringComparison.Ordinal));
        }

        Orders.Clear();
        foreach (var item in filtered)
        {
            Orders.Add(item);
        }

        OnPropertyChanged(nameof(HasOrders));
    }

    private void UpdateFilterCounts()
    {
        foreach (var filter in StatusFilters)
        {
            filter.Count = string.IsNullOrEmpty(filter.StatusKey)
                ? _allOrders.Count
                : _allOrders.Count(item => string.Equals(item.StatusKey, filter.StatusKey, StringComparison.Ordinal));
        }
    }

    private static OrderListItem CreateOrderItem(Order order, Service? service)
    {
        var statusKey = order.Status ?? string.Empty;
        var colors = GetStatusColors(statusKey);

        return new OrderListItem(
            order.Id,
            service?.Title ?? "服务已下架",
            service?.ThumbnailUrl,
            statusKey,
            GetStatusDisplay(statusKey),
            colors.badgeColor,
            colors.textColor,
            order.OrderDate,
            FormatOrderDate(order.OrderDate),
            order.TotalPrice,
            $"￥{order.TotalPrice:F2}");
    }

    private static string FormatOrderDate(DateTime dateTime) =>
        dateTime.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);

    private static string GetStatusDisplay(string statusKey) => statusKey switch
    {
        nameof(OrderStatus.PendingPayment) => "待支付",
        nameof(OrderStatus.Ongoing) => "进行中",
        nameof(OrderStatus.PendingReview) => "待评价",
        nameof(OrderStatus.Completed) => "已完成",
        nameof(OrderStatus.RefundRequested) => "退款申请",
        nameof(OrderStatus.Cancelled) => "已取消",
        _ => "未知状态"
    };

    private static (string badgeColor, string textColor) GetStatusColors(string statusKey) => statusKey switch
    {
        nameof(OrderStatus.PendingPayment) => ("#FFF3E0", "#FF8A00"),
        nameof(OrderStatus.Ongoing) => ("#E5F1FF", "#3478F6"),
        nameof(OrderStatus.PendingReview) => ("#F3E8FF", "#8E24AA"),
        nameof(OrderStatus.Completed) => ("#E6F8EE", "#2DBE60"),
        nameof(OrderStatus.RefundRequested) => ("#FFE7E7", "#FF4D4F"),
        nameof(OrderStatus.Cancelled) => ("#EEF1F5", "#6B7280"),
        _ => ("#EEF1F5", "#6B7280")
    };

    private async Task<int?> GetCurrentUserIdAsync()
    {
        if (_currentUserId.HasValue)
        {
            return _currentUserId;
        }

        var user = await _authService.GetCurrentUserAsync();
        _currentUserId = user?.Id;
        return _currentUserId;
    }

    private void OnCurrentUserChanged(object? sender, User? user)
    {
        _currentUserId = user?.Id;

        _ = MainThread.InvokeOnMainThreadAsync(async () =>
        {
            _allOrders.Clear();
            Orders.Clear();
            UpdateFilterCounts();
            OnPropertyChanged(nameof(HasOrders));

            if (user is not null)
            {
                await LoadAsync();
            }
        });
    }

    public class OrderFilterOption : BaseViewModel
    {
        public OrderFilterOption(string? statusKey, string displayName)
        {
            StatusKey = statusKey;
            DisplayName = displayName;
        }

        public string? StatusKey { get; }
        public string DisplayName { get; }

        private int _count;
        public int Count
        {
            get => _count;
            set
            {
                if (_count == value)
                {
                    return;
                }

                _count = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(CountDisplay));
            }
        }

        public string CountDisplay => $"({Count})";
    }

    public class OrderListItem
    {
        public OrderListItem(
            int orderId,
            string serviceTitle,
            string? thumbnailUrl,
            string statusKey,
            string statusDisplay,
            string statusBadgeColor,
            string statusTextColor,
            DateTime orderDate,
            string orderDateDisplay,
            decimal totalPrice,
            string totalPriceDisplay)
        {
            OrderId = orderId;
            ServiceTitle = serviceTitle;
            ThumbnailUrl = thumbnailUrl;
            StatusKey = statusKey;
            StatusDisplay = statusDisplay;
            StatusBadgeColor = statusBadgeColor;
            StatusTextColor = statusTextColor;
            OrderDate = orderDate;
            OrderDateDisplay = orderDateDisplay;
            TotalPrice = totalPrice;
            TotalPriceDisplay = totalPriceDisplay;
        }

        public int OrderId { get; }
        public string ServiceTitle { get; }
        public string? ThumbnailUrl { get; }
        public string StatusKey { get; }
        public string StatusDisplay { get; }
        public string StatusBadgeColor { get; }
        public string StatusTextColor { get; }
        public DateTime OrderDate { get; }
        public string OrderDateDisplay { get; }
        public decimal TotalPrice { get; }
        public string TotalPriceDisplay { get; }

        public string OrderNumberDisplay => $"订单号：{OrderId:D6}";
        public bool IsPendingPayment => string.Equals(StatusKey, nameof(OrderStatus.PendingPayment), StringComparison.Ordinal);
        public bool CanReview => string.Equals(StatusKey, nameof(OrderStatus.PendingReview), StringComparison.Ordinal);
    }
}
】

ViewModels/OrderPaymentViewModel.cs:
【﻿using System;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class OrderPaymentViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        private Order? _order;
        public Order? Order
        {
            get => _order;
            private set
            {
                if (_order == value)
                {
                    return;
                }

                _order = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(HasOrder));
                OnPropertyChanged(nameof(CanPay));
                OnPropertyChanged(nameof(PaymentAmountDisplay));
                OnPropertyChanged(nameof(OrderStatusDisplay));
                OnPropertyChanged(nameof(OrderNumberDisplay));
                OnPropertyChanged(nameof(OrderDateDisplay));
            }
        }

        private Service? _service;
        public Service? Service
        {
            get => _service;
            private set
            {
                if (_service == value)
                {
                    return;
                }

                _service = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(ServiceName));
            }
        }

        private bool _isLoading;
        public bool IsLoading
        {
            get => _isLoading;
            private set
            {
                if (_isLoading == value)
                {
                    return;
                }

                _isLoading = value;
                OnPropertyChanged();
            }
        }

        private bool _isPaying;
        public bool IsPaying
        {
            get => _isPaying;
            private set
            {
                if (_isPaying == value)
                {
                    return;
                }

                _isPaying = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(CanPay));
            }
        }

        public bool HasOrder => Order is not null;

        public bool CanPay => !IsPaying && Order?.Status == nameof(OrderStatus.PendingPayment);

        public string PaymentAmountDisplay => Order is null ? string.Empty : $"￥{Order.TotalPrice:F2}";

        public string OrderStatusDisplay
        {
            get
            {
                if (Order?.Status is null)
                {
                    return "未知状态";
                }

                return Order.Status switch
                {
                    nameof(OrderStatus.PendingPayment) => "待支付",
                    nameof(OrderStatus.Ongoing) => "服务中",
                    nameof(OrderStatus.PendingReview) => "待评价",
                    nameof(OrderStatus.Completed) => "已完成",
                    nameof(OrderStatus.RefundRequested) => "退款申请中",
                    nameof(OrderStatus.Cancelled) => "已取消",
                    _ => "未知状态"
                };
            }
        }

        public string OrderNumberDisplay => Order is null ? string.Empty : $"订单号：{Order.Id:D6}";

        public string OrderDateDisplay => Order is null ? string.Empty : Order.OrderDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm");

        public string ServiceName => Service?.Title ?? "未知服务";

        public OrderPaymentViewModel(IDataService dataService)
        {
            _dataService = dataService;
        }

        public async Task LoadAsync(int orderId)
        {
            if (orderId <= 0)
            {
                Order = null;
                Service = null;
                return;
            }

            if (IsLoading)
            {
                return;
            }

            IsLoading = true;

            try
            {
                var order = await _dataService.GetOrderByIdAsync(orderId);
                Order = order;

                if (order is not null)
                {
                    Service = await _dataService.GetServiceByIdAsync(order.ServiceId);
                }
                else
                {
                    Service = null;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load order for payment: {ex.Message}");
                Order = null;
                Service = null;
            }
            finally
            {
                IsLoading = false;
            }
        }

        public async Task<(bool Success, string? ErrorMessage)> PayAsync()
        {
            if (Order is null)
            {
                return (false, "订单不存在或已失效。");
            }

            if (Order.Status != nameof(OrderStatus.PendingPayment))
            {
                return (false, "订单已处理，无需支付。");
            }

            if (IsPaying)
            {
                return (false, null);
            }

            IsPaying = true;

            try
            {
                var updated = await _dataService.MarkOrderAsPaidAsync(Order.Id);
                if (updated is null)
                {
                    return (false, "支付失败，订单不存在。");
                }

                Order = updated;
                return (true, null);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to mark order paid: {ex.Message}");
                return (false, "支付失败，请稍后再试。");
            }
            finally
            {
                IsPaying = false;
            }
        }
    }
}
】

ViewModels/OrderReviewViewModel.cs:
【﻿using System;



using System.Collections.Generic;



using System.Collections.ObjectModel;



using System.Diagnostics;



using System.Threading.Tasks;



using System.Windows.Input;



using GamerLinkApp.Models;



using GamerLinkApp.Services;



namespace GamerLinkApp.ViewModels



{



    public class OrderReviewViewModel : BaseViewModel



    {



        private const int MinimumCommentLength = 5;



        public ObservableCollection<RatingStarItem> RatingStars { get; }



        private readonly IDataService _dataService;



        private Order? _order;



        public Order? Order



        {



            get => _order;



            private set



            {



                if (_order == value)



                {



                    return;



                }



                _order = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(HasOrder));



                OnPropertyChanged(nameof(OrderNumberDisplay));



                OnPropertyChanged(nameof(OrderDateDisplay));



                OnPropertyChanged(nameof(OrderStatusDisplay));



                OnPropertyChanged(nameof(CanSubmit));



                OnPropertyChanged(nameof(SubmitButtonText));



            }



        }



        private Service? _service;



        public Service? Service



        {



            get => _service;



            private set



            {



                if (_service == value)



                {



                    return;



                }



                _service = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(ServiceName));



            }



        }



        private Review? _existingReview;



        public Review? ExistingReview



        {



            get => _existingReview;



            private set



            {



                if (_existingReview == value)



                {



                    return;



                }



                _existingReview = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(IsAlreadyReviewed));



                OnPropertyChanged(nameof(CanSubmit));



                OnPropertyChanged(nameof(IsCommentReadOnly));



                OnPropertyChanged(nameof(IsRatingReadOnly));



                OnPropertyChanged(nameof(SubmitButtonText));



            }



        }



        private bool _isLoading;



        public bool IsLoading



        {



            get => _isLoading;



            private set



            {



                if (_isLoading == value)



                {



                    return;



                }



                _isLoading = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(IsBusy));



            }



        }



        private bool _isSubmitting;



        public bool IsSubmitting



        {



            get => _isSubmitting;



            private set



            {



                if (_isSubmitting == value)



                {



                    return;



                }



                _isSubmitting = value;



                OnPropertyChanged();



                OnPropertyChanged(nameof(CanSubmit));



                OnPropertyChanged(nameof(SubmitButtonText));



                OnPropertyChanged(nameof(IsBusy));



            }



        }



        private int _rating = 5;



        public int Rating



        {



            get => _rating;



            set



            {



                var clamped = Math.Clamp(value, 1, 5);



                if (_rating == clamped)



                {



                    return;



                }



                _rating = clamped;



                OnPropertyChanged();



                OnPropertyChanged(nameof(RatingDisplay));



                OnPropertyChanged(nameof(CanSubmit));



                UpdateRatingStars();



            }



        }



        public string RatingDisplay => $"{Rating} 分";



        private void UpdateRatingStars()



        {



            foreach (var star in RatingStars)



            {



                star.IsFilled = star.Value <= Rating;



            }



        }



        private string _comment = string.Empty;



        public string Comment



        {



            get => _comment;



            set



            {



                var newValue = value ?? string.Empty;



                if (string.Equals(_comment, newValue, StringComparison.Ordinal))



                {



                    return;



                }



                _comment = newValue;



                OnPropertyChanged();



                OnPropertyChanged(nameof(CommentLengthIndicator));



                OnPropertyChanged(nameof(CanSubmit));



            }



        }



        public string CommentLengthIndicator => $"{Math.Min(Comment.Trim().Length, 200)}/200";



        public bool HasOrder => Order is not null;



        public bool IsAlreadyReviewed => ExistingReview is not null;



        public bool IsCommentReadOnly => IsAlreadyReviewed;



        public bool IsRatingReadOnly => IsAlreadyReviewed;



        public string SubmitButtonText => IsAlreadyReviewed ? "已完成评价" : (IsSubmitting ? "提交中..." : "提交评价");



        public bool IsBusy => IsLoading || IsSubmitting;



        private bool IsPendingReview => string.Equals(Order?.Status, nameof(OrderStatus.PendingReview), StringComparison.Ordinal);



        public bool CanSubmit



        {



            get



            {



                if (!HasOrder)



                {



                    return false;



                }



                if (IsAlreadyReviewed)



                {



                    return false;



                }



                if (IsSubmitting)



                {



                    return false;



                }



                if (!IsPendingReview)



                {



                    return false;



                }



                return Comment.Trim().Length >= MinimumCommentLength && Rating >= 1 && Rating <= 5;



            }



        }



        public string ServiceName => Service?.Title ?? "未知服务";



        public string OrderNumberDisplay => Order is null ? string.Empty : $"订单号：{Order.Id:D6}";



        public string OrderDateDisplay => Order is null ? string.Empty : Order.OrderDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm");



        public string OrderStatusDisplay => Order?.Status switch



        {



            nameof(OrderStatus.PendingPayment) => "待支付",



            nameof(OrderStatus.Ongoing) => "进行中",



            nameof(OrderStatus.PendingReview) => "待评价",



            nameof(OrderStatus.Completed) => "已完成",



            nameof(OrderStatus.RefundRequested) => "申请退款",



            nameof(OrderStatus.Cancelled) => "已取消",



            _ => "未知状态"



        };



        public OrderReviewViewModel(IDataService dataService)



        {



            _dataService = dataService;



            RatingStars = new ObservableCollection<RatingStarItem>();



            for (var i = 1; i <= 5; i++)



            {



                RatingStars.Add(new RatingStarItem(i));



            }



            UpdateRatingStars();



        }



        public async Task LoadAsync(int orderId)



        {



            if (orderId <= 0)



            {



                Order = null;



                Service = null;



                ExistingReview = null;



                Rating = 5;



                Comment = string.Empty;



                return;



            }



            if (IsLoading)



            {



                return;



            }



            IsLoading = true;



            try



            {



                var order = await _dataService.GetOrderByIdAsync(orderId);



                Order = order;



                if (order is null)



                {



                    Service = null;



                    ExistingReview = null;



                    Rating = 5;



                    Comment = string.Empty;



                    return;



                }



                Service = await _dataService.GetServiceByIdAsync(order.ServiceId);



                var review = await _dataService.GetReviewByOrderIdAsync(order.Id);



                ExistingReview = review;



                if (review is not null)



                {



                    Rating = review.Rating;



                    Comment = review.Comment;



                }



                else



                {



                    Rating = 5;



                    Comment = string.Empty;



                }



            }



            catch (Exception ex)



            {



                Debug.WriteLine($"Failed to load review data: {ex.Message}");



                Order = null;



                Service = null;



                ExistingReview = null;



                Rating = 5;



                Comment = string.Empty;



            }



            finally



            {



                IsLoading = false;



            }



        }



        public async Task<(bool Success, string? ErrorMessage)> SubmitAsync()



        {



            if (!HasOrder)



            {



                return (false, "未找到订单");



            }



            if (IsAlreadyReviewed)



            {



                return (false, "该订单已经评价过");



            }



            var trimmedComment = Comment.Trim();



            if (trimmedComment.Length < MinimumCommentLength)



            {



                return (false, $"评价内容至少需要 {MinimumCommentLength} 个字符");



            }



            if (Rating < 1 || Rating > 5)



            {



                return (false, "评分无效");



            }



            if (!IsPendingReview)



            {



                return (false, "当前状态暂不支持评价");



            }



            if (IsSubmitting)



            {



                return (false, null);



            }



            IsSubmitting = true;



            try



            {



                var (updatedOrder, createdReview, errorMessage) = await _dataService.SubmitReviewAsync(Order!.Id, Order.BuyerId, Rating, trimmedComment);



                if (!string.IsNullOrEmpty(errorMessage))



                {



                    return (false, errorMessage);



                }



                Order = updatedOrder;



                ExistingReview = createdReview;



                if (createdReview is not null)



                {



                    Rating = createdReview.Rating;



                    Comment = createdReview.Comment;



                }



                return (true, null);



            }



            catch (Exception ex)



            {



                Debug.WriteLine($"Failed to submit review: {ex.Message}");



                return (false, "评价提交失败，请稍后再试。");



            }



            finally



            {



                IsSubmitting = false;



            }



        }



        public class RatingStarItem : BaseViewModel



        {



            public RatingStarItem(int value)



            {



                Value = value;



            }



            public int Value { get; }



            private bool _isFilled;



            public bool IsFilled



            {



                get => _isFilled;



                set



                {



                    if (_isFilled == value)



                    {



                        return;



                    }



                    _isFilled = value;



                    OnPropertyChanged();



                }



            }



        }



    }



}



】

ViewModels/ProfileViewModel.cs:
【using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using GamerLinkApp.Views;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels;

public class ProfileViewModel : BaseViewModel
{
    private readonly IDataService _dataService;
    private readonly IAuthService _authService;

    private User? _currentUser;
    private decimal _totalPaid;
    private int _completedOrders;
    private bool _isLoggingOut;

    public ProfileViewModel(IDataService dataService, IAuthService authService)
    {
        _dataService = dataService;
        _authService = authService;

        OrderStatusTappedCommand = new Command<OrderStatusItem>(async item => await OnOrderStatusTapped(item));
        LogoutCommand = new Command(async () => await LogoutAsync(), () => !_isLoggingOut);
        NavigateToAdminCommand = new Command(async () => await NavigateToAdminAsync());

        _authService.CurrentUserChanged += OnCurrentUserChanged;
        _ = LoadAsync();
    }

    public User? CurrentUser
    {
        get => _currentUser;
        private set
        {
            if (_currentUser == value)
            {
                return;
            }

            _currentUser = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(IsAdmin));
        }
    }

    public decimal TotalPaid
    {
        get => _totalPaid;
        private set
        {
            if (_totalPaid == value)
            {
                return;
            }

            _totalPaid = value;
            OnPropertyChanged();
        }
    }

    public int CompletedOrders
    {
        get => _completedOrders;
        private set
        {
            if (_completedOrders == value)
            {
                return;
            }

            _completedOrders = value;
            OnPropertyChanged();
        }
    }

    public ObservableCollection<OrderStatusItem> OrderStatuses { get; } = new();

    public ICommand OrderStatusTappedCommand { get; }
    public ICommand LogoutCommand { get; }
    public ICommand NavigateToAdminCommand { get; }

    public bool IsAdmin => CurrentUser?.IsAdmin == true;

    private async Task LoadAsync()
    {
        try
        {
            var user = await _authService.GetCurrentUserAsync();
            CurrentUser = user;

            if (user is null)
            {
                ResetStatistics();
                return;
            }

            var orders = await _dataService.GetOrdersByUserAsync(user.Id);

            TotalPaid = orders.Where(o => o.PaymentDate.HasValue).Sum(o => o.TotalPrice);
            CompletedOrders = orders.Count(o => string.Equals(o.Status, nameof(OrderStatus.Completed), StringComparison.Ordinal));

            var summaries = new[]
            {
                new OrderStatusItem(nameof(OrderStatus.PendingPayment), "待支付", "pending_pay.png"),
                new OrderStatusItem(nameof(OrderStatus.Ongoing), "进行中", "ongoing.png"),
                new OrderStatusItem(nameof(OrderStatus.PendingReview), "待评价", "await_evaluation.png"),
                new OrderStatusItem(null, "全部订单", "all_orders.png")
            };

            foreach (var summary in summaries)
            {
                summary.Count = string.IsNullOrEmpty(summary.StatusKey)
                    ? orders.Count
                    : orders.Count(o => string.Equals(o.Status, summary.StatusKey, StringComparison.Ordinal));
            }

            OrderStatuses.Clear();
            foreach (var summary in summaries)
            {
                OrderStatuses.Add(summary);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Failed to load profile: {ex.Message}");
        }
    }

    private async Task NavigateToAdminAsync()
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync(_authService))
        {
            return;
        }

        if (!IsAdmin)
        {
            if (Shell.Current is not null)
            {
                await Shell.Current.DisplayAlert("提示", "当前账号没有管理员权限。", "确定");
            }

            return;
        }

        if (Shell.Current is null)
        {
            return;
        }

        await Shell.Current.GoToAsync(nameof(AdminDashboardPage));
    }

    private async Task OnOrderStatusTapped(OrderStatusItem? item)
    {
        if (item is null)
        {
            return;
        }

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync(_authService))
        {
            return;
        }

        var route = string.IsNullOrEmpty(item.StatusKey)
            ? $"{nameof(OrderListPage)}"
            : $"{nameof(OrderListPage)}?status={item.StatusKey}";

        await Shell.Current.GoToAsync(route);
    }

    private async Task LogoutAsync()
    {
        if (_isLoggingOut)
        {
            return;
        }

        _isLoggingOut = true;
        ((Command)LogoutCommand).ChangeCanExecute();

        try
        {
            await _authService.LogoutAsync();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Logout failed: {ex.Message}");
        }
        finally
        {
            _isLoggingOut = false;
            ((Command)LogoutCommand).ChangeCanExecute();
        }
    }

    private void OnCurrentUserChanged(object? sender, User? user)
    {
        _ = MainThread.InvokeOnMainThreadAsync(async () =>
        {
            if (user is null)
            {
                CurrentUser = null;
                ResetStatistics();
                return;
            }

            await LoadAsync();
        });
    }

    private void ResetStatistics()
    {
        TotalPaid = 0;
        CompletedOrders = 0;
        OrderStatuses.Clear();
    }

    public class OrderStatusItem : BaseViewModel
    {
        public OrderStatusItem(string? statusKey, string displayName, string icon)
        {
            StatusKey = statusKey;
            DisplayName = displayName;
            Icon = icon;
        }

        public string? StatusKey { get; }
        public string DisplayName { get; }
        public string Icon { get; }

        private int _count;
        public int Count
        {
            get => _count;
            set
            {
                if (_count == value)
                {
                    return;
                }

                _count = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(CountDisplay));
            }
        }

        public string CountDisplay => $"{Count}";
    }
}
】

ViewModels/RegisterViewModel.cs:
【using System;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Services;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels;

public class RegisterViewModel : BaseViewModel
{
    private readonly IAuthService _authService;

    private string _username = string.Empty;
    private string _email = string.Empty;
    private string _nickname = string.Empty;
    private string _password = string.Empty;
    private string _confirmPassword = string.Empty;
    private bool _isBusy;
    private string _errorMessage = string.Empty;

    public RegisterViewModel(IAuthService authService)
    {
        _authService = authService;
        RegisterCommand = new Command(async () => await ExecuteRegisterAsync(), () => CanRegister);
    }

    public string Username
    {
        get => _username;
        set
        {
            if (_username == value)
            {
                return;
            }

            _username = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanRegister));
            ((Command)RegisterCommand).ChangeCanExecute();
        }
    }

    public string Email
    {
        get => _email;
        set
        {
            if (_email == value)
            {
                return;
            }

            _email = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanRegister));
            ((Command)RegisterCommand).ChangeCanExecute();
        }
    }

    public string Nickname
    {
        get => _nickname;
        set
        {
            if (_nickname == value)
            {
                return;
            }

            _nickname = value;
            OnPropertyChanged();
        }
    }

    public string Password
    {
        get => _password;
        set
        {
            if (_password == value)
            {
                return;
            }

            _password = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanRegister));
            ((Command)RegisterCommand).ChangeCanExecute();
        }
    }

    public string ConfirmPassword
    {
        get => _confirmPassword;
        set
        {
            if (_confirmPassword == value)
            {
                return;
            }

            _confirmPassword = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanRegister));
            ((Command)RegisterCommand).ChangeCanExecute();
        }
    }

    public bool IsBusy
    {
        get => _isBusy;
        private set
        {
            if (_isBusy == value)
            {
                return;
            }

            _isBusy = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanRegister));
            ((Command)RegisterCommand).ChangeCanExecute();
        }
    }

    public string ErrorMessage
    {
        get => _errorMessage;
        private set
        {
            if (_errorMessage == value)
            {
                return;
            }

            _errorMessage = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(HasError));
        }
    }

    public bool HasError => !string.IsNullOrWhiteSpace(ErrorMessage);

    public bool CanRegister =>
        !IsBusy &&
        !string.IsNullOrWhiteSpace(Username) &&
        !string.IsNullOrWhiteSpace(Email) &&
        !string.IsNullOrWhiteSpace(Password) &&
        !string.IsNullOrWhiteSpace(ConfirmPassword);

    public ICommand RegisterCommand { get; }

    private async Task ExecuteRegisterAsync()
    {
        if (!CanRegister)
        {
            return;
        }

        try
        {
            IsBusy = true;
            ErrorMessage = string.Empty;

            if (!string.Equals(Password, ConfirmPassword, StringComparison.Ordinal))
            {
                ErrorMessage = "两次输入的密码不一致";
                return;
            }

            var result = await _authService.RegisterAsync(
                Username,
                Email,
                Password,
                string.IsNullOrWhiteSpace(Nickname) ? Username : Nickname);

            if (!result.Success)
            {
                ErrorMessage = result.ErrorMessage ?? "注册失败";
            }
            else
            {
                Password = string.Empty;
                ConfirmPassword = string.Empty;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"ExecuteRegisterAsync failed: {ex.Message}");
            ErrorMessage = "注册失败，请稍后重试";
        }
        finally
        {
            IsBusy = false;
        }
    }
}
】

ViewModels/ServiceDetailViewModel.cs:
【using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using Microsoft.Maui.ApplicationModel;

namespace GamerLinkApp.ViewModels;

public class ServiceDetailViewModel : BaseViewModel
{
    private readonly IDataService _dataService;
    private readonly IAuthService _authService;

    private Service? _selectedService;
    private int _serviceId;
    private bool _isPlacingOrder;
    private bool _isUpdatingFavorite;
    private bool _isReviewsLoading;
    private int? _currentUserId;

    public ServiceDetailViewModel(IDataService dataService, IAuthService authService)
    {
        _dataService = dataService;
        _authService = authService;

        Reviews.CollectionChanged += (_, __) =>
        {
            OnPropertyChanged(nameof(HasReviews));
            OnPropertyChanged(nameof(IsReviewsEmpty));
            OnPropertyChanged(nameof(ReviewCount));
            OnPropertyChanged(nameof(ReviewCountDisplay));
            OnPropertyChanged(nameof(AverageRating));
            OnPropertyChanged(nameof(AverageRatingDisplay));
        };

        _authService.CurrentUserChanged += OnCurrentUserChanged;
    }

    public ObservableCollection<ServiceReviewInfo> Reviews { get; } = new();

    public bool IsReviewsLoading
    {
        get => _isReviewsLoading;
        private set
        {
            if (_isReviewsLoading == value)
            {
                return;
            }

            _isReviewsLoading = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(IsReviewsEmpty));
        }
    }

    public bool HasReviews => Reviews.Count > 0;

    public bool IsReviewsEmpty => !IsReviewsLoading && !HasReviews;

    public int ReviewCount => Reviews.Count;

    public string ReviewCountDisplay => HasReviews ? $"{ReviewCount}条评价" : "暂无评价";

    public double AverageRating => HasReviews ? Math.Round(Reviews.Average(r => r.Rating), 1) : 0;

    public string AverageRatingDisplay => HasReviews ? AverageRating.ToString("F1") : "--";

    public Service? SelectedService
    {
        get => _selectedService;
        private set
        {
            if (_selectedService == value)
            {
                return;
            }

            _selectedService = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanPlaceOrder));
            OnPropertyChanged(nameof(IsFavorite));
        }
    }

    public int ServiceId
    {
        get => _serviceId;
        set
        {
            if (_serviceId == value)
            {
                return;
            }

            _serviceId = value;
            OnPropertyChanged();
            _ = LoadServiceAsync(value);
        }
    }

    public bool IsPlacingOrder
    {
        get => _isPlacingOrder;
        private set
        {
            if (_isPlacingOrder == value)
            {
                return;
            }

            _isPlacingOrder = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(CanPlaceOrder));
        }
    }

    public bool CanPlaceOrder => !IsPlacingOrder && SelectedService is not null;

    public bool IsFavorite => SelectedService?.IsFavorite ?? false;

    public async Task<(bool Success, string? ErrorMessage, Order? Order)> PlaceOrderAsync()
    {
        if (SelectedService is null)
        {
            return (false, "当前服务信息不可用，请稍后重试", null);
        }

        if (IsPlacingOrder)
        {
            return (false, null, null);
        }

        IsPlacingOrder = true;

        try
        {
            if (!await AuthNavigationHelper.EnsureAuthenticatedAsync(_authService))
            {
                return (false, "请先登录后再下单", null);
            }

            var user = await _authService.GetCurrentUserAsync();
            if (user is null)
            {
                return (false, "未找到当前用户，请先登录", null);
            }

            _currentUserId = user.Id;

            var order = new Order
            {
                ServiceId = SelectedService.Id,
                BuyerId = user.Id,
                OrderDate = DateTime.UtcNow,
                Status = nameof(OrderStatus.PendingPayment),
                TotalPrice = SelectedService.Price
            };

            var createdOrder = await _dataService.CreateOrderAsync(order);
            return (true, null, createdOrder);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Failed to create order: {ex.Message}");
            return (false, "下单失败，请稍后再试", null);
        }
        finally
        {
            IsPlacingOrder = false;
        }
    }

    public async Task<bool?> ToggleFavoriteAsync()
    {
        if (SelectedService is null || _isUpdatingFavorite)
        {
            return null;
        }

        _isUpdatingFavorite = true;
        var previous = SelectedService.IsFavorite;

        try
        {
            if (!await AuthNavigationHelper.EnsureAuthenticatedAsync(_authService))
            {
                if (SelectedService.IsFavorite != previous)
                {
                    SelectedService.IsFavorite = previous;
                    OnPropertyChanged(nameof(IsFavorite));
                }

                return null;
            }

            var userId = await GetCurrentUserIdAsync();
            if (!userId.HasValue)
            {
                return null;
            }

            var isFavorite = await _dataService.ToggleFavoriteAsync(userId.Value, SelectedService.Id);
            if (SelectedService.IsFavorite != isFavorite)
            {
                SelectedService.IsFavorite = isFavorite;
            }

            OnPropertyChanged(nameof(IsFavorite));
            return isFavorite;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Failed to toggle favorite: {ex.Message}");
            if (SelectedService.IsFavorite != previous)
            {
                SelectedService.IsFavorite = previous;
                OnPropertyChanged(nameof(IsFavorite));
            }

            return null;
        }
        finally
        {
            _isUpdatingFavorite = false;
        }
    }

    private async Task LoadServiceAsync(int id)
    {
        if (id <= 0)
        {
            SelectedService = null;
            Reviews.Clear();
            return;
        }

        try
        {
            var service = await _dataService.GetServiceByIdAsync(id);
            SelectedService = service;

            if (service is not null)
            {
                var userId = await GetCurrentUserIdAsync();
                if (userId.HasValue)
                {
                    var isFavorite = await _dataService.IsFavoriteAsync(userId.Value, service.Id);
                    service.IsFavorite = isFavorite;
                }
                else
                {
                    service.IsFavorite = false;
                }

                OnPropertyChanged(nameof(IsFavorite));
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Failed to load service detail: {ex.Message}");
            SelectedService = null;
            OnPropertyChanged(nameof(IsFavorite));
        }

        await LoadReviewsAsync(id);
    }

    private async Task LoadReviewsAsync(int serviceId)
    {
        if (serviceId <= 0)
        {
            Reviews.Clear();
            return;
        }

        try
        {
            IsReviewsLoading = true;
            var reviews = await _dataService.GetServiceReviewsAsync(serviceId);

            Reviews.Clear();
            foreach (var review in reviews)
            {
                Reviews.Add(review);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Failed to load service reviews: {ex.Message}");
            Reviews.Clear();
        }
        finally
        {
            IsReviewsLoading = false;
        }
    }

    private async Task<int?> GetCurrentUserIdAsync()
    {
        if (_currentUserId.HasValue)
        {
            return _currentUserId;
        }

        var user = await _authService.GetCurrentUserAsync();
        _currentUserId = user?.Id;
        return _currentUserId;
    }

    private void OnCurrentUserChanged(object? sender, User? user)
    {
        _currentUserId = user?.Id;

        _ = MainThread.InvokeOnMainThreadAsync(async () =>
        {
            if (SelectedService is null)
            {
                return;
            }

            if (user is null)
            {
                if (SelectedService.IsFavorite)
                {
                    SelectedService.IsFavorite = false;
                    OnPropertyChanged(nameof(IsFavorite));
                }

                return;
            }

            try
            {
                var isFavorite = await _dataService.IsFavoriteAsync(user.Id, SelectedService.Id);
                if (SelectedService.IsFavorite != isFavorite)
                {
                    SelectedService.IsFavorite = isFavorite;
                    OnPropertyChanged(nameof(IsFavorite));
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to refresh favorite state: {ex.Message}");
            }
        });
    }
}
】

ViewModels/ServiceListViewModel.cs:
【﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.Services;
using Microsoft.Maui.ApplicationModel;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels
{
    public class ServiceListViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;
        private readonly IAuthService _authService;
        private readonly List<Service> _allServices = new();
        private readonly HashSet<int> _favoriteServiceIds = new();
        private bool _isUpdatingFavorite;
        private string _searchText = string.Empty;
        private int? _currentUserId;

        public ObservableCollection<Service> Services { get; } = new();

        public ICommand ToggleFavoriteCommand { get; }

        public string SearchText
        {
            get => _searchText;
            set
            {
                if (_searchText == value)
                {
                    return;
                }

                _searchText = value;
                OnPropertyChanged();
                ApplyFilter();
                OnPropertyChanged(nameof(IsShowingBanners));
            }
        }

        public bool IsShowingBanners => string.IsNullOrWhiteSpace(SearchText);

        public ServiceListViewModel(IDataService dataService, IAuthService authService)
        {
            _dataService = dataService;
            _authService = authService;
            ToggleFavoriteCommand = new Command<Service>(async service => await ToggleFavoriteAsync(service));
            _authService.CurrentUserChanged += OnCurrentUserChanged;
            _ = LoadServicesAsync(); // async load keeps UI responsive
        }

        private async Task<int?> GetCurrentUserIdAsync()
        {
            if (_currentUserId.HasValue)
            {
                return _currentUserId;
            }

            var user = await _authService.GetCurrentUserAsync();
            _currentUserId = user?.Id;
            return _currentUserId;
        }

        private void OnCurrentUserChanged(object? sender, User? user)
        {
            _currentUserId = user?.Id;

            _ = MainThread.InvokeOnMainThreadAsync(async () =>
            {
                _favoriteServiceIds.Clear();
                _allServices.Clear();
                Services.Clear();

                if (user is not null)
                {
                    await LoadServicesAsync();
                }
            });
        }

        private async Task LoadServicesAsync()
        {
            try
            {
                var userId = await GetCurrentUserIdAsync();
                if (userId is null)
                {
                    _favoriteServiceIds.Clear();
                    _allServices.Clear();
                    Services.Clear();
                    return;
                }

                var services = await _dataService.GetServicesAsync();
                var favoriteIds = await _dataService.GetFavoriteServiceIdsAsync(userId.Value);

                _favoriteServiceIds.Clear();
                _favoriteServiceIds.UnionWith(favoriteIds);

                _allServices.Clear();
                foreach (var service in services)
                {
                    service.IsFavorite = _favoriteServiceIds.Contains(service.Id);
                    _allServices.Add(service);
                }
                ApplyFilter();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to load services: {ex.Message}");
            }
        }

        public async Task RefreshFavoritesAsync()
        {
            try
            {
                var userId = await GetCurrentUserIdAsync();
                if (userId is null)
                {
                    _favoriteServiceIds.Clear();
                    foreach (var service in _allServices)
                    {
                        service.IsFavorite = false;
                    }
                    return;
                }

                var favoriteIds = await _dataService.GetFavoriteServiceIdsAsync(userId.Value);

                _favoriteServiceIds.Clear();
                _favoriteServiceIds.UnionWith(favoriteIds);

                foreach (var service in _allServices)
                {
                    service.IsFavorite = _favoriteServiceIds.Contains(service.Id);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to refresh favorites: {ex.Message}");
            }
        }

        private void ApplyFilter()
        {
            var query = SearchText?.Trim();

            IEnumerable<Service> filtered = _allServices;

            if (!string.IsNullOrWhiteSpace(query))
            {
                filtered = _allServices.Where(service =>
                    (!string.IsNullOrWhiteSpace(service.Title) && service.Title.Contains(query, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrWhiteSpace(service.GameName) && service.GameName.Contains(query, StringComparison.OrdinalIgnoreCase)) ||
                    (service.Tags?.Any(tag => tag.Contains(query, StringComparison.OrdinalIgnoreCase)) ?? false));
            }

            UpdateServices(filtered);
        }

        // --- 以下是修改的部分 ---

        /// <summary>
        /// 高效地更新服务列表，避免不必要的UI刷新导致输入框失去焦点
        /// </summary>
        /// <param name="source">过滤后的服务列表</param>
        private void UpdateServices(IEnumerable<Service> source)
        {
            var filteredList = source.ToList();

            // 移除不再存在于筛选结果中的服务
            for (int i = Services.Count - 1; i >= 0; i--)
            {
                var currentService = Services[i];
                if (!filteredList.Any(s => s.Id == currentService.Id))
                {
                    Services.RemoveAt(i);
                }
            }

            // 添加新服务或调整顺序
            for (int i = 0; i < filteredList.Count; i++)
            {
                var filteredService = filteredList[i];

                // 如果当前位置的服务不匹配，则需要调整
                if (i >= Services.Count || Services[i].Id != filteredService.Id)
                {
                    // 检查服务是否已存在于列表的其他位置
                    var existing = Services.FirstOrDefault(s => s.Id == filteredService.Id);
                    if (existing != null)
                    {
                        // 如果存在，就移动到正确的位置
                        Services.Move(Services.IndexOf(existing), i);
                    }
                    else
                    {
                        // 如果不存在，就插入到正确的位置
                        Services.Insert(i, filteredService);
                    }
                }
            }
        }

        private async Task ToggleFavoriteAsync(Service service)
        {
            if (service is null || _isUpdatingFavorite)
            {
                return;
            }

            _isUpdatingFavorite = true;
            var previous = service.IsFavorite;

            try
            {
                if (!await AuthNavigationHelper.EnsureAuthenticatedAsync(_authService))
                {
                    UpdateFavoriteState(service, previous);
                    return;
                }

                var userId = await GetCurrentUserIdAsync();
                if (userId is null)
                {
                    UpdateFavoriteState(service, previous);
                    return;
                }

                var isFavorite = await _dataService.ToggleFavoriteAsync(userId.Value, service.Id);
                UpdateFavoriteState(service, isFavorite);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to toggle favorite: {ex.Message}");
                UpdateFavoriteState(service, previous);
            }
            finally
            {
                _isUpdatingFavorite = false;
            }
        }

        private void UpdateFavoriteState(Service service, bool isFavorite)
        {
            if (isFavorite)
            {
                _favoriteServiceIds.Add(service.Id);
            }
            else
            {
                _favoriteServiceIds.Remove(service.Id);
            }

            if (service.IsFavorite != isFavorite)
            {
                service.IsFavorite = isFavorite;
            }

            var tracked = _allServices.FirstOrDefault(s => s.Id == service.Id);
            if (tracked is not null && !ReferenceEquals(tracked, service) && tracked.IsFavorite != isFavorite)
            {
                tracked.IsFavorite = isFavorite;
            }
        }
    }
}
】

ViewModels/ZoneViewModel.cs:
【﻿using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using GamerLinkApp.Models;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ZoneViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        public ObservableCollection<Category> Categories { get; } = new();
        public ObservableCollection<Service> Services { get; } = new();

        private Category? _selectedCategory;
        public Category? SelectedCategory
        {
            get => _selectedCategory;
            set
            {
                if (_selectedCategory == value)
                {
                    return;
                }

                _selectedCategory = value;
                OnPropertyChanged();
                _ = LoadServicesForCategoryAsync(value);
            }
        }

        private Service? _highlightedService;
        public Service? HighlightedService
        {
            get => _highlightedService;
            private set
            {
                if (_highlightedService == value)
                {
                    return;
                }

                _highlightedService = value;
                OnPropertyChanged();
            }
        }

        public ZoneViewModel(IDataService dataService)
        {
            _dataService = dataService;
            _ = InitializeAsync();
        }

        private async Task InitializeAsync()
        {
            try
            {
                var categories = await _dataService.GetCategoriesAsync();
                Categories.Clear();
                foreach (var ca in categories)
                {
                    Categories.Add(ca);
                }

                if (Categories.Count > 0)
                {
                    SelectedCategory = Categories[0];
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to load zone games: {ex.Message}");
            }
        }

        private async Task LoadServicesForCategoryAsync(Category? cate)
        {
            if (cate==null)
            {
                Services.Clear();
                HighlightedService = null;
                return;
            }

            try
            {
                var services = await _dataService.GetServicesByCategoryAsync(cate);
                Services.Clear();
                foreach (var service in services)
                {
                    Services.Add(service);
                }

                if (services.Any())
                {
                    HighlightedService = services.FirstOrDefault();
                }
                else
                {
                    HighlightedService = null;
                }

            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to load services for {cate.Name}: {ex.Message}");
            }
        }
    }
}
】

Views/AdminDashboardPage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.AdminDashboardPage"
             x:DataType="vm:AdminDashboardViewModel"
             Title="服务管理"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="True">
    <Grid>
        <ScrollView IsVisible="{Binding HasAccess}">
            <VerticalStackLayout Padding="20,16,20,32"
                                 Spacing="18">
                <Grid ColumnDefinitions="*,Auto,Auto"
                      VerticalOptions="Center">
                    <VerticalStackLayout Spacing="4">
                        <Label Text="服务管理面板"
                               FontSize="22"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <Label Text="快速检索、编辑服务，并掌握最新订单动态"
                               FontSize="13"
                               TextColor="#7A8196" />
                    </VerticalStackLayout>

                    <Button Grid.Column="1"
                            Text="刷新"
                            Command="{Binding RefreshCommand}"
                            HeightRequest="38"
                            Padding="16,0"
                            BackgroundColor="#3478F6"
                            TextColor="White"
                            CornerRadius="14"
                            VerticalOptions="Center" />

                    <Button Grid.Column="2"
                            Text="退出登录"
                            Command="{Binding LogoutCommand}"
                            HeightRequest="38"
                            Padding="16,0"
                            BackgroundColor="#FF4D4F"
                            TextColor="White"
                            CornerRadius="14"
                            VerticalOptions="Center"
                            Margin="12,0,0,0" />
                </Grid>

                <Border BackgroundColor="#FFFFFF"
                        Padding="16,12"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <Entry Text="{Binding SearchText}"
                           Placeholder="按名称、分类、游戏或标签搜索服务"
                           PlaceholderColor="#A3A9B6"
                           FontSize="14"
                           ClearButtonVisibility="WhileEditing"
                           BackgroundColor="Transparent"
                           TextColor="#1A1A1A" />
                </Border>

                <CollectionView ItemsSource="{Binding SummaryMetrics}"
                                SelectionMode="None"
                                HeightRequest="110">
                    <CollectionView.ItemsLayout>
                        <GridItemsLayout Orientation="Horizontal"
                                         Span="2"
                                         HorizontalItemSpacing="12"
                                         VerticalItemSpacing="12" />
                    </CollectionView.ItemsLayout>
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="vm:AdminDashboardViewModel+SummaryMetric">
                            <Border BackgroundColor="#FFFFFF"
                                    StrokeThickness="0"
                                    Padding="16"
                                    MinimumWidthRequest="150">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="20" />
                                </Border.StrokeShape>
                                <VerticalStackLayout Spacing="6">
                                    <Label Text="{Binding Title}"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Label Text="{Binding Value}"
                                           FontSize="20"
                                           FontAttributes="Bold"
                                           TextColor="#1A1A1A" />
                                    <Label Text="{Binding Description}"
                                           FontSize="12"
                                           TextColor="#9AA0B1" />
                                </VerticalStackLayout>
                            </Border>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>

                <Grid ColumnDefinitions="*,*"
                      ColumnSpacing="16">
                    <Border Grid.Column="0"
                            BackgroundColor="#FFFFFF"
                            StrokeThickness="0"
                            Padding="18">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="20" />
                        </Border.StrokeShape>
                        <VerticalStackLayout Spacing="14">
                            <Grid ColumnDefinitions="*,Auto"
                                  VerticalOptions="Center">
                                <Label Text="服务列表"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#1A1A1A" />
                                <ActivityIndicator Grid.Column="1"
                                                    IsRunning="{Binding IsBusy}"
                                                    IsVisible="{Binding IsBusy}"
                                                    WidthRequest="20"
                                                    HeightRequest="20" />
                            </Grid>

                            <CollectionView ItemsSource="{Binding Services}"
                                            SelectionMode="Single"
                                            SelectedItem="{Binding SelectedService, Mode=TwoWay}">
                                <CollectionView.ItemsLayout>
                                    <LinearItemsLayout Orientation="Vertical"
                                                       ItemSpacing="10" />
                                </CollectionView.ItemsLayout>
                                <CollectionView.ItemTemplate>
                                    <DataTemplate x:DataType="vm:AdminDashboardViewModel+ServiceListItem">
                                    <Border BackgroundColor="#FFFFFF"
                                            StrokeThickness="0"
                                            Padding="14"
                                            IsVisible="{Binding IsVisible}">
                                        <Border.StrokeShape>
                                            <RoundRectangle CornerRadius="18" />
                                        </Border.StrokeShape>
                                        <Border.Triggers>
                                            <DataTrigger TargetType="Border"
                                                         Binding="{Binding IsFeatured}"
                                                         Value="True">
                                                <Setter Property="BackgroundColor" Value="#F6F7FF" />
                                            </DataTrigger>
                                        </Border.Triggers>
                                            <Grid ColumnDefinitions="*,Auto"
                                                  ColumnSpacing="10">
                                                <VerticalStackLayout Spacing="6">
                                                    <Label Text="{Binding Title}"
                                                           FontSize="15"
                                                           FontAttributes="Bold"
                                                           TextColor="#1A1A1A" />

                                                    <Label Text="{Binding GameName}"
                                                           FontSize="12"
                                                           TextColor="#7A8196" />

                                                    <HorizontalStackLayout Spacing="10">
                                                        <Label Text="{Binding PriceDisplay}"
                                                               FontSize="13"
                                                               FontAttributes="Bold"
                                                               TextColor="#3478F6" />
                                                        <Label Text="{Binding Category}"
                                                               FontSize="12"
                                                               TextColor="#9AA0B1" />
                                                    </HorizontalStackLayout>
                                                </VerticalStackLayout>

                                                <Label Grid.Column="1"
                                                       Text="{Binding FeaturedBadge}"
                                                       FontSize="12"
                                                       TextColor="#FF9F0A"
                                                       VerticalTextAlignment="Center" />
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </CollectionView.ItemTemplate>
                            </CollectionView>
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="1"
                            BackgroundColor="#FFFFFF"
                            StrokeThickness="0"
                            Padding="18">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="20" />
                        </Border.StrokeShape>

                        <VerticalStackLayout Spacing="16">
                            <Label Text="服务详情编辑"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />

                            <Grid RowDefinitions="Auto,Auto,Auto,Auto,Auto,Auto"
                                  ColumnDefinitions="Auto,*"
                                  ColumnSpacing="12"
                                  RowSpacing="12">
                                <Label Grid.Row="0"
                                       Grid.Column="0"
                                       Text="名称"
                                       FontSize="14"
                                       TextColor="#7A8196" />
                                <Entry Grid.Row="0"
                                       Grid.Column="1"
                                       Text="{Binding ServiceForm.Title}"
                                       Placeholder="请输入服务名称" />

                                <Label Grid.Row="1"
                                       Grid.Column="0"
                                       Text="价格"
                                       FontSize="14"
                                       TextColor="#7A8196" />
                                <Entry Grid.Row="1"
                                       Grid.Column="1"
                                       Text="{Binding ServiceForm.Price}"
                                       Keyboard="Numeric"
                                       Placeholder="请输入价格" />

                                <Label Grid.Row="2"
                                       Grid.Column="0"
                                       Text="所属游戏"
                                       FontSize="14"
                                       TextColor="#7A8196" />
                                <Entry Grid.Row="2"
                                       Grid.Column="1"
                                       Text="{Binding ServiceForm.GameName}"
                                       Placeholder="如：王者荣耀" />

                                <Label Grid.Row="3"
                                       Grid.Column="0"
                                       Text="分类"
                                       FontSize="14"
                                       TextColor="#7A8196" />
                                <Entry Grid.Row="3"
                                       Grid.Column="1"
                                       Text="{Binding ServiceForm.Category}"
                                       Placeholder="如：MOBA" />

                                <Label Grid.Row="4"
                                       Grid.Column="0"
                                       Text="类型"
                                       FontSize="14"
                                       TextColor="#7A8196" />
                                <Entry Grid.Row="4"
                                       Grid.Column="1"
                                       Text="{Binding ServiceForm.ServiceType}"
                                       Placeholder="如：陪练、代练、教学" />

                                <Label Grid.Row="5"
                                       Grid.Column="0"
                                       Text="缩略图"
                                       FontSize="14"
                                       TextColor="#7A8196" />
                                <Entry Grid.Row="5"
                                       Grid.Column="1"
                                       Text="{Binding ServiceForm.ThumbnailUrl}"
                                       Placeholder="资源文件名或链接" />
                            </Grid>

                            <Label Text="标签（用逗号分隔）"
                                   FontSize="14"
                                   TextColor="#7A8196" />
                            <Entry Text="{Binding ServiceForm.Tags}"
                                   Placeholder="示例：教学, 冲分, 双排" />

                            <Label Text="服务简介"
                                   FontSize="14"
                                   TextColor="#7A8196" />
                            <Editor Text="{Binding ServiceForm.Description}"
                                    HeightRequest="120"
                                    AutoSize="TextChanges"
                                    Placeholder="输入服务亮点、流程等描述" />

                            <Grid ColumnDefinitions="*,Auto"
                                  VerticalOptions="Center">
                                <Label Text="设为精选推荐"
                                       FontSize="14"
                                       TextColor="#1A1A1A" />
                                <Switch Grid.Column="1"
                                        IsToggled="{Binding ServiceForm.IsFeatured}" />
                            </Grid>

                            <Label Text="{Binding ServiceForm.ValidationMessage}"
                                   FontSize="12"
                                   TextColor="#FF4D4F"
                                   IsVisible="{Binding ServiceForm.HasValidationError}" />

                            <Grid ColumnDefinitions="*,*,*"
                                  ColumnSpacing="10">
                                <Button Text="保存修改"
                                        Command="{Binding SaveCommand}"
                                        IsEnabled="{Binding CanSave}"
                                        BackgroundColor="#3478F6"
                                        TextColor="White"
                                        HeightRequest="44"
                                        CornerRadius="16" />

                                <Button Grid.Column="1"
                                        Text="恢复表单"
                                        Command="{Binding ResetCommand}"
                                        IsEnabled="{Binding CanReset}"
                                        BackgroundColor="#EEF1F5"
                                        TextColor="#4B5563"
                                        HeightRequest="44"
                                        CornerRadius="16" />

                                <Button Grid.Column="2"
                                        Text="切换精选"
                                        Command="{Binding ToggleFeaturedCommand}"
                                        IsEnabled="{Binding CanReset}"
                                        BackgroundColor="#FF9F0A"
                                        TextColor="White"
                                        HeightRequest="44"
                                        CornerRadius="16" />
                            </Grid>

                            <Label Text="{Binding StatusMessage}"
                                   FontSize="13"
                                   TextColor="#3478F6"
                                   IsVisible="{Binding HasStatusMessage}" />
                        </VerticalStackLayout>
                    </Border>
                </Grid>

                <Border BackgroundColor="#FFFFFF"
                        StrokeThickness="0"
                        Padding="18">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="20" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="14">
                        <Label Text="最新订单一览"
                               FontSize="16"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />

                        <CollectionView ItemsSource="{Binding RecentOrders}"
                                        SelectionMode="None">
                            <CollectionView.EmptyView>
                                <Label Text="当前没有订单"
                                       FontSize="13"
                                       TextColor="#9AA0B1"
                                       HorizontalTextAlignment="Center"
                                       Padding="0,12" />
                            </CollectionView.EmptyView>
                            <CollectionView.ItemsLayout>
                                <LinearItemsLayout Orientation="Vertical"
                                                   ItemSpacing="10" />
                            </CollectionView.ItemsLayout>
                            <CollectionView.ItemTemplate>
                                <DataTemplate x:DataType="vm:AdminDashboardViewModel+OrderSnapshot">
                                    <Border BackgroundColor="#F6F7FB"
                                            StrokeThickness="0"
                                            Padding="14">
                                        <Border.StrokeShape>
                                            <RoundRectangle CornerRadius="18" />
                                        </Border.StrokeShape>

                                        <Grid ColumnDefinitions="*,Auto"
                                              RowDefinitions="Auto,Auto"
                                              RowSpacing="6">
                                            <Label Text="{Binding ServiceTitle}"
                                                   FontSize="15"
                                                   FontAttributes="Bold"
                                                   TextColor="#1A1A1A" />
                                            <Label Grid.Column="1"
                                                   Text="{Binding StatusDisplay}"
                                                   FontSize="13"
                                                   TextColor="#3478F6"
                                                   HorizontalTextAlignment="End" />

                                            <Label Grid.Row="1"
                                                   Text="{Binding OrderDateDisplay}"
                                                   FontSize="12"
                                                   TextColor="#7A8196" />
                                            <Label Grid.Row="1"
                                                   Grid.Column="1"
                                                   Text="{Binding TotalPriceDisplay}"
                                                   FontSize="13"
                                                   FontAttributes="Bold"
                                                   TextColor="#1A1A1A"
                                                   HorizontalTextAlignment="End" />
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

        <Grid IsVisible="{Binding IsAccessDenied}">
            <VerticalStackLayout Padding="24"
                                 HorizontalOptions="Center"
                                 VerticalOptions="Center"
                                 Spacing="14">
                <Label Text="当前账号没有管理员权限"
                       FontSize="18"
                       FontAttributes="Bold"
                       TextColor="#1A1A1A"
                       HorizontalTextAlignment="Center" />
                <Label Text="请使用管理员账号登录以访问服务管理功能。"
                       FontSize="13"
                       TextColor="#7A8196"
                       HorizontalTextAlignment="Center" />
            </VerticalStackLayout>
        </Grid>
    </Grid>
</ContentPage>
】

Views/AdminDashboardPage.xaml.cs:
【using GamerLinkApp.Helpers;
using GamerLinkApp.ViewModels;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.Views;

public partial class AdminDashboardPage : ContentPage
{
    public AdminDashboardPage()
        : this(ServiceHelper.GetRequiredService<AdminDashboardViewModel>())
    {
    }

    public AdminDashboardPage(AdminDashboardViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if (BindingContext is AdminDashboardViewModel vm)
        {
            await vm.LoadAsync();
        }
    }
}
】

Views/AdminOrdersPage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.AdminOrdersPage"
             x:DataType="vm:AdminOrdersViewModel"
             Title="订单管理"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="True">
    <Grid>
        <ScrollView IsVisible="{Binding HasAccess}">
            <VerticalStackLayout Padding="20,16,20,32"
                                 Spacing="18">
                <Grid ColumnDefinitions="*,Auto,Auto"
                      VerticalOptions="Center">
                    <VerticalStackLayout Spacing="4">
                        <Label Text="订单管理中心"
                               FontSize="22"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <Label Text="查看与调整所有订单进度状态"
                               FontSize="13"
                               TextColor="#7A8196" />
                    </VerticalStackLayout>

                    <Button Grid.Column="1"
                            Text="刷新"
                            Command="{Binding RefreshCommand}"
                            HeightRequest="38"
                            Padding="16,0"
                            BackgroundColor="#3478F6"
                            TextColor="White"
                            CornerRadius="14"
                            VerticalOptions="Center" />

                    <Button Grid.Column="2"
                            Text="退出登录"
                            Command="{Binding LogoutCommand}"
                            HeightRequest="38"
                            Padding="16,0"
                            BackgroundColor="#FF4D4F"
                            TextColor="White"
                            CornerRadius="14"
                            Margin="12,0,0,0"
                            VerticalOptions="Center" />
                </Grid>

                <Border BackgroundColor="#FFFFFF"
                        Padding="16,12"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <Entry Text="{Binding SearchText}"
                           Placeholder="按订单号、服务名称或买家搜索"
                           PlaceholderColor="#A3A9B6"
                           FontSize="14"
                           ClearButtonVisibility="WhileEditing"
                           BackgroundColor="Transparent"
                           TextColor="#1A1A1A" />
                </Border>

                <CollectionView ItemsSource="{Binding StatusFilters}"
                                SelectionMode="Single"
                                SelectedItem="{Binding SelectedFilter, Mode=TwoWay}"
                                HeightRequest="60">
                    <CollectionView.ItemsLayout>
                        <LinearItemsLayout Orientation="Horizontal"
                                           ItemSpacing="12" />
                    </CollectionView.ItemsLayout>
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="vm:AdminOrdersViewModel+AdminOrderFilter">
                            <Border Padding="14,10"
                                    StrokeThickness="0"
                                    BackgroundColor="#EEF1F5">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="22" />
                                </Border.StrokeShape>

                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup Name="CommonStates">
                                        <VisualState Name="Normal">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor" Value="#EEF1F5" />
                                                <Setter TargetName="FilterTitle"
                                                        Property="Label.TextColor"
                                                        Value="#4B5563" />
                                                <Setter TargetName="FilterCount"
                                                        Property="Label.TextColor"
                                                        Value="#9AA0B1" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState Name="Selected">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor" Value="#3478F6" />
                                                <Setter TargetName="FilterTitle"
                                                        Property="Label.TextColor"
                                                        Value="White" />
                                                <Setter TargetName="FilterCount"
                                                        Property="Label.TextColor"
                                                        Value="#DCE7FF" />
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>

                                <HorizontalStackLayout Spacing="8">
                                    <Label x:Name="FilterTitle"
                                           Text="{Binding DisplayName}"
                                           FontSize="14"
                                           FontAttributes="Bold" />
                                    <Label x:Name="FilterCount"
                                           Text="{Binding CountDisplay}"
                                           FontSize="12" />
                                </HorizontalStackLayout>
                            </Border>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>

                <Label Text="{Binding StatusMessage}"
                       FontSize="13"
                       TextColor="#3478F6"
                       IsVisible="{Binding HasStatusMessage}" />

                <Grid ColumnDefinitions="*,*"
                      ColumnSpacing="16">
                    <Border Grid.Column="0"
                            BackgroundColor="#FFFFFF"
                            StrokeThickness="0"
                            Padding="18">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="20" />
                        </Border.StrokeShape>

                        <VerticalStackLayout Spacing="14">
                            <Grid ColumnDefinitions="*,Auto"
                                  VerticalOptions="Center">
                                <Label Text="订单列表"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#1A1A1A" />
                                <ActivityIndicator Grid.Column="1"
                                                    IsVisible="{Binding IsBusy}"
                                                    IsRunning="{Binding IsBusy}"
                                                    WidthRequest="20"
                                                    HeightRequest="20" />
                            </Grid>

                            <CollectionView ItemsSource="{Binding Orders}"
                                            SelectionMode="Single"
                                            SelectedItem="{Binding SelectedOrder, Mode=TwoWay}">
                                <CollectionView.EmptyView>
                                    <Label Text="暂无订单"
                                           FontSize="13"
                                           TextColor="#9AA0B1"
                                           HorizontalTextAlignment="Center"
                                           Padding="0,12" />
                                </CollectionView.EmptyView>
                                <CollectionView.ItemsLayout>
                                    <LinearItemsLayout Orientation="Vertical"
                                                       ItemSpacing="12" />
                                </CollectionView.ItemsLayout>
                                <CollectionView.ItemTemplate>
                                    <DataTemplate x:DataType="vm:AdminOrdersViewModel+AdminOrderItem">
                                        <Border BackgroundColor="#F6F7FB"
                                                StrokeThickness="0"
                                                Padding="14">
                                            <Border.StrokeShape>
                                                <RoundRectangle CornerRadius="18" />
                                            </Border.StrokeShape>
                                            <Grid RowDefinitions="Auto,Auto"
                                                  ColumnDefinitions="*,Auto"
                                                  RowSpacing="8">
                                                <HorizontalStackLayout Spacing="8"
                                                                        VerticalOptions="Center">
                                    <Border Padding="8,4"
                                            BackgroundColor="{Binding StatusBadgeColor}"
                                            StrokeThickness="0">
                                        <Border.StrokeShape>
                                            <RoundRectangle CornerRadius="12" />
                                        </Border.StrokeShape>
                                        <Label Text="{Binding StatusDisplay}"
                                               FontSize="11"
                                               TextColor="{Binding StatusTextColor}" />
                                    </Border>
                                                    <Label Text="{Binding ServiceTitle}"
                                                           FontSize="15"
                                                           FontAttributes="Bold"
                                                           TextColor="#1A1A1A" />
                                                </HorizontalStackLayout>

                                                <Label Grid.Column="1"
                                                       Text="{Binding TotalPriceDisplay}"
                                                       FontSize="14"
                                                       FontAttributes="Bold"
                                                       TextColor="#3478F6"
                                                       HorizontalTextAlignment="End" />

                                                <HorizontalStackLayout Grid.Row="1"
                                                                        Spacing="12">
                                                    <Label Text="{Binding OrderDateDisplay}"
                                                           FontSize="12"
                                                           TextColor="#7A8196" />
                                                    <Label Text="{Binding BuyerName}"
                                                           FontSize="12"
                                                           TextColor="#9AA0B1" />
                                                </HorizontalStackLayout>

                                                <Label Grid.Row="1"
                                                       Grid.Column="1"
                                                       Text="{Binding OrderNumberDisplay}"
                                                       FontSize="12"
                                                       TextColor="#9AA0B1"
                                                       HorizontalTextAlignment="End" />
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </CollectionView.ItemTemplate>
                            </CollectionView>
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="1"
                            BackgroundColor="#FFFFFF"
                            StrokeThickness="0"
                            Padding="18">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="20" />
                        </Border.StrokeShape>

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <Grid Grid.Row="0"
                                  RowDefinitions="Auto,Auto,Auto"
                                  ColumnDefinitions="Auto,*"
                                  ColumnSpacing="12"
                                  RowSpacing="10"
                                  IsVisible="{Binding HasSelection}">
                                <Label Text="订单详情"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#1A1A1A"
                                       Grid.ColumnSpan="2" />

                                <Label Grid.Row="1"
                                       Text="订单号"
                                       FontSize="14"
                                       TextColor="#7A8196" />
                                <Label Grid.Row="1"
                                       Grid.Column="1"
                                       Text="{Binding SelectedOrder.OrderNumberDisplay}"
                                       FontSize="14"
                                       TextColor="#1A1A1A" />

                                <Label Grid.Row="2"
                                       Text="服务名称"
                                       FontSize="14"
                                       TextColor="#7A8196" />
                                <Label Grid.Row="2"
                                       Grid.Column="1"
                                       Text="{Binding SelectedOrder.ServiceTitle}"
                                       FontSize="14"
                                       TextColor="#1A1A1A" />
                            </Grid>

                            <VerticalStackLayout Grid.Row="1"
                                                 Spacing="14"
                                                 IsVisible="{Binding HasSelection}">
                                <Grid ColumnDefinitions="Auto,*"
                                      RowDefinitions="Auto,Auto,Auto,Auto"
                                      ColumnSpacing="12"
                                      RowSpacing="10">
                                    <Label Text="买家"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Label Grid.Column="1"
                                           Text="{Binding SelectedOrder.BuyerName}"
                                           FontSize="14"
                                           TextColor="#1A1A1A" />

                                    <Label Grid.Row="1"
                                           Text="金额"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Label Grid.Row="1"
                                           Grid.Column="1"
                                           Text="{Binding SelectedOrder.TotalPriceDisplay}"
                                           FontSize="14"
                                           FontAttributes="Bold"
                                           TextColor="#3478F6" />

                                    <Label Grid.Row="2"
                                           Text="下单时间"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Label Grid.Row="2"
                                           Grid.Column="1"
                                           Text="{Binding SelectedOrder.OrderDateDisplay}"
                                           FontSize="14"
                                           TextColor="#1A1A1A" />

                                    <Label Grid.Row="3"
                                           Text="支付时间"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Label Grid.Row="3"
                                           Grid.Column="1"
                                           Text="{Binding SelectedOrder.PaymentDateDisplay}"
                                           FontSize="14"
                                           TextColor="#1A1A1A" />
                                </Grid>

                                <Grid ColumnDefinitions="Auto,*"
                                      ColumnSpacing="12">
                                    <Label Text="完成时间"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Label Grid.Column="1"
                                           Text="{Binding SelectedOrder.CompletionDateDisplay}"
                                           FontSize="14"
                                           TextColor="#1A1A1A" />
                                </Grid>

                                <Grid ColumnDefinitions="Auto,*"
                                      ColumnSpacing="12">
                                    <Label Text="退款时间"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Label Grid.Column="1"
                                           Text="{Binding SelectedOrder.RefundDateDisplay}"
                                           FontSize="14"
                                           TextColor="#1A1A1A" />
                                </Grid>

                                <Grid ColumnDefinitions="*,*,*"
                                      ColumnSpacing="10">
                                    <Button Text="标记已支付"
                                            Command="{Binding MarkPaidCommand}"
                                            IsEnabled="{Binding CanMarkPaid}"
                                            BackgroundColor="#3478F6"
                                            TextColor="White"
                                            HeightRequest="44"
                                            CornerRadius="16" />
                                    <Button Grid.Column="1"
                                            Text="待评价"
                                            Command="{Binding MarkPendingReviewCommand}"
                                            IsEnabled="{Binding CanMarkPendingReview}"
                                            BackgroundColor="#8E24AA"
                                            TextColor="White"
                                            HeightRequest="44"
                                            CornerRadius="16" />
                                    <Button Grid.Column="2"
                                            Text="标记完成"
                                            Command="{Binding MarkCompletedCommand}"
                                            IsEnabled="{Binding CanMarkCompleted}"
                                            BackgroundColor="#2DBE60"
                                            TextColor="White"
                                            HeightRequest="44"
                                            CornerRadius="16" />
                                </Grid>

                                <Button Text="取消订单"
                                        Command="{Binding MarkCancelledCommand}"
                                        IsEnabled="{Binding CanMarkCancelled}"
                                        BackgroundColor="#FF4D4F"
                                        TextColor="White"
                                        HeightRequest="44"
                                        CornerRadius="16" />
                            </VerticalStackLayout>

                            <VerticalStackLayout Grid.Row="1"
                                                 Spacing="12"
                                                 IsVisible="True">
                                <VerticalStackLayout.Triggers>
                                    <DataTrigger TargetType="VerticalStackLayout"
                                                 Binding="{Binding HasSelection}"
                                                 Value="True">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                </VerticalStackLayout.Triggers>
                                <Label Text="请选择订单查看详情"
                                       FontSize="14"
                                       TextColor="#9AA0B1"
                                       HorizontalTextAlignment="Center"
                                       VerticalOptions="CenterAndExpand" />
                            </VerticalStackLayout>
                        </Grid>
                    </Border>
                </Grid>
            </VerticalStackLayout>
        </ScrollView>

        <Grid IsVisible="{Binding IsAccessDenied}">
            <VerticalStackLayout Padding="24"
                                 HorizontalOptions="Center"
                                 VerticalOptions="Center"
                                 Spacing="14">
                <Label Text="当前账号没有管理员权限"
                       FontSize="18"
                       FontAttributes="Bold"
                       TextColor="#1A1A1A"
                       HorizontalTextAlignment="Center" />
                <Label Text="请使用管理员账号登录以访问订单管理功能。"
                       FontSize="13"
                       TextColor="#7A8196"
                       HorizontalTextAlignment="Center" />
            </VerticalStackLayout>
        </Grid>
    </Grid>
</ContentPage>
】

Views/AdminOrdersPage.xaml.cs:
【﻿using GamerLinkApp.Helpers;
using GamerLinkApp.ViewModels;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.Views;

public partial class AdminOrdersPage : ContentPage
{
    public AdminOrdersPage()
        : this(ServiceHelper.GetRequiredService<AdminOrdersViewModel>())
    {
    }

    public AdminOrdersPage(AdminOrdersViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if (BindingContext is AdminOrdersViewModel vm)
        {
            await vm.LoadAsync();
        }
    }
}
】

Views/AdminUsersPage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.AdminUsersPage"
             x:DataType="vm:AdminUsersViewModel"
             Title="用户管理"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="True">
    <Grid>
        <ScrollView IsVisible="{Binding HasAccess}">
            <VerticalStackLayout Padding="20,16,20,32"
                                 Spacing="18">
                <Grid ColumnDefinitions="*,Auto,Auto"
                      VerticalOptions="Center">
                    <VerticalStackLayout Spacing="4">
                        <Label Text="用户管理中心"
                               FontSize="22"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <Label Text="查看并维护后台所有用户资料与权限"
                               FontSize="13"
                               TextColor="#7A8196" />
                    </VerticalStackLayout>

                    <Button Grid.Column="1"
                            Text="刷新"
                            Command="{Binding RefreshCommand}"
                            HeightRequest="38"
                            Padding="16,0"
                            BackgroundColor="#3478F6"
                            TextColor="White"
                            CornerRadius="14"
                            VerticalOptions="Center" />

                    <Button Grid.Column="2"
                            Text="退出登录"
                            Command="{Binding LogoutCommand}"
                            HeightRequest="38"
                            Padding="16,0"
                            BackgroundColor="#FF4D4F"
                            TextColor="White"
                            CornerRadius="14"
                            Margin="12,0,0,0"
                            VerticalOptions="Center" />
                </Grid>

                <Border BackgroundColor="#FFFFFF"
                        Padding="16,12"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <Entry Text="{Binding SearchText}"
                           Placeholder="按昵称、用户名或邮箱搜索用户"
                           PlaceholderColor="#A3A9B6"
                           FontSize="14"
                           ClearButtonVisibility="WhileEditing"
                           BackgroundColor="Transparent"
                           TextColor="#1A1A1A" />
                </Border>

                <CollectionView ItemsSource="{Binding SummaryMetrics}"
                                SelectionMode="None"
                                HeightRequest="110">
                    <CollectionView.ItemsLayout>
                        <GridItemsLayout Orientation="Horizontal"
                                         Span="2"
                                         HorizontalItemSpacing="12"
                                         VerticalItemSpacing="12" />
                    </CollectionView.ItemsLayout>
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="vm:AdminUsersViewModel+UserSummaryMetric">
                            <Border BackgroundColor="#FFFFFF"
                                    StrokeThickness="0"
                                    Padding="16"
                                    MinimumWidthRequest="150">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="20" />
                                </Border.StrokeShape>
                                <VerticalStackLayout Spacing="6">
                                    <Label Text="{Binding Title}"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Label Text="{Binding Value}"
                                           FontSize="20"
                                           FontAttributes="Bold"
                                           TextColor="#1A1A1A" />
                                    <Label Text="{Binding Description}"
                                           FontSize="12"
                                           TextColor="#9AA0B1" />
                                </VerticalStackLayout>
                            </Border>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>

                <CollectionView ItemsSource="{Binding Filters}"
                                SelectionMode="Single"
                                SelectedItem="{Binding SelectedFilter, Mode=TwoWay}"
                                HeightRequest="60">
                    <CollectionView.ItemsLayout>
                        <LinearItemsLayout Orientation="Horizontal"
                                           ItemSpacing="12" />
                    </CollectionView.ItemsLayout>
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="vm:AdminUsersViewModel+UserFilter">
                            <Border Padding="14,10"
                                    StrokeThickness="0"
                                    BackgroundColor="#EEF1F5">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="22" />
                                </Border.StrokeShape>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup Name="CommonStates">
                                        <VisualState Name="Normal">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor" Value="#EEF1F5" />
                                                <Setter TargetName="FilterTitle"
                                                        Property="Label.TextColor"
                                                        Value="#4B5563" />
                                                <Setter TargetName="FilterCount"
                                                        Property="Label.TextColor"
                                                        Value="#9AA0B1" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState Name="Selected">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor" Value="#3478F6" />
                                                <Setter TargetName="FilterTitle"
                                                        Property="Label.TextColor"
                                                        Value="White" />
                                                <Setter TargetName="FilterCount"
                                                        Property="Label.TextColor"
                                                        Value="#DCE7FF" />
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <HorizontalStackLayout Spacing="8">
                                    <Label x:Name="FilterTitle"
                                           Text="{Binding DisplayName}"
                                           FontSize="14"
                                           FontAttributes="Bold" />
                                    <Label x:Name="FilterCount"
                                           Text="{Binding CountDisplay}"
                                           FontSize="12" />
                                </HorizontalStackLayout>
                            </Border>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>

                <Label Text="{Binding StatusMessage}"
                       FontSize="13"
                       TextColor="#3478F6"
                       IsVisible="{Binding HasStatusMessage}" />

                <Grid ColumnDefinitions="*,*"
                      ColumnSpacing="16">
                    <Border Grid.Column="0"
                            BackgroundColor="#FFFFFF"
                            StrokeThickness="0"
                            Padding="18">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="20" />
                        </Border.StrokeShape>

                        <VerticalStackLayout Spacing="14">
                            <Grid ColumnDefinitions="*,Auto"
                                  VerticalOptions="Center">
                                <Label Text="用户列表"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#1A1A1A" />
                                <ActivityIndicator Grid.Column="1"
                                                   IsVisible="{Binding IsBusy}"
                                                   IsRunning="{Binding IsBusy}"
                                                   HeightRequest="20"
                                                   WidthRequest="20" />
                            </Grid>

                            <CollectionView ItemsSource="{Binding Users}"
                                            SelectionMode="Single"
                                            SelectedItem="{Binding SelectedUser, Mode=TwoWay}"
                                            VerticalOptions="FillAndExpand">
                                <CollectionView.ItemsLayout>
                                    <LinearItemsLayout Orientation="Vertical"
                                                       ItemSpacing="12" />
                                </CollectionView.ItemsLayout>
                                <CollectionView.ItemTemplate>
                                    <DataTemplate x:DataType="vm:AdminUsersViewModel+UserListItem">
                                        <Border StrokeThickness="0"
                                                BackgroundColor="#FFFFFF"
                                                Padding="14"
                                                Margin="0,0,0,4">
                                            <Border.StrokeShape>
                                                <RoundRectangle CornerRadius="18" />
                                            </Border.StrokeShape>
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup Name="SelectionStates">
                                                    <VisualState Name="Normal">
                                                        <VisualState.Setters>
                                                            <Setter Property="BackgroundColor" Value="#FFFFFF" />
                                                        </VisualState.Setters>
                                                    </VisualState>
                                                    <VisualState Name="Selected">
                                                        <VisualState.Setters>
                                                            <Setter Property="BackgroundColor" Value="#E8F0FE" />
                                                        </VisualState.Setters>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Grid ColumnDefinitions="Auto,*"
                                                  ColumnSpacing="12"
                                                  RowDefinitions="Auto,Auto">
                                                <Border Grid.RowSpan="2"
                                                        WidthRequest="44"
                                                        HeightRequest="44"
                                                        BackgroundColor="#3478F6"
                                                        StrokeThickness="0"
                                                        VerticalOptions="Center">
                                                    <Border.StrokeShape>
                                                        <RoundRectangle CornerRadius="16" />
                                                    </Border.StrokeShape>
                                                    <Label Text="{Binding AvatarInitial}"
                                                           FontSize="18"
                                                           FontAttributes="Bold"
                                                           TextColor="White"
                                                           HorizontalTextAlignment="Center"
                                                           VerticalTextAlignment="Center" />
                                                </Border>

                                                <Label Grid.Column="1"
                                                       Text="{Binding DisplayName}"
                                                       FontSize="15"
                                                       FontAttributes="Bold"
                                                       TextColor="#1A1A1A" />

                                                <HorizontalStackLayout Grid.Row="1"
                                                                       Grid.Column="1"
                                                                       Spacing="10">
                                                    <Label Text="{Binding SecondaryText}"
                                                           FontSize="12"
                                                           TextColor="#7A8196" />
                                                </HorizontalStackLayout>

                                                <Border Grid.Row="0"
                                                        Grid.Column="1"
                                                        HorizontalOptions="End"
                                                        Padding="10,4"
                                                        BackgroundColor="{Binding RoleBadgeColor}"
                                                        StrokeThickness="0">
                                                    <Border.StrokeShape>
                                                        <RoundRectangle CornerRadius="14" />
                                                    </Border.StrokeShape>
                                                    <Label Text="{Binding RoleBadge}"
                                                           FontSize="12"
                                                           TextColor="White" />
                                                </Border>

                                                <HorizontalStackLayout Grid.Row="1"
                                                                       Grid.Column="1"
                                                                       HorizontalOptions="End"
                                                                       Spacing="8">
                                                    <Label Text="{Binding CreatedAtDisplay}"
                                                           FontSize="12"
                                                           TextColor="#9AA0B1" />
                                                    <Border Padding="8,3"
                                                            BackgroundColor="{Binding ActivityBadgeColor}"
                                                            StrokeThickness="0">
                                                        <Border.StrokeShape>
                                                            <RoundRectangle CornerRadius="12" />
                                                        </Border.StrokeShape>
                                                        <Label Text="{Binding ActivityBadge}"
                                                               FontSize="11"
                                                               TextColor="White" />
                                                    </Border>
                                                </HorizontalStackLayout>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </CollectionView.ItemTemplate>

                                <CollectionView.EmptyView>
                                    <VerticalStackLayout Padding="20"
                                                         HorizontalOptions="Center"
                                                         VerticalOptions="Center"
                                                         Spacing="6">
                                        <Label Text="未找到匹配的用户"
                                               FontSize="14"
                                               TextColor="#7A8196"
                                               HorizontalTextAlignment="Center" />
                                        <Label Text="尝试调整筛选条件或修改搜索关键字"
                                               FontSize="12"
                                               TextColor="#9AA0B1"
                                               HorizontalTextAlignment="Center" />
                                    </VerticalStackLayout>
                                </CollectionView.EmptyView>
                            </CollectionView>
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="1"
                            BackgroundColor="#FFFFFF"
                            StrokeThickness="0"
                            Padding="18">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="20" />
                        </Border.StrokeShape>

                        <Grid>
                            <VerticalStackLayout x:Name="DetailLayout"
                                                 Spacing="16">
                                <VerticalStackLayout.Triggers>
                                    <DataTrigger TargetType="VerticalStackLayout"
                                                 Binding="{Binding HasSelection}"
                                                 Value="False">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                </VerticalStackLayout.Triggers>

                                <Label Text="用户详情"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#1A1A1A" />

                                <Grid RowDefinitions="Auto,Auto,Auto,Auto,Auto"
                                      ColumnDefinitions="Auto,*"
                                      ColumnSpacing="12"
                                      RowSpacing="12">
                                    <Label Grid.Row="0"
                                           Grid.Column="0"
                                           Text="用户名"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Entry Grid.Row="0"
                                           Grid.Column="1"
                                           Text="{Binding UserForm.Username}"
                                           IsReadOnly="True"
                                           TextColor="#1A1A1A"
                                           BackgroundColor="#F5F6F9" />

                                    <Label Grid.Row="1"
                                           Grid.Column="0"
                                           Text="昵称"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Entry Grid.Row="1"
                                           Grid.Column="1"
                                           Text="{Binding UserForm.Nickname}"
                                           Placeholder="请输入用户昵称" />

                                    <Label Grid.Row="2"
                                           Grid.Column="0"
                                           Text="邮箱"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Entry Grid.Row="2"
                                           Grid.Column="1"
                                           Text="{Binding UserForm.Email}"
                                           Keyboard="Email"
                                           Placeholder="请输入邮箱" />

                                    <Label Grid.Row="3"
                                           Grid.Column="0"
                                           Text="头像链接"
                                           FontSize="14"
                                           TextColor="#7A8196" />
                                    <Entry Grid.Row="3"
                                           Grid.Column="1"
                                           Text="{Binding UserForm.AvatarUrl}"
                                           Placeholder="https://example.com/avatar.png" />

                                    <Label Grid.Row="4"
                                           Grid.Column="0"
                                           Text="管理员权限"
                                           FontSize="14"
                                           TextColor="#7A8196"
                                           VerticalTextAlignment="Center" />
                                    <Switch Grid.Row="4"
                                            Grid.Column="1"
                                            IsToggled="{Binding UserForm.IsAdmin}"
                                            HorizontalOptions="Start" />
                                </Grid>

                                <Label Text="{Binding UserForm.ValidationMessage}"
                                       FontSize="12"
                                       TextColor="#FF4D4F"
                                       IsVisible="{Binding UserForm.HasValidationError}" />

                                <VerticalStackLayout Spacing="6">
                                    <Label Text="{Binding SelectedUser.CreatedAtDisplay}"
                                           FontSize="12"
                                           TextColor="#9AA0B1" />
                                    <Label Text="{Binding SelectedUser.LastLoginDisplay}"
                                           FontSize="12"
                                           TextColor="#9AA0B1" />
                                </VerticalStackLayout>

                                <HorizontalStackLayout Spacing="12">
                                    <Button Text="保存修改"
                                            Command="{Binding SaveCommand}"
                                            IsEnabled="{Binding CanSave}"
                                            BackgroundColor="#3478F6"
                                            TextColor="White"
                                            HeightRequest="44"
                                            CornerRadius="16"
                                            HorizontalOptions="FillAndExpand" />
                                    <Button Text="重置"
                                            Command="{Binding ResetCommand}"
                                            IsEnabled="{Binding CanReset}"
                                            BackgroundColor="#EEF1F5"
                                            TextColor="#1A1A1A"
                                            HeightRequest="44"
                                            CornerRadius="16"
                                            HorizontalOptions="FillAndExpand" />
                                </HorizontalStackLayout>
                            </VerticalStackLayout>

                            <VerticalStackLayout Spacing="12"
                                                 HorizontalOptions="Center"
                                                 VerticalOptions="Center"
                                                 IsVisible="True">
                                <VerticalStackLayout.Triggers>
                                    <DataTrigger TargetType="VerticalStackLayout"
                                                 Binding="{Binding HasSelection}"
                                                 Value="True">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                </VerticalStackLayout.Triggers>

                                <Label Text="请选择左侧的用户查看详情"
                                       FontSize="14"
                                       TextColor="#9AA0B1"
                                       HorizontalTextAlignment="Center" />
                            </VerticalStackLayout>
                        </Grid>
                    </Border>
                </Grid>
            </VerticalStackLayout>
        </ScrollView>

        <Grid IsVisible="{Binding IsAccessDenied}">
            <VerticalStackLayout Padding="24"
                                 HorizontalOptions="Center"
                                 VerticalOptions="Center"
                                 Spacing="14">
                <Label Text="当前账号没有管理员权限"
                       FontSize="18"
                       FontAttributes="Bold"
                       TextColor="#1A1A1A"
                       HorizontalTextAlignment="Center" />
                <Label Text="请使用管理员账号登录以访问用户管理功能"
                       FontSize="13"
                       TextColor="#7A8196"
                       HorizontalTextAlignment="Center" />
            </VerticalStackLayout>
        </Grid>
    </Grid>
</ContentPage>
】

Views/AdminUsersPage.xaml.cs:
【using GamerLinkApp.Helpers;
using GamerLinkApp.ViewModels;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.Views;

public partial class AdminUsersPage : ContentPage
{
    public AdminUsersPage()
        : this(ServiceHelper.GetRequiredService<AdminUsersViewModel>())
    {
    }

    public AdminUsersPage(AdminUsersViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if (BindingContext is AdminUsersViewModel vm)
        {
            await vm.LoadAsync();
        }
    }
}
】

Views/FavoriteServicesPage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             xmlns:models="clr-namespace:GamerLinkApp.Models"
             x:Class="GamerLinkApp.Views.FavoriteServicesPage"
             x:Name="FavoriteServicesPageRoot"
             x:DataType="vm:FavoriteServicesViewModel"
             Title="我的收藏"
             BackgroundColor="#F5F6F9">
    <Grid RowDefinitions="Auto,*"
          Padding="0,12,0,0">
        <Label Text="收藏的服务"
               FontSize="20"
               FontAttributes="Bold"
               TextColor="#1F1F1F"
               Margin="20,0,20,12" />

        <Grid Grid.Row="1">
            <CollectionView ItemsSource="{Binding Favorites}"
                            SelectionMode="None"
                            BackgroundColor="Transparent"
                            Margin="0,0,0,20">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical" ItemSpacing="0" />
                </CollectionView.ItemsLayout>

                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="models:Service">
                        <Frame Margin="20,0,20,16"
                               Padding="12"
                               BackgroundColor="White"
                               CornerRadius="18"
                               HasShadow="False"
                               BorderColor="#EEEEEE">
                            <Frame.GestureRecognizers>
                                <TapGestureRecognizer Tapped="OnServiceTapped" />
                            </Frame.GestureRecognizers>
                            <Grid>
                                <Grid ColumnDefinitions="Auto,*"
                                      ColumnSpacing="14">
                                    <Border Grid.Column="0"
                                            WidthRequest="110"
                                            HeightRequest="88"
                                            StrokeShape="RoundRectangle 16"
                                            VerticalOptions="Center">
                                        <Image Source="{Binding ThumbnailUrl}"
                                               Aspect="AspectFill" />
                                    </Border>

                                    <VerticalStackLayout Grid.Column="1"
                                                          Spacing="6"
                                                          VerticalOptions="Center">
                                        <Label Text="{Binding Title}"
                                               FontSize="16"
                                               FontAttributes="Bold"
                                               TextColor="#2A2F3C"
                                               LineBreakMode="TailTruncation" />
                                        <Label Text="{Binding GameName}"
                                               FontSize="13"
                                               TextColor="#777D8C"
                                               LineBreakMode="TailTruncation" />
                                        <HorizontalStackLayout Spacing="10">
                                            <Label Text="{Binding PurchaseCount, StringFormat='{0}人购买'}"
                                                   FontSize="12"
                                                   TextColor="#9AA0B1" />
                                            <Label Text="{Binding CompletedCount, StringFormat='完成{0}'}"
                                                   FontSize="12"
                                                   TextColor="#9AA0B1" />
                                        </HorizontalStackLayout>
                                        <Label Text="{Binding Price, StringFormat='￥{0:F0}'}"
                                               FontSize="16"
                                               FontAttributes="Bold"
                                               TextColor="#FF4D4F" />
                                    </VerticalStackLayout>
                                </Grid>

                                <ImageButton Source="heart_filled.svg"
                                             BackgroundColor="Transparent"
                                             Padding="6"
                                             WidthRequest="36"
                                             HeightRequest="36"
                                             HorizontalOptions="End"
                                             VerticalOptions="Start"
                                             Command="{Binding BindingContext.ToggleFavoriteCommand, Source={x:Reference FavoriteServicesPageRoot}}"
                                             CommandParameter="{Binding .}"
                                             SemanticProperties.Description="取消收藏">
                                    <ImageButton.Triggers>
                                        <DataTrigger TargetType="ImageButton"
                                                     Binding="{Binding IsFavorite}"
                                                     Value="False">
                                            <Setter Property="Source" Value="heart_outline.svg" />
                                        </DataTrigger>
                                    </ImageButton.Triggers>
                                </ImageButton>
                            </Grid>
                        </Frame>
                    </DataTemplate>
                </CollectionView.ItemTemplate>

                <CollectionView.EmptyView>
                    <VerticalStackLayout Spacing="16"
                                         Padding="40"
                                         HorizontalOptions="Center"
                                         VerticalOptions="Center">
                        <Image Source="no_service.png"
                               HeightRequest="120"
                               WidthRequest="120"
                               Aspect="AspectFit" />
                        <Label Text="还没有收藏的服务"
                               FontSize="16"
                               TextColor="#7A8193"
                               HorizontalTextAlignment="Center" />
                    </VerticalStackLayout>
                </CollectionView.EmptyView>
            </CollectionView>

            <ActivityIndicator IsRunning="{Binding IsLoading}"
                               IsVisible="{Binding IsLoading}"
                               HorizontalOptions="Center"
                               VerticalOptions="Center"
                               Color="#5B61FF" />
        </Grid>
    </Grid>
</ContentPage>
】

Views/FavoriteServicesPage.xaml.cs:
【﻿using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class FavoriteServicesPage : ContentPage
{
    private readonly FavoriteServicesViewModel _viewModel;

    public FavoriteServicesPage()
        : this(ServiceHelper.GetRequiredService<FavoriteServicesViewModel>())
    {
    }

    public FavoriteServicesPage(FavoriteServicesViewModel vm)
    {
        InitializeComponent();
        _viewModel = vm;
        BindingContext = _viewModel;
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        await _viewModel.LoadAsync();
    }

    private async void OnServiceTapped(object sender, TappedEventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if ((sender as Element)?.BindingContext is not Service service)
        {
            return;
        }

        await Shell.Current.GoToAsync($"{nameof(ServiceDetailPage)}?id={service.Id}");
    }
}
】

Views/LoginPage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.LoginPage"
             x:DataType="vm:LoginViewModel"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <ScrollView>
        <VerticalStackLayout Padding="24,48,24,24" Spacing="24">
            <VerticalStackLayout Spacing="8">
                <Label Text="欢迎回来"
                       FontSize="28"
                       FontAttributes="Bold"
                       TextColor="#1A1A1A"
                       HorizontalOptions="Center" />
                <Label Text="使用账号登录以继续体验服务"
                       FontSize="14"
                       TextColor="#60626F"
                       HorizontalOptions="Center" />
            </VerticalStackLayout>

            <VerticalStackLayout Spacing="16">
                <VerticalStackLayout>
                    <Label Text="用户名或邮箱"
                           FontSize="13"
                           TextColor="#6D6F7C"
                           Margin="0,0,0,6" />
                    <Entry Text="{Binding Account}"
                           Keyboard="Email"
                           Placeholder="请输入用户名或邮箱"
                           BackgroundColor="White"
                           ClearButtonVisibility="WhileEditing"
                           HeightRequest="48" />
                </VerticalStackLayout>

                <VerticalStackLayout>
                    <Label Text="密码"
                           FontSize="13"
                           TextColor="#6D6F7C"
                           Margin="0,0,0,6" />
                    <Entry Text="{Binding Password}"
                           IsPassword="True"
                           Placeholder="请输入密码"
                           BackgroundColor="White"
                           HeightRequest="48" />
                </VerticalStackLayout>

                <Label Text="{Binding ErrorMessage}"
                       TextColor="#E04E5B"
                       FontSize="13"
                       IsVisible="{Binding HasError}" />

                <Button Text="登录"
                        Command="{Binding LoginCommand}"
                        HeightRequest="48"
                        FontAttributes="Bold"
                        BackgroundColor="#5B61FF"
                        TextColor="White"
                        CornerRadius="12"
                        IsEnabled="{Binding CanLogin}" />
            </VerticalStackLayout>

            <HorizontalStackLayout HorizontalOptions="Center" Spacing="4">
                <Label Text="还没有账号？"
                       FontSize="13"
                       TextColor="#6D6F7C" />
                <Label Text="立即注册"
                       FontSize="13"
                       FontAttributes="Bold"
                       TextColor="#5B61FF">
                    <Label.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnRegisterTapped" />
                    </Label.GestureRecognizers>
                </Label>
            </HorizontalStackLayout>
        </VerticalStackLayout>
    </ScrollView>
</ContentPage>
】

Views/LoginPage.xaml.cs:
【using GamerLinkApp.Helpers;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class LoginPage : ContentPage
{
    public LoginPage(LoginViewModel viewModel)
    {
        InitializeComponent();
        BindingContext = viewModel;
        NavigationPage.SetHasNavigationBar(this, false);
    }

    private async void OnRegisterTapped(object sender, TappedEventArgs e)
    {
        var registerPage = ServiceHelper.GetRequiredService<RegisterPage>();
        await Navigation.PushAsync(registerPage);
    }
}
】

Views/OrderListPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.OrderListPage"
             x:DataType="vm:OrderListViewModel"
             Title="订单页面"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="Auto,*"
          Padding="20,16,20,0">
        <VerticalStackLayout Grid.Row="0"
                             Spacing="16">
            <Label Text="订单"
                   FontSize="22"
                   FontAttributes="Bold"
                   TextColor="#1A1A1A" />

            <ScrollView Orientation="Horizontal" 
                        HorizontalScrollBarVisibility="Default"
                        Margin="0,0,0,8">

                <CollectionView ItemsSource="{Binding StatusFilters}"
                                SelectionMode="Single"
                                SelectedItem="{Binding SelectedFilter, Mode=TwoWay}"
                                BackgroundColor="Transparent">
                    <CollectionView.ItemsLayout>
                        <LinearItemsLayout Orientation="Horizontal"
                                           ItemSpacing="12" />
                    </CollectionView.ItemsLayout>
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="vm:OrderListViewModel+OrderFilterOption">
                            <Border Padding="16,10"
                                    StrokeThickness="0"
                                    BackgroundColor="#EEF1F5">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="22" />
                                </Border.StrokeShape>

                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup Name="SelectionStates">
                                        <VisualState Name="Normal">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor"
                                                        Value="#EEF1F5" />
                                                <Setter TargetName="FilterLabel"
                                                        Property="Label.TextColor"
                                                        Value="#4B5563" />
                                                <Setter TargetName="CountLabel"
                                                        Property="Label.TextColor"
                                                        Value="#9AA0B1" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState Name="Selected">
                                            <VisualState.Setters>
                                                <Setter Property="BackgroundColor"
                                                        Value="#3478F6" />
                                                <Setter TargetName="FilterLabel"
                                                        Property="Label.TextColor"
                                                        Value="#FFFFFF" />
                                                <Setter TargetName="CountLabel"
                                                        Property="Label.TextColor"
                                                        Value="#DCE7FF" />
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>

                                <HorizontalStackLayout Spacing="6">
                                    <Label x:Name="FilterLabel"
                                           Text="{Binding DisplayName}"
                                           FontSize="14"
                                           FontAttributes="Bold" />
                                    <Label x:Name="CountLabel"
                                           Text="{Binding CountDisplay}"
                                           FontSize="12" />
                                </HorizontalStackLayout>
                            </Border>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>
            </ScrollView>

        </VerticalStackLayout>

        <Grid Grid.Row="1">
            <CollectionView ItemsSource="{Binding Orders}"
                            SelectionMode="None"
                            BackgroundColor="Transparent"
                            ItemSizingStrategy="MeasureAllItems">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical"
                                       ItemSpacing="18" />
                </CollectionView.ItemsLayout>
                <CollectionView.EmptyView>
                    <VerticalStackLayout Spacing="8"
                                         Padding="0,60,0,0"
                                         HorizontalOptions="Center"
                                         VerticalOptions="Start">
                        <Label Text="暂无订单"
                               FontSize="18"
                               FontAttributes="Bold"
                               HorizontalTextAlignment="Center"
                               TextColor="#6B7280" />
                        <Label Text="赶快下单体验一下服务吧~"
                               FontSize="13"
                               HorizontalTextAlignment="Center"
                               TextColor="#9AA0B1" />
                    </VerticalStackLayout>
                </CollectionView.EmptyView>
                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="vm:OrderListViewModel+OrderListItem">
                        <Border Padding="16"
                                BackgroundColor="White"
                                StrokeThickness="1"
                                Stroke="#E6E8F0">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="18" />
                            </Border.StrokeShape>

                            <Grid ColumnDefinitions="Auto,*"
                                  ColumnSpacing="16">
                                <Border WidthRequest="76"
                                        HeightRequest="76"
                                        StrokeThickness="0"
                                        BackgroundColor="#F1F3F8"
                                        VerticalOptions="Start">
                                    <Border.StrokeShape>
                                        <RoundRectangle CornerRadius="14" />
                                    </Border.StrokeShape>
                                    <Image Source="{Binding ThumbnailUrl}"
                                           Aspect="AspectFill" />
                                </Border>

                                <VerticalStackLayout Grid.Column="1"
                                                     Spacing="8">
                                    <Grid ColumnDefinitions="*,Auto">
                                        <Label Text="{Binding ServiceTitle}"
                                               FontSize="16"
                                               FontAttributes="Bold"
                                               TextColor="#1F2933"
                                               LineBreakMode="TailTruncation" />
                                        <Border Grid.Column="1"
                                                Padding="10,4"
                                                BackgroundColor="{Binding StatusBadgeColor}"
                                                StrokeThickness="0"
                                                VerticalOptions="Start">
                                            <Border.StrokeShape>
                                                <RoundRectangle CornerRadius="12" />
                                            </Border.StrokeShape>
                                            <Label Text="{Binding StatusDisplay}"
                                                   FontSize="12"
                                                   TextColor="{Binding StatusTextColor}"
                                                   FontAttributes="Bold"
                                                   HorizontalTextAlignment="Center" />
                                        </Border>
                                    </Grid>

                                    <Label Text="{Binding OrderNumberDisplay}"
                                           FontSize="12"
                                           TextColor="#8E94A2" />

                                    <Grid ColumnDefinitions="*,Auto">
                                        <Label Text="{Binding OrderDateDisplay}"
                                               FontSize="12"
                                               TextColor="#8E94A2"
                                               VerticalOptions="Center" />
                                        <Label Grid.Column="1"
                                               Text="{Binding TotalPriceDisplay}"
                                               FontSize="16"
                                               FontAttributes="Bold"
                                               TextColor="#FF4D4F"
                                               VerticalOptions="Center" />
                                    </Grid>
                                    <Button Text="立即支付"
                                        HeightRequest="40"
                                        CornerRadius="20"
                                        Padding="0"
                                        BackgroundColor="#5B61FF"
                                        TextColor="White"
                                        FontSize="14"
                                        HorizontalOptions="End"
                                        CommandParameter="{Binding OrderId}"
                                        IsVisible="{Binding IsPendingPayment}"
                                        Clicked="OnPayOrderClicked" />

                                <Button Text="&#21435;&#35780;&#20215;"
                                        HeightRequest="40"
                                        Margin="0,8,0,0"
                                        CornerRadius="20"
                                        Padding="0"
                                        BackgroundColor="#FF8A3D"
                                        TextColor="White"
                                        FontSize="14"
                                        HorizontalOptions="End"
                                        CommandParameter="{Binding OrderId}"
                                        IsVisible="{Binding CanReview}"
                                        Clicked="OnReviewOrderClicked" />

                                </VerticalStackLayout>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>

            <ActivityIndicator IsRunning="{Binding IsLoading}"
                               IsVisible="{Binding IsLoading}"
                               Color="#3478F6"
                               WidthRequest="32"
                               HeightRequest="32"
                               HorizontalOptions="Center"
                               VerticalOptions="Center" />
        </Grid>
    </Grid>
</ContentPage>


】

Views/OrderListPage.xaml.cs:
【using System;
using Microsoft.Maui.Controls;
using GamerLinkApp.Helpers;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(InitialStatusKey), "status")]
public partial class OrderListPage : ContentPage
{
    public OrderListPage()
        : this(ServiceHelper.GetRequiredService<OrderListViewModel>())
    {
    }

    public OrderListPage(OrderListViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }

    public string InitialStatusKey
    {
        set
        {
            if (BindingContext is OrderListViewModel vm && !string.IsNullOrEmpty(value))
            {
                vm.SetInitialFilter(value);
            }
        }
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if (BindingContext is OrderListViewModel vm)
        {
            await vm.RefreshAsync();
        }
    }

    private async void OnPayOrderClicked(object sender, EventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if ((sender as Button)?.BindingContext is not OrderListViewModel.OrderListItem item)
        {
            return;
        }

        if (Shell.Current is null)
        {
            return;
        }

        await Shell.Current.GoToAsync($"{nameof(OrderPaymentPage)}?orderId={item.OrderId}");
    }

    private async void OnReviewOrderClicked(object sender, EventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if ((sender as Button)?.BindingContext is not OrderListViewModel.OrderListItem item)
        {
            return;
        }

        if (Shell.Current is null)
        {
            return;
        }

        await Shell.Current.GoToAsync($"{nameof(OrderReviewPage)}?orderId={item.OrderId}");
    }
}
】

Views/OrderPaymentPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.OrderPaymentPage"
             x:DataType="vm:OrderPaymentViewModel"
             Title="订单支付"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="*,Auto">
        <ScrollView Grid.Row="0"
                    Padding="20,16"
                    IsVisible="False">
            <ScrollView.Triggers>
                <DataTrigger TargetType="ScrollView"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="True" />
                </DataTrigger>
            </ScrollView.Triggers>
            <VerticalStackLayout Spacing="18">
                <Border BackgroundColor="White"
                        Padding="16"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <Grid ColumnDefinitions="Auto,*"
                          ColumnSpacing="16">
                        <Border WidthRequest="88"
                                HeightRequest="88"
                                StrokeThickness="0"
                                BackgroundColor="#EEF1F5"
                                VerticalOptions="Start">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="14" />
                            </Border.StrokeShape>
                            <Image Source="{Binding Service.ThumbnailUrl}"
                                   Aspect="AspectFill" />
                        </Border>

                        <VerticalStackLayout Grid.Column="1"
                                             Spacing="10">
                            <Label Text="{Binding ServiceName}"
                                   FontSize="20"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="{Binding Service.GameName, StringFormat='关联游戏：{0}'}"
                                   FontSize="14"
                                   TextColor="#6B7280" />
                            <Label Text="{Binding Service.ServiceType, StringFormat='服务类型：{0}'}"
                                   FontSize="14"
                                   TextColor="#6B7280" />
                        </VerticalStackLayout>
                    </Grid>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="14">
                        <Label Text="订单信息"
                               FontSize="16"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <VerticalStackLayout Spacing="8">
                            <Label Text="{Binding OrderNumberDisplay}"
                                   FontSize="13"
                                   TextColor="#434A59" />
                            <Label Text="{Binding OrderDateDisplay, StringFormat='下单时间：{0}'}"
                                   FontSize="13"
                                   TextColor="#434A59" />
                            <Label Text="{Binding OrderStatusDisplay, StringFormat='当前状态：{0}'}"
                                   FontSize="13"
                                   TextColor="#434A59" />
                        </VerticalStackLayout>
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

        <VerticalStackLayout Grid.Row="0"
                             Spacing="10"
                             Padding="20"
                             HorizontalOptions="Center"
                             VerticalOptions="Center"
                             IsVisible="True">
            <VerticalStackLayout.Triggers>
                <DataTrigger TargetType="VerticalStackLayout"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="False" />
                </DataTrigger>
            </VerticalStackLayout.Triggers>
            <Label Text="未找到订单"
                   FontSize="20"
                   FontAttributes="Bold"
                   TextColor="#1A1A1A" />
            <Label Text="请返回重试或在订单列表中重新选择。"
                   FontSize="14"
                   TextColor="#6B7280"
                   HorizontalTextAlignment="Center" />
        </VerticalStackLayout>

        <Grid Grid.Row="1"
              BackgroundColor="White"
              Padding="20,16"
              ColumnDefinitions="*,Auto"
              IsVisible="False">
            <Grid.Triggers>
                <DataTrigger TargetType="Grid"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="True" />
                </DataTrigger>
            </Grid.Triggers>
            <VerticalStackLayout Spacing="4"
                                  VerticalOptions="Center">
                <Label Text="支付金额"
                       FontSize="12"
                       TextColor="#7B8596" />
                <Label Text="{Binding PaymentAmountDisplay}"
                       FontSize="24"
                       FontAttributes="Bold"
                       TextColor="#FF4D4F" />
            </VerticalStackLayout>
            <Button Grid.Column="1"
                    Text="确认支付"
                    HeightRequest="48"
                    WidthRequest="160"
                    CornerRadius="24"
                    BackgroundColor="#5B61FF"
                    TextColor="White"
                    FontAttributes="Bold"
                    IsEnabled="{Binding CanPay}"
                    Clicked="OnPayClicked" />
        </Grid>

        <ActivityIndicator Grid.RowSpan="2"
                           IsRunning="{Binding IsLoading}"
                           IsVisible="{Binding IsLoading}"
                           Color="#3478F6"
                           WidthRequest="48"
                           HeightRequest="48"
                           HorizontalOptions="Center"
                           VerticalOptions="Center" />
    </Grid>
</ContentPage>
】

Views/OrderPaymentPage.xaml.cs:
【﻿using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(OrderId), "orderId")]
public partial class OrderPaymentPage : ContentPage
{
    private readonly OrderPaymentViewModel _viewModel;
    private int _orderId;

    public OrderPaymentPage()
        : this(ServiceHelper.GetRequiredService<OrderPaymentViewModel>())
    {
    }

    public OrderPaymentPage(OrderPaymentViewModel viewModel)
    {
        InitializeComponent();
        _viewModel = viewModel;
        BindingContext = _viewModel;
    }

    public int OrderId
    {
        set
        {
            if (value <= 0)
            {
                return;
            }

            if (_orderId == value && _viewModel.HasOrder)
            {
                return;
            }

            _orderId = value;
            _ = _viewModel.LoadAsync(value);
        }
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if (_orderId > 0 && !_viewModel.HasOrder && !_viewModel.IsLoading)
        {
            await _viewModel.LoadAsync(_orderId);
        }
    }

    private async void OnPayClicked(object sender, EventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        var (success, errorMessage) = await _viewModel.PayAsync();

        if (!success)
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                await DisplayAlert("提示", errorMessage, "确定");
            }

            return;
        }

        var navigateToOrders = await DisplayAlert("支付成功", "订单已支付，正在为你安排服务。", "前往订单", "留在此页");
        if (navigateToOrders && Shell.Current is not null)
        {
            await Shell.Current.GoToAsync($"{nameof(OrderListPage)}?status={nameof(OrderStatus.Ongoing)}");
        }
    }
}
】

Views/OrderReviewPage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.OrderReviewPage"
             x:DataType="vm:OrderReviewViewModel"
             Title="&#35780;&#20215;&#35746;&#21333;"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="*,Auto">
        <ScrollView Grid.Row="0"
                    Padding="20,16"
                    IsVisible="False">
            <ScrollView.Triggers>
                <DataTrigger TargetType="ScrollView"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="True" />
                </DataTrigger>
            </ScrollView.Triggers>
            <VerticalStackLayout Spacing="18">
                <Border BackgroundColor="White"
                        Padding="16"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <Grid ColumnDefinitions="Auto,*"
                          ColumnSpacing="16">
                        <Border WidthRequest="88"
                                HeightRequest="88"
                                StrokeThickness="0"
                                BackgroundColor="#EEF1F5"
                                VerticalOptions="Start">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="14" />
                            </Border.StrokeShape>
                            <Image Source="{Binding Service.ThumbnailUrl}"
                                   Aspect="AspectFill" />
                        </Border>

                        <VerticalStackLayout Grid.Column="1"
                                             Spacing="10">
                            <Label Text="{Binding ServiceName}"
                                   FontSize="20"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="{Binding Service.GameName, StringFormat='&#25152;&#23646;&#28216;&#25103;&#65306;{0}', TargetNullValue='&#25152;&#23646;&#28216;&#25103;&#65306;-'}"
                                   FontSize="14"
                                   TextColor="#6B7280" />
                            <Label Text="{Binding Service.ServiceType, StringFormat='&#26381;&#21153;&#31867;&#22411;&#65306;{0}', TargetNullValue='&#26381;&#21153;&#31867;&#22411;&#65306;-'}"
                                   FontSize="14"
                                   TextColor="#6B7280" />
                        </VerticalStackLayout>
                    </Grid>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="12">
                        <Label Text="&#35746;&#21333;&#20449;&#24687;"
                               FontSize="16"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <Label Text="{Binding OrderNumberDisplay}"
                               FontSize="13"
                               TextColor="#434A59" />
                        <Label Text="{Binding OrderDateDisplay, StringFormat='&#19979;&#21333;&#26102;&#38388;&#65306;{0}'}"
                               FontSize="13"
                               TextColor="#434A59" />
                        <Label Text="{Binding OrderStatusDisplay, StringFormat='&#24403;&#21069;&#29366;&#24577;&#65306;{0}'}"
                               FontSize="13"
                               TextColor="#434A59" />
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="18" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="16">
                        <VerticalStackLayout Spacing="4">
                            <Label Text="&#32508;&#21512;&#35780;&#20998;"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="&#35831;&#36873;&#25321; 1-5 &#20998;&#30340;&#35780;&#20998;&#65292;5 &#20998;&#20195;&#34920;&#38750;&#24120;&#28385;&#24847;"
                                   FontSize="12"
                                   TextColor="#87909F" />
                        </VerticalStackLayout>

                        <HorizontalStackLayout Spacing="12"
                                               VerticalOptions="Center">
                            <HorizontalStackLayout BindableLayout.ItemsSource="{Binding RatingStars}"
                                                   Spacing="6">
                                <BindableLayout.ItemTemplate>
                                    <DataTemplate x:DataType="vm:OrderReviewViewModel+RatingStarItem">
                                        <Grid>
                                            <Label Text="★"
                                                   FontSize="28"
                                                   TextColor="#D0D5DD">
                                                <Label.Triggers>
                                                    <DataTrigger TargetType="Label"
                                                                 Binding="{Binding IsFilled}"
                                                                 Value="True">
                                                        <Setter Property="TextColor" Value="#FFB400" />
                                                    </DataTrigger>
                                                </Label.Triggers>
                                            </Label>
                                            <Grid.GestureRecognizers>
                                                <TapGestureRecognizer Tapped="OnRatingStarTapped"
                                                                      CommandParameter="{Binding Value}" />
                                            </Grid.GestureRecognizers>
                                        </Grid>
                                    </DataTemplate>
                                </BindableLayout.ItemTemplate>
                            </HorizontalStackLayout>
                            <Label Text="{Binding RatingDisplay}"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#3478F6" />
                        </HorizontalStackLayout>

                        <VerticalStackLayout Spacing="4">
                            <Label Text="&#35780;&#20215;&#20869;&#23481;"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="&#33267;&#23569;&#22635;&#20889; 5 &#20010;&#23383;&#65292;&#24110;&#21161;&#26356;&#22810;&#29609;&#23478;&#20102;&#35299;&#23454;&#38469;&#20307;&#39564;"
                                   FontSize="12"
                                   TextColor="#87909F" />
                        </VerticalStackLayout>

                        <Editor Text="{Binding Comment, Mode=TwoWay}"
                                AutoSize="TextChanges"
                                HeightRequest="150"
                                MaxLength="200"
                                Placeholder="&#35831;&#20889;&#19979;&#26412;&#27425;&#26381;&#21153;&#20307;&#39564;"
                                TextColor="#1A1A1A">
                            <Editor.Triggers>
                                <DataTrigger TargetType="Editor"
                                             Binding="{Binding IsCommentReadOnly}"
                                             Value="True">
                                    <Setter Property="IsReadOnly" Value="True" />
                                    <Setter Property="TextColor" Value="#6B7280" />
                                </DataTrigger>
                            </Editor.Triggers>
                        </Editor>
                        <Label Text="{Binding CommentLengthIndicator}"
                               FontSize="12"
                               TextColor="#9AA0B1"
                               HorizontalOptions="End" />

                        <Border BackgroundColor="#F6F7FB"
                                Padding="12"
                                IsVisible="False">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="12" />
                            </Border.StrokeShape>
                            <Border.Triggers>
                                <DataTrigger TargetType="Border"
                                             Binding="{Binding IsAlreadyReviewed}"
                                             Value="True">
                                    <Setter Property="IsVisible" Value="True" />
                                </DataTrigger>
                            </Border.Triggers>
                            <Label Text="&#35813;&#35746;&#21333;&#24050;&#23436;&#25104;&#35780;&#20215;&#65292;&#22914;&#38656;&#20462;&#25913;&#35831;&#32852;&#31995;&#24179;&#21488;&#23458;&#26381;"
                                   FontSize="13"
                                   TextColor="#5A6475" />
                        </Border>
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

        <VerticalStackLayout Grid.Row="0"
                             Spacing="10"
                             Padding="20"
                             HorizontalOptions="Center"
                             VerticalOptions="Center"
                             IsVisible="True">
            <VerticalStackLayout.Triggers>
                <DataTrigger TargetType="VerticalStackLayout"
                             Binding="{Binding HasOrder}"
                             Value="True">
                    <Setter Property="IsVisible" Value="False" />
                </DataTrigger>
            </VerticalStackLayout.Triggers>
            <Label Text="&#26242;&#26080;&#21487;&#35780;&#20215;&#30340;&#35746;&#21333;"
                   FontSize="20"
                   FontAttributes="Bold"
                   TextColor="#1A1A1A" />
            <Label Text="&#35831;&#36820;&#22238;&#35746;&#21333;&#20013;&#24515;&#36873;&#25321;&#19968;&#31508;&#24453;&#35780;&#20215;&#30340;&#35746;&#21333;"
                   FontSize="14"
                   TextColor="#6B7280"
                   HorizontalTextAlignment="Center" />
        </VerticalStackLayout>

        <Button Grid.Row="1"
                Text="{Binding SubmitButtonText}"
                HeightRequest="48"
                Margin="20,12"
                CornerRadius="24"
                BackgroundColor="#5B61FF"
                TextColor="White"
                FontAttributes="Bold"
                IsEnabled="{Binding CanSubmit}"
                IsVisible="{Binding HasOrder}"
                Clicked="OnSubmitClicked" />

        <ActivityIndicator Grid.RowSpan="2"
                           IsRunning="{Binding IsBusy}"
                           IsVisible="{Binding IsBusy}"
                           Color="#3478F6"
                           WidthRequest="48"
                           HeightRequest="48"
                           HorizontalOptions="Center"
                           VerticalOptions="Center" />
    </Grid>
</ContentPage>】

Views/OrderReviewPage.xaml.cs:
【using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(OrderId), "orderId")]
public partial class OrderReviewPage : ContentPage
{
    private readonly OrderReviewViewModel _viewModel;
    private int _orderId;

    public OrderReviewPage()
        : this(ServiceHelper.GetRequiredService<OrderReviewViewModel>())
    {
    }

    public OrderReviewPage(OrderReviewViewModel viewModel)
    {
        InitializeComponent();
        _viewModel = viewModel;
        BindingContext = _viewModel;
    }

    public int OrderId
    {
        set
        {
            if (value <= 0 || (_orderId == value && _viewModel.HasOrder))
            {
                return;
            }

            _orderId = value;
            _ = _viewModel.LoadAsync(value);
        }
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        if (_orderId > 0 && !_viewModel.IsBusy && !_viewModel.HasOrder)
        {
            await _viewModel.LoadAsync(_orderId);
        }
    }

    private async void OnSubmitClicked(object sender, EventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        var (success, errorMessage) = await _viewModel.SubmitAsync();

        if (!success)
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                await DisplayAlert("提示", errorMessage, "确定");
            }

            return;
        }

        var goToOrders = await DisplayAlert(
            "评价成功",
            "感谢您的反馈，订单状态已更新为“已完成”。",
            "返回订单",
            "留在本页");

        if (goToOrders && Shell.Current is not null)
        {
            await Shell.Current.GoToAsync("..");
        }
    }

    private void OnRatingStarTapped(object sender, TappedEventArgs e)
    {
        if (_viewModel.IsRatingReadOnly)
        {
            return;
        }

        if (e.Parameter is int value && value is >= 1 and <= 5)
        {
            _viewModel.Rating = value;
        }
    }
}
】

Views/ProfilePage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.ProfilePage"
             x:Name="ProfilePageView"
             x:DataType="vm:ProfileViewModel"
             Title="Profile"
             BackgroundColor="#F4F5F7">
    <Grid RowDefinitions="Auto,*">
        <ScrollView Grid.Row="1"
                    Padding="0,12,0,24">
            <VerticalStackLayout Spacing="18"
                                  Padding="20,0,20,0">

                <!-- User card -->
                <Border Padding="24,32"
                        StrokeThickness="0"
                        BackgroundColor="Transparent">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                            <GradientStop Color="#E9F0FF" Offset="0" />
                            <GradientStop Color="#FFE9F3" Offset="1" />
                        </LinearGradientBrush>
                    </Border.Background>

                    <VerticalStackLayout Spacing="14"
                                          HorizontalOptions="Center"
                                          VerticalOptions="Center">
                        <Border WidthRequest="96"
                                HeightRequest="96"
                                StrokeThickness="0"
                                BackgroundColor="#1A1A1A"
                                HorizontalOptions="Center"
                                VerticalOptions="Center">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="48" />
                            </Border.StrokeShape>
                            <Image Source="{Binding CurrentUser.AvatarUrl}"
                                   Aspect="AspectFill" />
                        </Border>

                        <Label Text="{Binding CurrentUser.Nickname}"
                               FontSize="19"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A"
                               HorizontalOptions="Center" />

                        <Label Text="{Binding CurrentUser.Username, StringFormat='ID: {0}'}"
                               FontSize="14"
                               TextColor="#666666"
                               HorizontalOptions="Center" />

                        <Label Text="{Binding TotalPaid, StringFormat='总消费 ¥{0:F0}'}"
                               FontSize="13"
                               TextColor="#80869A"
                               HorizontalOptions="Center" />
                    </VerticalStackLayout>
                </Border>

                <!-- Order summary -->
                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="20" />
                    </Border.StrokeShape>
                    <Border.Shadow>
                        <Shadow Brush="#14000000"
                                Offset="0,6"
                                Radius="12" />
                    </Border.Shadow>

                    <VerticalStackLayout Spacing="20">
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="订单概览"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text="全部订单"
                                   Grid.Column="1"
                                   FontSize="14"
                                   TextColor="#00AEEF">
                                <Label.GestureRecognizers>
                                    <TapGestureRecognizer Tapped="OnAllOrdersTapped" />
                                </Label.GestureRecognizers>
                            </Label>
                        </Grid>

                        <CollectionView ItemsSource="{Binding OrderStatuses}"
                                        SelectionMode="None">
                            <CollectionView.ItemsLayout>
                                <GridItemsLayout Orientation="Vertical"
                                                 Span="4"
                                                 HorizontalItemSpacing="18" />
                            </CollectionView.ItemsLayout>
                            <CollectionView.ItemTemplate>
                                <DataTemplate x:DataType="vm:ProfileViewModel+OrderStatusItem">
                                    <VerticalStackLayout Spacing="6"
                                                         HorizontalOptions="Center"
                                                         VerticalOptions="Center">
                                        <VerticalStackLayout.GestureRecognizers>
                                            <TapGestureRecognizer Command="{Binding Source={x:Reference ProfilePageView}, Path=BindingContext.OrderStatusTappedCommand}"
                                                                  CommandParameter="{Binding .}" />
                                        </VerticalStackLayout.GestureRecognizers>
                                        <Grid WidthRequest="56"
                                              HeightRequest="56"
                                              ColumnDefinitions="Auto"
                                              RowDefinitions="Auto"
                                              VerticalOptions="Center"
                                              HorizontalOptions="Center">
                                            <Border StrokeThickness="0"
                                                    BackgroundColor="#F1F2FF"
                                                    WidthRequest="56"
                                                    HeightRequest="56"
                                                    HorizontalOptions="Center"
                                                    VerticalOptions="Center">
                                                <Border.StrokeShape>
                                                    <RoundRectangle CornerRadius="18" />
                                                </Border.StrokeShape>
                                            </Border>
                                            <Image Source="{Binding Icon}"
                                                   WidthRequest="28"
                                                   HeightRequest="28"
                                                   Aspect="AspectFit"
                                                   HorizontalOptions="Center"
                                                   VerticalOptions="Center" />
                                        </Grid>

                                        <Label Text="{Binding DisplayName}"
                                               FontSize="13"
                                               TextColor="#4B4F5F"
                                               HorizontalOptions="Center" />
                                        <Label Text="{Binding CountDisplay}"
                                               FontSize="12"
                                               TextColor="#9A9EAE"
                                               HorizontalOptions="Center" />
                                    </VerticalStackLayout>
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </VerticalStackLayout>
                </Border>

                <!-- Stats -->
                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="20" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="12">
                        <Grid ColumnDefinitions="*,Auto">
                            <Label Text="完成订单"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text="{Binding CompletedOrders, StringFormat='{0} 个'}"
                                   Grid.Column="1"
                                   FontSize="15"
                                   FontAttributes="Bold"
                                   TextColor="#5B61FF" />
                        </Grid>
                    </VerticalStackLayout>
                </Border>

                <!-- Actions -->
                <VerticalStackLayout Spacing="12">
                    <Border BackgroundColor="White"
                            Padding="16"
                            StrokeThickness="0"
                            IsVisible="{Binding IsAdmin}">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="16" />
                        </Border.StrokeShape>
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Grid.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding NavigateToAdminCommand}" />
                            </Grid.GestureRecognizers>

                            <Label Text="管理面板"
                                   FontSize="15"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Label Text=">"
                                   Grid.Column="1"
                                   FontSize="16"
                                   TextColor="#C0C0C0" />
                        </Grid>
                    </Border>

                    <Border BackgroundColor="White"
                            Padding="16"
                            StrokeThickness="0">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="16" />
                        </Border.StrokeShape>
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="我的收藏"
                                   FontSize="15"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A">
                                <Label.GestureRecognizers>
                                    <TapGestureRecognizer Tapped="OnFavoritesTapped" />
                                </Label.GestureRecognizers>
                            </Label>
                            <Label Text=">"
                                   Grid.Column="1"
                                   FontSize="16"
                                   TextColor="#C0C0C0">
                                <Label.GestureRecognizers>
                                    <TapGestureRecognizer Tapped="OnFavoritesTapped" />
                                </Label.GestureRecognizers>
                            </Label>
                        </Grid>
                    </Border>

                    <Border BackgroundColor="White"
                            Padding="16"
                            StrokeThickness="0">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="16" />
                        </Border.StrokeShape>
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="账号安全"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text=">"
                                   Grid.Column="1"
                                   FontSize="16"
                                   TextColor="#C0C0C0" />
                        </Grid>
                    </Border>

                    <Border BackgroundColor="White"
                            Padding="16"
                            StrokeThickness="0">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="16" />
                        </Border.StrokeShape>
                        <Grid ColumnDefinitions="*,Auto"
                              VerticalOptions="Center">
                            <Label Text="联系客服"
                                   FontSize="15"
                                   TextColor="#1A1A1A" />
                            <Label Text=">"
                                   Grid.Column="1"
                                   FontSize="16"
                                   TextColor="#C0C0C0" />
                        </Grid>
                    </Border>

                    <Button Text="退出登录"
                            Command="{Binding LogoutCommand}"
                            HeightRequest="48"
                            Margin="0,24,0,0"
                            BackgroundColor="#FF4D4F"
                            TextColor="White"
                            CornerRadius="16" />
                </VerticalStackLayout>
            </VerticalStackLayout>
        </ScrollView>
    </Grid>
</ContentPage>
】

Views/ProfilePage.xaml.cs:
【using GamerLinkApp.Helpers;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ProfilePage : ContentPage
{
    public ProfilePage(ProfileViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
    public ProfilePage()
        : this(ServiceHelper.GetRequiredService<ProfileViewModel>())
    {
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }
    }

    private async void OnAllOrdersTapped(object sender, TappedEventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        await Shell.Current.GoToAsync(nameof(OrderListPage));
    }

    private async void OnFavoritesTapped(object sender, TappedEventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        await Shell.Current.GoToAsync(nameof(FavoriteServicesPage));
    }
}
】

Views/RegisterPage.xaml:
【<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.RegisterPage"
             x:DataType="vm:RegisterViewModel"
             BackgroundColor="#F4F5F7">
    <ScrollView>
        <VerticalStackLayout Padding="24,48,24,24" Spacing="24">
            <VerticalStackLayout Spacing="8">
                <Label Text="创建新账号"
                       FontSize="28"
                       FontAttributes="Bold"
                       TextColor="#1A1A1A"
                       HorizontalOptions="Center" />
                <Label Text="完善信息，加入 GamerLink 社区"
                       FontSize="14"
                       TextColor="#60626F"
                       HorizontalOptions="Center" />
            </VerticalStackLayout>

            <VerticalStackLayout Spacing="16">
                <VerticalStackLayout>
                    <Label Text="用户名"
                           FontSize="13"
                           TextColor="#6D6F7C"
                           Margin="0,0,0,6" />
                    <Entry Text="{Binding Username}"
                           Placeholder="请输入用户名"
                           BackgroundColor="White"
                           ClearButtonVisibility="WhileEditing"
                           HeightRequest="48" />
                </VerticalStackLayout>

                <VerticalStackLayout>
                    <Label Text="邮箱"
                           FontSize="13"
                           TextColor="#6D6F7C"
                           Margin="0,0,0,6" />
                    <Entry Text="{Binding Email}"
                           Keyboard="Email"
                           Placeholder="请输入邮箱"
                           BackgroundColor="White"
                           ClearButtonVisibility="WhileEditing"
                           HeightRequest="48" />
                </VerticalStackLayout>

                <VerticalStackLayout>
                    <Label Text="昵称（可选）"
                           FontSize="13"
                           TextColor="#6D6F7C"
                           Margin="0,0,0,6" />
                    <Entry Text="{Binding Nickname}"
                           Placeholder="请输入昵称"
                           BackgroundColor="White"
                           ClearButtonVisibility="WhileEditing"
                           HeightRequest="48" />
                </VerticalStackLayout>

                <VerticalStackLayout>
                    <Label Text="密码"
                           FontSize="13"
                           TextColor="#6D6F7C"
                           Margin="0,0,0,6" />
                    <Entry Text="{Binding Password}"
                           IsPassword="True"
                           Placeholder="请输入密码"
                           BackgroundColor="White"
                           HeightRequest="48" />
                </VerticalStackLayout>

                <VerticalStackLayout>
                    <Label Text="确认密码"
                           FontSize="13"
                           TextColor="#6D6F7C"
                           Margin="0,0,0,6" />
                    <Entry Text="{Binding ConfirmPassword}"
                           IsPassword="True"
                           Placeholder="请再次输入密码"
                           BackgroundColor="White"
                           HeightRequest="48" />
                </VerticalStackLayout>

                <Label Text="{Binding ErrorMessage}"
                       TextColor="#E04E5B"
                       FontSize="13"
                       IsVisible="{Binding HasError}" />

                <Button Text="立即注册"
                        Command="{Binding RegisterCommand}"
                        HeightRequest="48"
                        FontAttributes="Bold"
                        BackgroundColor="#5B61FF"
                        TextColor="White"
                        CornerRadius="12"
                        IsEnabled="{Binding CanRegister}" />
            </VerticalStackLayout>

            <HorizontalStackLayout HorizontalOptions="Center" Spacing="4">
                <Label Text="已有账号？"
                       FontSize="13"
                       TextColor="#6D6F7C" />
                <Label Text="返回登录"
                       FontSize="13"
                       FontAttributes="Bold"
                       TextColor="#5B61FF">
                    <Label.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnLoginTapped" />
                    </Label.GestureRecognizers>
                </Label>
            </HorizontalStackLayout>
        </VerticalStackLayout>
    </ScrollView>
</ContentPage>
】

Views/RegisterPage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class RegisterPage : ContentPage
{
    public RegisterPage(RegisterViewModel viewModel)
    {
        InitializeComponent();
        BindingContext = viewModel;
        NavigationPage.SetHasNavigationBar(this, false);
    }

    private async void OnLoginTapped(object sender, TappedEventArgs e)
    {
        await Navigation.PopAsync();
    }
}
】

Views/ServiceDetailPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             xmlns:models="clr-namespace:GamerLinkApp.Models"
             x:Class="GamerLinkApp.Views.ServiceDetailPage"
             x:DataType="vm:ServiceDetailViewModel"
             Title="服务详情"
             BackgroundColor="#F4F5F7"
             Shell.TabBarIsVisible="False">
    <Grid RowDefinitions="Auto,*,Auto">
        <ScrollView Grid.Row="1"
                    Padding="0,12,0,0">
            <VerticalStackLayout Spacing="18"
                                  Padding="20,0,20,120">
                <Border HeightRequest="220"
                        StrokeThickness="0"
                        BackgroundColor="#D9D9D9">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="26" />
                    </Border.StrokeShape>
                    <Grid>
                        <Image Source="{Binding SelectedService.ThumbnailUrl}"
                               Aspect="AspectFill" />
                        <Grid>
                            <Grid.Background>
                                <LinearGradientBrush StartPoint="0,0.4" EndPoint="0,1">
                                    <GradientStop Color="#00000000" Offset="0" />
                                    <GradientStop Color="#A6000000" Offset="1" />
                                </LinearGradientBrush>
                            </Grid.Background>
                        </Grid>
                        <ImageButton Source="heart_outline.svg"
                                     BackgroundColor="#4C000000"
                                     CornerRadius="18"
                                     Padding="10"
                                     WidthRequest="44"
                                     HeightRequest="44"
                                     HorizontalOptions="End"
                                     VerticalOptions="Start"
                                     Margin="0,20,20,0"
                                     Clicked="OnToggleFavoriteClicked"
                                     SemanticProperties.Description="收藏服务">
                            <ImageButton.Triggers>
                                <DataTrigger TargetType="ImageButton"
                                             Binding="{Binding IsFavorite}"
                                             Value="True">
                                    <Setter Property="Source" Value="heart_filled.svg" />
                                    <Setter Property="BackgroundColor" Value="#66FF4D4F" />
                                </DataTrigger>
                            </ImageButton.Triggers>
                        </ImageButton>
                        <VerticalStackLayout Spacing="6"
                                              Padding="20,20,20,24"
                                              VerticalOptions="End">
                            <Label Text="{Binding SelectedService.GameName}"
                                   FontSize="14"
                                   TextColor="#F2F5FF"
                                   Opacity="0.9" />
                            <Label Text="{Binding SelectedService.Title}"
                                   FontSize="22"
                                   FontAttributes="Bold"
                                   TextColor="White"
                                   LineBreakMode="TailTruncation" />
                            <Label Text="{Binding SelectedService.ServiceType, StringFormat='服务类型: {0}'}"
                                   FontSize="13"
                                   TextColor="#F2F5FF"
                                   Opacity="0.9" />
                        </VerticalStackLayout>
                    </Grid>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="16">
                        <HorizontalStackLayout Spacing="12"
                                                VerticalOptions="Center">
                            <Label Text="服务亮点"
                                   FontSize="16"
                                   FontAttributes="Bold"
                                   TextColor="#1A1A1A" />
                            <Border BackgroundColor="#EEF0FF"
                                    Padding="10,4"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="12" />
                                </Border.StrokeShape>
                                <Border.Triggers>
                                    <DataTrigger TargetType="Border"
                                                 Binding="{Binding SelectedService.Category}"
                                                 Value="">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                    <DataTrigger TargetType="Border"
                                                 Binding="{Binding SelectedService.Category}"
                                                 Value="{x:Null}">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                </Border.Triggers>
                                <Label Text="{Binding SelectedService.Category}"
                                       FontSize="13"
                                       TextColor="#5B61FF"
                                       FontAttributes="Bold" />
                            </Border>
                        </HorizontalStackLayout>

                        <FlexLayout BindableLayout.ItemsSource="{Binding SelectedService.Tags}"
                                   Wrap="Wrap"
                                   AlignItems="Center"
                                   AlignContent="Start"
                                   JustifyContent="Start"
                                   Margin="0,4,0,0">
                            <BindableLayout.ItemTemplate>
                                <DataTemplate x:DataType="x:String">
                                    <Border BackgroundColor="#F3F4FF"
                                            Margin="0,0,8,8"
                                            Padding="10,6"
                                            StrokeThickness="0">
                                        <Border.StrokeShape>
                                            <RoundRectangle CornerRadius="14" />
                                        </Border.StrokeShape>
                                        <Label Text="{Binding .}"
                                               FontSize="13"
                                               TextColor="#5B61FF" />
                                    </Border>
                                </DataTemplate>
                            </BindableLayout.ItemTemplate>
                        </FlexLayout>

                        <Grid ColumnDefinitions="*,*"
                              ColumnSpacing="12">
                            <Border BackgroundColor="#F9FAFC"
                                    Padding="16"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="18" />
                                </Border.StrokeShape>
                                <VerticalStackLayout Spacing="6">
                                    <Label Text="评分"
                                           FontSize="13"
                                           TextColor="#727C8C" />
                                    <Label Text="{Binding SelectedService.AverageRating, StringFormat='{0:F1}'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F" />
                                    <Label Text="{Binding SelectedService.ReviewCount, StringFormat='{0}条评价'}"
                                           FontSize="12"
                                           TextColor="#9AA0AE" />
                                </VerticalStackLayout>
                            </Border>

                            <Border Grid.Column="1"
                                    BackgroundColor="#F9FAFC"
                                    Padding="16"
                                    StrokeThickness="0">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="18" />
                                </Border.StrokeShape>
                                <VerticalStackLayout Spacing="6">
                                    <Label Text="成交"
                                           FontSize="13"
                                           TextColor="#727C8C" />
                                    <Label Text="{Binding SelectedService.PurchaseCount, StringFormat='{0}人购买'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F" />
                                    <Label Text="{Binding SelectedService.CompletedCount, StringFormat='已完成{0}单'}"
                                           FontSize="12"
                                           TextColor="#9AA0AE" />
                                </VerticalStackLayout>
                            </Border>
                        </Grid>
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="12">
                        <Label Text="服务介绍"
                               FontSize="16"
                               FontAttributes="Bold"
                               TextColor="#1A1A1A" />
                        <Label Text="{Binding SelectedService.Description}"
                               FontSize="14"
                               TextColor="#434A59"
                               LineHeight="1.4" />
                    </VerticalStackLayout>
                </Border>

                <Border BackgroundColor="White"
                        Padding="20"
                        StrokeThickness="0">
                    <Border.StrokeShape>
                        <RoundRectangle CornerRadius="24" />
                    </Border.StrokeShape>
                    <VerticalStackLayout Spacing="18">
                        <Grid ColumnDefinitions="Auto,*"
                              RowDefinitions="Auto,Auto">
                            <VerticalStackLayout Spacing="4">
                                <Label Text="玩家评价"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#1A1A1A" />
                                <Label Text="{Binding ReviewCountDisplay}"
                                       FontSize="12"
                                       TextColor="#727C8C" />
                            </VerticalStackLayout>
                            <VerticalStackLayout Grid.Column="1"
                                                 Spacing="4"
                                                 HorizontalOptions="End">
                                <Label Text="{Binding AverageRatingDisplay}"
                                       FontSize="28"
                                       FontAttributes="Bold"
                                       TextColor="#FFB400"
                                       HorizontalOptions="End" />
                                <Label Text="综合评分"
                                       FontSize="12"
                                       TextColor="#9AA0AE"
                                       HorizontalOptions="End" />
                            </VerticalStackLayout>
                        </Grid>

                        <ActivityIndicator IsRunning="{Binding IsReviewsLoading}"
                                           IsVisible="{Binding IsReviewsLoading}"
                                           Color="#3478F6"
                                           HorizontalOptions="Center" />

                        <Border BackgroundColor="#F6F7FB"
                                Padding="16"
                                StrokeThickness="0"
                                IsVisible="{Binding IsReviewsEmpty}">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="16" />
                            </Border.StrokeShape>
                            <Label Text="暂无评价，快来抢沙发~"
                                   FontSize="13"
                                   TextColor="#5A6475" />
                        </Border>

                        <CollectionView ItemsSource="{Binding Reviews}"
                                        IsVisible="{Binding HasReviews}"
                                        SelectionMode="None">
                            <CollectionView.ItemsLayout>
                                <LinearItemsLayout Orientation="Vertical"
                                                   ItemSpacing="14" />
                            </CollectionView.ItemsLayout>
                            <CollectionView.ItemTemplate>
                                <DataTemplate x:DataType="models:ServiceReviewInfo">
                                    <Border BackgroundColor="#F9FAFC"
                                            Padding="16"
                                            StrokeThickness="0">
                                        <Border.StrokeShape>
                                            <RoundRectangle CornerRadius="18" />
                                        </Border.StrokeShape>
                                        <Grid ColumnDefinitions="Auto,*"
                                              ColumnSpacing="14">
                                            <Border WidthRequest="48"
                                                    HeightRequest="48"
                                                    StrokeThickness="0"
                                                    BackgroundColor="#5B61FF"
                                                    HorizontalOptions="Start"
                                                    VerticalOptions="Start">
                                                <Border.StrokeShape>
                                                    <RoundRectangle CornerRadius="16" />
                                                </Border.StrokeShape>
                                                <Grid>
                                                    <Image Source="{Binding UserAvatarUrl}"
                                                           Aspect="AspectFill"
                                                           IsVisible="True">
                                                        <Image.Triggers>
                                                            <DataTrigger TargetType="Image"
                                                                         Binding="{Binding UserAvatarUrl}"
                                                                         Value="">
                                                                <Setter Property="IsVisible" Value="False" />
                                                            </DataTrigger>
                                                            <DataTrigger TargetType="Image"
                                                                         Binding="{Binding UserAvatarUrl}"
                                                                         Value="{x:Null}">
                                                                <Setter Property="IsVisible" Value="False" />
                                                            </DataTrigger>
                                                        </Image.Triggers>
                                                    </Image>
                                                    <Label Text="{Binding UserInitial}"
                                                           HorizontalOptions="Center"
                                                           VerticalOptions="Center"
                                                           FontAttributes="Bold"
                                                           TextColor="White"
                                                           IsVisible="False">
                                                        <Label.Triggers>
                                                            <DataTrigger TargetType="Label"
                                                                         Binding="{Binding UserAvatarUrl}"
                                                                         Value="">
                                                                <Setter Property="IsVisible" Value="True" />
                                                            </DataTrigger>
                                                            <DataTrigger TargetType="Label"
                                                                         Binding="{Binding UserAvatarUrl}"
                                                                         Value="{x:Null}">
                                                                <Setter Property="IsVisible" Value="True" />
                                                            </DataTrigger>
                                                        </Label.Triggers>
                                                    </Label>
                                                </Grid>
                                            </Border>

                                            <VerticalStackLayout Grid.Column="1"
                                                                 Spacing="6">
                                                <Grid ColumnDefinitions="*,Auto">
                                                    <Label Text="{Binding UserNickname}"
                                                           FontSize="15"
                                                           FontAttributes="Bold"
                                                           TextColor="#1A1A1A" />
                                                    <HorizontalStackLayout Grid.Column="1"
                                                                           Spacing="4"
                                                                           HorizontalOptions="End"
                                                                           VerticalOptions="Center">
                                                        <Label Text="{Binding Rating}"
                                                               FontSize="14"
                                                               TextColor="#FFB400"
                                                               FontAttributes="Bold" />
                                                        <Label Text="分"
                                                               FontSize="12"
                                                               TextColor="#FFB400" />
                                                    </HorizontalStackLayout>
                                                </Grid>
                                                <Label Text="{Binding ReviewDateDisplay}"
                                                       FontSize="12"
                                                       TextColor="#9AA0AE" />
                                                <Label Text="{Binding Comment}"
                                                       FontSize="14"
                                                       TextColor="#434A59"
                                                       LineHeight="1.4" />
                                            </VerticalStackLayout>
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </CollectionView.ItemTemplate>
                        </CollectionView>
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

        <Grid Grid.Row="2"
              BackgroundColor="White"
              Padding="20,12,20,24"
              ColumnDefinitions="*,Auto">
            <VerticalStackLayout Spacing="4"
                                  VerticalOptions="Center">
                <Label Text="当前价格"
                       FontSize="12"
                       TextColor="#7B8596" />
                <Label Text="{Binding SelectedService.Price, StringFormat='￥{0:F0}'}"
                       FontSize="22"
                       FontAttributes="Bold"
                       TextColor="#FF4D4F" />
            </VerticalStackLayout>
            <Button Grid.Column="1"
                    Text="立即下单"
                    HeightRequest="48"
                    WidthRequest="160"
                    CornerRadius="24"
                    IsEnabled="{Binding CanPlaceOrder}"
                    BackgroundColor="#5B61FF"
                    TextColor="White"
                    FontAttributes="Bold"
                    Clicked="OnPlaceOrderClicked" />
        </Grid>
    </Grid>
</ContentPage>
】

Views/ServiceDetailPage.xaml.cs:
【using GamerLinkApp.Helpers;
using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

[QueryProperty(nameof(ServiceId), "id")]
public partial class ServiceDetailPage : ContentPage
{
    private readonly ServiceDetailViewModel _viewModel;

    public ServiceDetailPage()
        : this(ServiceHelper.GetRequiredService<ServiceDetailViewModel>())
    {
    }

    public ServiceDetailPage(ServiceDetailViewModel vm)
    {
        InitializeComponent();
        _viewModel = vm;
        BindingContext = _viewModel;
    }

    public string? ServiceId
    {
        set
        {
            if (int.TryParse(value, out var id))
            {
                _viewModel.ServiceId = id;
            }
        }
    }

    private async void OnPlaceOrderClicked(object sender, EventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        var (success, errorMessage, order) = await _viewModel.PlaceOrderAsync();

        if (!success)
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                await DisplayAlert("提示", errorMessage, "确定");
            }

            return;
        }

        if (order is null)
        {
            return;
        }

        var orderNumber = $"订单号：{order.Id:D6}\n";
        var confirm = await DisplayAlert("下单成功", $"{orderNumber}是否立即前往支付？", "去支付", "稍后再说");
        if (confirm && Shell.Current is not null)
        {
            await Shell.Current.GoToAsync($"{nameof(OrderPaymentPage)}?orderId={order.Id}");
            return;
        }

        if (Shell.Current is not null)
        {
            await Shell.Current.GoToAsync($"{nameof(OrderListPage)}?status={nameof(OrderStatus.PendingPayment)}");
        }
    }

    private async void OnToggleFavoriteClicked(object sender, EventArgs e)
    {
        if (!await AuthNavigationHelper.EnsureAuthenticatedAsync())
        {
            return;
        }

        var result = await _viewModel.ToggleFavoriteAsync();

        if (result is null)
        {
            await DisplayAlert("提示", "操作失败，请稍后再试。", "确定");
        }
    }
}
】

Views/ServiceListPage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:models="clr-namespace:GamerLinkApp.Models"
             x:Class="GamerLinkApp.Views.ServiceListPage"
             x:Name="ServiceListPageRoot"
             Title="服务列表"
             BackgroundColor="#F5F6F9">
    <ContentPage.Resources>
        <Thickness x:Key="PagePadding">20,16,20,0</Thickness>
    </ContentPage.Resources>

    <CollectionView ItemsSource="{Binding Services}"
                    SelectionMode="None"
                    BackgroundColor="Transparent"
                    ItemSizingStrategy="MeasureAllItems">
        <CollectionView.ItemsLayout>
            <LinearItemsLayout Orientation="Vertical"
                               ItemSpacing="0" />
        </CollectionView.ItemsLayout>

        <CollectionView.Header>
            <VerticalStackLayout Spacing="24"
                                  Padding="{StaticResource PagePadding}">
                <Frame Padding="14,12"
                       CornerRadius="24"
                       BackgroundColor="White"
                       HasShadow="False"
                       BorderColor="#EEEEEE">
                    <Frame.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnSearchAreaTapped" />
                    </Frame.GestureRecognizers>
                    <Grid ColumnDefinitions="Auto,*"
                          ColumnSpacing="12"
                          VerticalOptions="Center"
                          HorizontalOptions="FillAndExpand">
                        <Image Grid.Column="0"
                               HeightRequest="20"
                               WidthRequest="20"
                               VerticalOptions="Center"
                               InputTransparent="True"
                               Source="https://img.icons8.com/ios-glyphs/30/9AA0B1/search--v1.png" />
                        <Entry x:Name="SearchEntry"
                               Grid.Column="1"
                               Placeholder="搜索服务或者向导"
                               PlaceholderColor="#9AA0B1"
                               TextColor="#2A2F3C"
                               FontSize="14"
                               VerticalOptions="Center"
                               HorizontalOptions="FillAndExpand"
                               BackgroundColor="Transparent"
                               Margin="0"
                               IsTextPredictionEnabled="False"
                               ReturnType="Search"
                               Text="{Binding SearchText}" />
                    </Grid>
                </Frame>

                <VerticalStackLayout Spacing="8" IsVisible="{Binding IsShowingBanners}">
                    <CarouselView HeightRequest="165"
                                  Loop="True"
                                  IsBounceEnabled="False"
                                  IndicatorView="{x:Reference BannerIndicators}">
                        <CarouselView.ItemsSource>
                            <x:Array Type="{x:Type x:String}">
                                <x:String>banner1.png</x:String>
                                <x:String>banner2.png</x:String>
                                <x:String>banner3.png</x:String>
                            </x:Array>
                        </CarouselView.ItemsSource>
                        <CarouselView.ItemTemplate>
                            <DataTemplate>
                                <Frame Padding="0"
                                       HasShadow="False"
                                       CornerRadius="18">
                                    <Image Source="{Binding .}"
                                           Aspect="AspectFill" />
                                </Frame>
                            </DataTemplate>
                        </CarouselView.ItemTemplate>
                    </CarouselView>
                    <IndicatorView x:Name="BannerIndicators"
                                   HorizontalOptions="Center"
                                   IndicatorColor="#D9D9D9"
                                   SelectedIndicatorColor="#5B61FF" />
                </VerticalStackLayout>

                <Grid ColumnDefinitions="*,*,*"
                      ColumnSpacing="14">
                    <Border BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/sword.png" />
                            <Label Text="英雄联盟"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="1"
                            BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/crown.png" />
                            <Label Text="王者荣耀"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>

                    <Border Grid.Column="2"
                            BackgroundColor="White"
                            StrokeShape="RoundRectangle 18"
                            Padding="14,12"
                            HeightRequest="90">
                        <VerticalStackLayout Spacing="10"
                                             HorizontalOptions="Center"
                                             VerticalOptions="Center">
                            <Image HeightRequest="28"
                                   WidthRequest="28"
                                   Source="https://img.icons8.com/fluency-systems-filled/48/5B61FF/medal.png" />
                            <Label Text="绝地求生"
                                   FontSize="13"
                                   TextColor="#2A2F3C"
                                   HorizontalTextAlignment="Center" />
                        </VerticalStackLayout>
                    </Border>
                </Grid>

                <Label Text="精选推荐"
                       FontSize="18"
                       FontAttributes="Bold"
                       TextColor="#2A2F3C" />
            </VerticalStackLayout>
        </CollectionView.Header>

        <CollectionView.ItemTemplate>
            <DataTemplate x:DataType="models:Service">
                <Frame Margin="20,0,20,16"
                       Padding="12"
                       BackgroundColor="White"
                       CornerRadius="18"
                       HasShadow="False"
                       BorderColor="#EEEEEE">
                    <Frame.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnServiceTapped" />
                    </Frame.GestureRecognizers>
                    <Grid>
                        <Grid ColumnDefinitions="Auto,*"
                              ColumnSpacing="14">
                            <Border Grid.Column="0"
                                    WidthRequest="110"
                                    HeightRequest="88"
                                    StrokeShape="RoundRectangle 16"
                                    VerticalOptions="Center">
                                <Image Source="{Binding ThumbnailUrl}"
                                       Aspect="AspectFill" />
                            </Border>

                            <VerticalStackLayout Grid.Column="1"
                                                  Spacing="6"
                                                  VerticalOptions="Center">
                                <Label Text="{Binding Title}"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#2A2F3C"
                                       LineBreakMode="TailTruncation" />
                                <Label Text="{Binding GameName}"
                                       FontSize="13"
                                       TextColor="#777D8C"
                                       LineBreakMode="TailTruncation" />
                                <HorizontalStackLayout Spacing="10">
                                    <Label Text="{Binding PurchaseCount, StringFormat='{0}人购买'}"
                                           FontSize="12"
                                           TextColor="#9AA0B1" />
                                    <Label Text="{Binding CompletedCount, StringFormat='完成{0}'}"
                                           FontSize="12"
                                           TextColor="#9AA0B1" />
                                </HorizontalStackLayout>
                                <Label Text="{Binding Price, StringFormat='￥{0:F0}'}"
                                       FontSize="16"
                                       FontAttributes="Bold"
                                       TextColor="#FF4D4F" />
                            </VerticalStackLayout>
                        </Grid>

                        <ImageButton Source="heart_outline.svg"
                                     BackgroundColor="Transparent"
                                     Padding="6"
                                     WidthRequest="36"
                                     HeightRequest="36"
                                     HorizontalOptions="End"
                                     VerticalOptions="Start"
                                     Command="{Binding BindingContext.ToggleFavoriteCommand, Source={x:Reference ServiceListPageRoot}}"
                                     CommandParameter="{Binding .}"
                                     SemanticProperties.Description="切换收藏">
                            <ImageButton.Triggers>
                                <DataTrigger TargetType="ImageButton"
                                             Binding="{Binding IsFavorite}"
                                             Value="True">
                                    <Setter Property="Source" Value="heart_filled.svg" />
                                </DataTrigger>
                            </ImageButton.Triggers>
                        </ImageButton>
                    </Grid>
                </Frame>
            </DataTemplate>
        </CollectionView.ItemTemplate>
        <!-- 🧩 这是添加的空视图部分 -->
        <CollectionView.EmptyView>
            <VerticalStackLayout Spacing="8"
                             Padding="0,60,0,0"
                             HorizontalOptions="Center"
                             VerticalOptions="Start">
                <Image Source="no_service.png"
                   WidthRequest="120"
                   HeightRequest="120"
                   Aspect="AspectFit"
                   Opacity="0.85" />
                <Label Text="暂无服务"
                   FontSize="18"
                   FontAttributes="Bold"
                   HorizontalTextAlignment="Center"
                   TextColor="#6B7280" />
                <Label Text="试试刷新一下或看看其他分类吧~"
                   FontSize="13"
                   HorizontalTextAlignment="Center"
                   TextColor="#9AA0B1" />
            </VerticalStackLayout>
        </CollectionView.EmptyView>
    </CollectionView>
</ContentPage>
】

Views/ServiceListPage.xaml.cs:
【﻿using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ServiceListPage : ContentPage
{
    public ServiceListPage(ServiceListViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }

    public ServiceListPage()
    {
        InitializeComponent();
    }

    private void OnSearchAreaTapped(object sender, TappedEventArgs e)
    {
        // 点击搜索区域时，让输入框获得焦点
        SearchEntry.Focus();
    }

    private async void OnServiceTapped(object sender, TappedEventArgs e)
    {
        if ((sender as Element)?.BindingContext is not Service tappedService)
            return;

        await Shell.Current.GoToAsync($"{nameof(ServiceDetailPage)}?id={tappedService.Id}");
    }

    protected override async void OnAppearing()
    {
        base.OnAppearing();

        if (BindingContext is ServiceListViewModel vm)
        {
            await vm.RefreshFavoritesAsync();
        }
    }
}
】

Views/ZonePage.xaml:
【﻿<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:GamerLinkApp.ViewModels"
             x:Class="GamerLinkApp.Views.ZonePage"
             x:DataType="vm:ZoneViewModel"
             xmlns:model="clr-namespace:GamerLinkApp.Models"
             Title="Game Zone"
             BackgroundColor="#FFFFFF">
    <Grid ColumnDefinitions="140,*">
        <Border Grid.Column="0"
                Padding="0,24,0,0"
                BackgroundColor="#F5F6F8"
                StrokeThickness="0">
            <CollectionView ItemsSource="{Binding Categories}"
                            SelectionMode="Single"
                            SelectedItem="{Binding SelectedCategory, Mode=TwoWay}"
                            Margin="0"
                            BackgroundColor="Transparent">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical"
                                       ItemSpacing="0"/>
                </CollectionView.ItemsLayout>
                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="model:Category">
                        <Grid ColumnDefinitions="6,*"
                              Padding="0,14"
                              BackgroundColor="Transparent">
                            <BoxView x:Name="SelectionIndicator"
                                     WidthRequest="6"
                                     BackgroundColor="Transparent"
                                     HorizontalOptions="Fill"
                                     VerticalOptions="Fill"/>
                            <Label x:Name="CategoryLabel"
                                   Grid.Column="1"
                                   Text="{Binding Name}"
                                   FontSize="16"
                                   TextColor="#5F6473"
                                   VerticalOptions="Center"
                                   Padding="18,0"
                                   LineBreakMode="TailTruncation"/>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="SelectionStates">
                                    <VisualState Name="Normal">
                                        <VisualState.Setters>
                                            <Setter TargetName="SelectionIndicator"
                                                    Property="BoxView.BackgroundColor"
                                                    Value="Transparent"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.TextColor"
                                                    Value="#5F6473"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.FontAttributes"
                                                    Value="None"/>
                                            <Setter Property="BackgroundColor"
                                                    Value="Transparent"/>
                                        </VisualState.Setters>
                                    </VisualState>
                                    <VisualState Name="Selected">
                                        <VisualState.Setters>
                                            <Setter TargetName="SelectionIndicator"
                                                    Property="BoxView.BackgroundColor"
                                                    Value="#3478F6"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.TextColor"
                                                    Value="#3478F6"/>
                                            <Setter TargetName="CategoryLabel"
                                                    Property="Label.FontAttributes"
                                                    Value="Bold"/>
                                            <Setter Property="BackgroundColor"
                                                    Value="#EAF1FF"/>
                                        </VisualState.Setters>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
        </Border>

        <VerticalStackLayout Grid.Column="1"
                             Padding="32,24"
                             Spacing="24"
                             BackgroundColor="#FFFFFF">
            <Label Text="{Binding SelectedCategory.Name, FallbackValue='Game Zone'}"
                   FontSize="22"
                   FontAttributes="Bold"
                   TextColor="#1F1F1F"/>

            <Label Text="No services available"
                   FontSize="14"
                   TextColor="#8E94A2"
                   HorizontalOptions="Center"
                   IsVisible="False">
                <Label.Triggers>
                    <DataTrigger TargetType="Label"
                                 Binding="{Binding HighlightedService}"
                                 Value="{x:Null}">
                        <Setter Property="IsVisible"
                                Value="True"/>
                    </DataTrigger>
                </Label.Triggers>
            </Label>
            <CollectionView ItemsSource="{Binding Services}"
                            SelectionMode="None"
                            Margin="0"
                            BackgroundColor="Transparent">
                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical"
                            ItemSpacing="12"/>
                </CollectionView.ItemsLayout>

                <CollectionView.ItemTemplate>
                    <DataTemplate x:DataType="model:Service">
                        <Border Padding="16"
                                BackgroundColor="#FFFFFF"
                                StrokeThickness="1"
                                Stroke="#E5E7EB"
                                Margin="0,0,0,12">
                            <Border.StrokeShape>
                                <RoundRectangle CornerRadius="16"/>
                            </Border.StrokeShape>

                            <Grid ColumnDefinitions="Auto,*"
                                  ColumnSpacing="16">
                                <Border WidthRequest="84"
                                        HeightRequest="84"
                                        StrokeThickness="0"
                                        BackgroundColor="#F2F4F8">
                                    <Border.StrokeShape>
                                        <RoundRectangle CornerRadius="12"/>
                                    </Border.StrokeShape>
                                    <Image Source="{Binding ThumbnailUrl}"
                                            Aspect="AspectFill"/>
                                </Border>

                                <VerticalStackLayout Grid.Column="1"
                                                     Spacing="8"
                                                     VerticalOptions="Center">
                                    <Label Text="{Binding Title}"
                                           FontSize="16"
                                           FontAttributes="Bold"
                                           TextColor="#1F1F1F"
                                           LineBreakMode="TailTruncation"/>
                                    <Label Text="{Binding PurchaseCount, StringFormat='Sold {0}'}"
                                           FontSize="12"
                                           TextColor="#8E94A2"/>
                                    <Label Text="{Binding Price, StringFormat='{0:C0}'}"
                                           FontSize="18"
                                           FontAttributes="Bold"
                                           TextColor="#E53935"/>
                                </VerticalStackLayout>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>


        </VerticalStackLayout>
    </Grid>
</ContentPage>
】

Views/ZonePage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ZonePage : ContentPage
{
	public ZonePage()
	{
		InitializeComponent();
	}
	// 修改构造函数以接收 ViewModel
	public ZonePage(ZoneViewModel vm)
	{
		InitializeComponent();
		BindingContext = vm; // 设置数据上下文
	}
}】

