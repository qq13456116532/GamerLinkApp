./AppShell.xaml.cs:
【﻿using GamerLinkApp.Views;

namespace GamerLinkApp
{
    public partial class AppShell : Shell
    {
        public AppShell()
        {
            InitializeComponent();
            // 为服务详情页注册路由, 以便导航服务可以找到
            Routing.RegisterRoute(nameof(ServiceDetailPage), typeof(ServiceDetailPage));
        }
    }
}
】

./MainPage.xaml.cs:
【﻿namespace GamerLinkApp
{
    public partial class MainPage : ContentPage
    {
        int count = 0;

        public MainPage()
        {
            InitializeComponent();
        }

        private void OnCounterClicked(object? sender, EventArgs e)
        {
            count++;

            if (count == 1)
                CounterBtn.Text = $"Clicked {count} time";
            else
                CounterBtn.Text = $"Clicked {count} times";

            SemanticScreenReader.Announce(CounterBtn.Text);
        }
    }
}
】

./MauiProgram.cs:
【﻿using GamerLinkApp.Services;
using Microsoft.Extensions.Logging;
using GamerLinkApp.ViewModels;
using GamerLinkApp.Views;
namespace GamerLinkApp
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });

#if DEBUG
    		builder.Logging.AddDebug();
#endif
            // 注册服务
            builder.Services.AddSingleton<IDataService, MockDataService>();

            // 注册视图和视图模型
            builder.Services.AddSingleton<ServiceListPage>();
            builder.Services.AddSingleton<ServiceListViewModel>();

            // ... 注册其他页面和视图模型
            builder.Services.AddSingleton<ZonePage>();
            //builder.Services.AddSingleton<ZoneViewModel>();
            builder.Services.AddSingleton<ProfilePage>();
            builder.Services.AddSingleton<ProfileViewModel>();

            builder.Services.AddTransient<ServiceDetailPage>();
            builder.Services.AddTransient<ServiceDetailViewModel>();

            return builder.Build();
        }
    }
}
】

Models/Banner.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Banner
    {
        public int Id { get; set; }
        public string ImageUrl { get; set; } // Banner图片地址
        public string TargetUrl { get; set; } // 点击Banner后跳转的地址 (例如某个服务的详情页)
    }
}
】

Models/Category.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } // 分类名称，如 "MOBA", "FPS", "RPG"
        public string IconUrl { get; set; } // 分类的图标URL (可选)
    }
}】

Models/Favorite.cs:
【﻿namespace GamerLinkApp.Models
{
    public class Favorite
    {
        public int Id { get; set; }
        public int UserId { get; set; }     // 哪个用户收藏的
        public int ServiceId { get; set; }  // 收藏了哪个服务
    }
}】

Models/Order.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class Order
    {
        public int Id { get; set; }
        public int ServiceId { get; set; }
        public int BuyerId { get; set; }
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } // 例如: "进行中", "已完成"

        // 订单流程管理
        public DateTime? PaymentDate { get; set; } // 支付时间
        public DateTime? CompletionDate { get; set; } // 订单完成时间
        public DateTime? RefundRequestDate { get; set; } // 退款申请时间
        public decimal TotalPrice { get; set; } // 订单总价

        // 评论系统关联
        public int? ReviewId { get; set; } // 关联的评论ID，可以为空
    }

    // 建议为订单状态定义一个枚举
    public enum OrderStatus
    {
        PendingPayment, // 待支付
        Ongoing,        // 进行中
        PendingReview,  // 待评论
        Completed,      // 已完成
        RefundRequested,// 退款中
        Cancelled       // 已取消
    }
}
】

Models/Review.cs:
【﻿using System;

namespace GamerLinkApp.Models
{
    public class Review
    {
        public int Id { get; set; }
        public int ServiceId { get; set; } // 关联哪个服务
        public int OrderId { get; set; }   // 关联哪个订单
        public int UserId { get; set; }    // 哪个用户发表的
        public int Rating { get; set; }    // 评分 (例如 1-5 星)
        public string Comment { get; set; } // 评论内容
        public DateTime ReviewDate { get; set; } // 评论时间
    }
}】

Models/Service.cs:
【﻿using System.Collections.Generic;

namespace GamerLinkApp.Models
{
    public class Service
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string GameName { get; set; }
        public string ServiceType { get; set; } // 例如: "代练", "陪玩"
        public int SellerId { get; set; }

        public string ThumbnailUrl { get; set; } // 列表和推荐位缩略图
        public List<string> ImageUrls { get; set; } // 轮播图/详情图集合
        public string Category { get; set; } // 服务所属分类, 如 "MOBA", "FPS"
        public bool IsFeatured { get; set; } // 是否精选推荐
        public double AverageRating { get; set; } // 平均评分
        public int ReviewCount { get; set; } // 评价数量
        public int PurchaseCount { get; set; } // 累计购买人数
        public int CompletedCount { get; set; } // 已完成订单数

        public List<string> Tags { get; set; } // 服务标签, 如 "上分", "陪练"
    }
}
】

Models/User.cs:
【﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Models
{
    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }

        // 微信认证相关，暂时不用
        //public string WeChatOpenId { get; set; } // 用户的唯一标识
        //public string WeChatUnionId { get; set; } // 如果应用涉及多个公众号或小程序，会用到

        // 个人资料管理
        public string Nickname { get; set; } // 用户昵称
        public string AvatarUrl { get; set; } // 用户头像图片的URL

    }
}
】

Services/IDataService.cs:
【﻿using GamerLinkApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GamerLinkApp.Services
{
    public interface IDataService
    {
        Task<List<Service>> GetServicesAsync();
        // ... 其他数据操作方法
    }
}
】

Services/MockDataService.cs:
【﻿using GamerLinkApp.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace GamerLinkApp.Services
{
    public class MockDataService : IDataService
    {
        public async Task<List<Service>> GetServicesAsync()
        {
            await Task.Delay(500); // 模拟网络延迟

            return new List<Service>
            {
                new Service
                {
                    Id = 1,
                    Title = "王者荣耀-荣耀王者陪练",
                    Description = "资深荣耀王者，全程语音指导，帮你稳步冲分。",
                    GameName = "王者荣耀",
                    Price = 50,
                    ServiceType = "陪玩",
                    Category = "MOBA",
                    ThumbnailUrl = "https://images.unsplash.com/photo-1521572267360-ee0c2909d518?auto=format&fit=crop&w=640&q=80",
                    ImageUrls = new List<string>
                    {
                        "https://images.unsplash.com/photo-1521572267360-ee0c2909d518?auto=format&fit=crop&w=1080&q=80",
                        "https://images.unsplash.com/photo-1489515217757-5fd1be406fef?auto=format&fit=crop&w=1080&q=80"
                    },
                    IsFeatured = true,
                    AverageRating = 4.9,
                    ReviewCount = 1280,
                    PurchaseCount = 1547,
                    CompletedCount = 120,
                    Tags = new List<string> { "大神陪练", "语音指导", "快速上分" }
                },
                new Service
                {
                    Id = 2,
                    Title = "英雄联盟-钻石到大师",
                    Description = "职业选手小号，提供双排/代练服务，安全稳定。",
                    GameName = "英雄联盟",
                    Price = 300,
                    ServiceType = "代练",
                    Category = "MOBA",
                    ThumbnailUrl = "https://images.unsplash.com/photo-1538485399081-7191377e8248?auto=format&fit=crop&w=640&q=80",
                    ImageUrls = new List<string>
                    {
                        "https://images.unsplash.com/photo-1538485399081-7191377e8248?auto=format&fit=crop&w=1080&q=80",
                        "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?auto=format&fit=crop&w=1080&q=80"
                    },
                    IsFeatured = true,
                    AverageRating = 4.8,
                    ReviewCount = 980,
                    PurchaseCount = 2300,
                    CompletedCount = 45,
                    Tags = new List<string> { "极速上分", "全天在线", "职业大神" }
                },
                new Service
                {
                    Id = 3,
                    Title = "绝地求生-战术教官",
                    Description = "提供战术复盘、枪法训练、团队配合提升计划。",
                    GameName = "绝地求生",
                    Price = 120,
                    ServiceType = "教学",
                    Category = "射击",
                    ThumbnailUrl = "https://images.unsplash.com/photo-1605902711622-cfb43c44367f?auto=format&fit=crop&w=640&q=80",
                    ImageUrls = new List<string>
                    {
                        "https://images.unsplash.com/photo-1605902711622-cfb43c44367f?auto=format&fit=crop&w=1080&q=80",
                        "https://images.unsplash.com/photo-1529257414771-1960ab1ddb12?auto=format&fit=crop&w=1080&q=80"
                    },
                    IsFeatured = false,
                    AverageRating = 4.7,
                    ReviewCount = 560,
                    PurchaseCount = 860,
                    CompletedCount = 72,
                    Tags = new List<string> { "战术复盘", "枪法提升", "团战配合" }
                }
            };
        }
    }
}
】

ViewModels/BaseViewModel.cs:
【using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace GamerLinkApp.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}】

ViewModels/ProfileViewModel.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.ViewModels
{
    public class ProfileViewModel : BaseViewModel
    {
        public ProfileViewModel()
        {
            // ÔÚÕâÀï¿ÉÒÔ³õÊ¼»¯¸öÈËÒ³ÃæµÄÊý¾ÝºÍÃüÁî
        }
    }
}】

ViewModels/ServiceDetailViewModel.cs:
【﻿using GamerLinkApp.Models;
using GamerLinkApp.Services;
using System.Threading.Tasks;
using Microsoft.Maui.Controls;

namespace GamerLinkApp.ViewModels
{
    [QueryProperty(nameof(ServiceId), "id")] // Shell 路由传参用
    public class ServiceDetailViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        private Service _selectedService;
        public Service SelectedService
        {
            get => _selectedService;
            set
            {
                _selectedService = value;
                OnPropertyChanged();
            }
        }

        private int serviceId;
        public int ServiceId
        {
            get => serviceId;
            set
            {
                serviceId = value;
                OnPropertyChanged();
                _ = LoadServiceAsync(value); // 自动加载对应服务详情
            }
        }

        public ServiceDetailViewModel(IDataService dataService)
        {
            _dataService = dataService;
        }

        private async Task LoadServiceAsync(int id)
        {
            try
            {
                var services = await _dataService.GetServicesAsync();
                SelectedService = services.FirstOrDefault(s => s.Id == id);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"加载服务详情失败: {ex.Message}");
            }
        }
    }
}
】

ViewModels/ServiceListViewModel.cs:
【﻿using GamerLinkApp.Models;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using GamerLinkApp.Services;

namespace GamerLinkApp.ViewModels
{
    public class ServiceListViewModel : BaseViewModel
    {
        private readonly IDataService _dataService;

        public ObservableCollection<Service> Services { get; } = new();

        public ServiceListViewModel(IDataService dataService)
        {
            _dataService = dataService;
            _ = LoadServicesAsync(); // 异步加载，不阻塞UI
        }

        private async Task LoadServicesAsync()
        {
            try
            {
                var services = await _dataService.GetServicesAsync();
                Services.Clear();
                foreach (var service in services)
                {
                    Services.Add(service);
                }
            }
            catch (Exception ex)
            {
                // TODO: 可以加日志或者 UI 提示
                System.Diagnostics.Debug.WriteLine($"加载服务失败: {ex.Message}");
            }
        }
    }
}
】

Views/ProfilePage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ProfilePage : ContentPage
{
    public ProfilePage(ProfileViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
    public ProfilePage()
    {
        InitializeComponent();
    }
}】

Views/ServiceDetailPage.xaml.cs:
【using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ServiceDetailPage : ContentPage
{
    public ServiceDetailPage(ServiceDetailViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}】

Views/ServiceListPage.xaml.cs:
【using GamerLinkApp.Models;
using GamerLinkApp.ViewModels;

namespace GamerLinkApp.Views;

public partial class ServiceListPage : ContentPage
{
    public ServiceListPage(ServiceListViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm; // Í¨¹ýÒÀÀµ×¢Èë°ó¶¨ ViewModel
    }

    // ÎÞ²ÎÊýµÄ¹¹Ôìº¯Êý¿ÉÒÔ±£Áô£¬ÒÔ±ãXAMLÔ¤ÀÀÆ÷Õý³£¹¤×÷
    public ServiceListPage()
    {
        InitializeComponent();
    }

    // ÐÂÔö: ´¦Àí·þÎñÏîÄ¿Ñ¡ÔñÊÂ¼þ
    private async void OnServiceSelected(object sender, SelectionChangedEventArgs e)
    {
        // È·±£ÓÐÏîÄ¿±»Ñ¡ÖÐ
        if (e.CurrentSelection.FirstOrDefault() is not Service selectedService)
            return;

        // Ê¹ÓÃ Shell µ¼º½µ½ÏêÇéÒ³£¬²¢Í¨¹ý²éÑ¯²ÎÊý´«µÝ·þÎñID
        // "id" ±ØÐëÓë ServiceDetailViewModel ÖÐµÄ QueryProperty Ãû³ÆÆ¥Åä
        await Shell.Current.GoToAsync($"{nameof(ServiceDetailPage)}?id={selectedService.Id}");

        // È¡ÏûÑ¡ÖÐ£¬ÒÔ±ãÓÃ»§¿ÉÒÔÔÙ´ÎÑ¡ÔñÍ¬Ò»¸öÏîÄ¿
        ((CollectionView)sender).SelectedItem = null;
    }
}】

Views/ZonePage.xaml.cs:
【namespace GamerLinkApp.Views;

public partial class ZonePage : ContentPage
{
	public ZonePage()
	{
		InitializeComponent();
	}
}】

